C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\DWIN\Keil_v5\C51\BIN\C51.EXE source\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\sour
                    -ce) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "timer.h"
   2          #include "ui.h"
   3          #include "uart.h"
   4          #include "dwin8283.h"
   5          #include "canbus.h"
   6          #include "ssd2828.h"
*** WARNING C235 IN LINE 76 OF source\ssd2828.h: parameter 1: different types
   7          #include <string.h> 
   8          #include <stdio.h>
   9          
  10          
  11          #include "temp.h"
  12          
  13          
  14          
  15          //–∑–∞–º–µ—Ç–∫–∏!!
  16          //—Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏ –ø–æ vp
  17          //write_dgus_vp(0x1200, "fadsfsadfad\x00", sizeof("fadsfsadfad\x00"));
  18          
  19          //–¢1   –≤—Ä–µ–º—è –ø—Ä–µ–¥–≤. –ø—Ä–æ–¥—É–≤–∫–∏, —Å
  20          data u16 some_rus_string[] = {0x0422, 0x0031, 0x0020, 0x0432, 0x0440, 0x0435, 0x043C, 0x044F, 0x0020, 0x04
             -3F, 0x0440, 0x0435, 0x0434, 0x0432, 0x002E, 0x0020, 0x043F, 0x0440, 0x043E, 0x0434, 0x0443, 0x0432, 0x043A, 0x0438, 0x00
             -2C, 0x0020, 0000};
  21          
  22                        
  23          
  24          
  25          
  26          struct text_field
  27          {
  28              void *vp;
  29              u16 x;
  30              u16 y;
  31              u16 color;    
  32          }text1;
  33          
  34          
  35          u8 state, inbufind;
  36          u8 bufin[255];
  37          u8 len; 
  38          
  39          u8 begfl,endfl;
  40          
  41          #define UART_INIT       {state = inbufind=0;  begfl=endfl=0;} 
  42          #define UART_INIT_1 {state=1; inbufind=0; begfl=endfl=0;}
  43          #define TEXT_VP (0x1200)
  44          u8 temp_offset = 0;
  45          
  46          
  47          
  48          
  49          u8  my_text[100];
  50          u8 counter = 0;
  51          
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 2   

  52          
  53          //IOÔøΩÔøΩÔøΩ≈≥ÔøΩ ºÔøΩÔøΩ
  54          void io_init()
  55          {
  56   1               PORTDRV = 0x01;//ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒ™8mA
  57   1              //P1MDOUT |= 0x02;//ÔøΩÔøΩP1.1ÔøΩÔøΩÔøΩÔøΩŒ™ÔøΩÔøΩÔøΩ,ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩLED1ÔøΩÔøΩ
  58   1              //P1MDOUT &= 0xFE;//ÔøΩÔøΩP1.0ÔøΩÔøΩÔøΩÔøΩŒ™ÔøΩÔøΩÔøΩÔøΩ,ÔøΩÔøΩÔøΩ⁄∂ÔøΩ»°ÔøΩÔøΩÔøΩ≈µƒµÔøΩ∆ΩÔøΩ‰ªØ
  59   1              //sbit csx = P1^0;              //p1.0
  60   1              //sbit sdo = P1^1;              //p1.1
  61   1              //sbit sdi = P1^2;              //p1.2
  62   1              //sbit sck = P1^3;              //p1.3
  63   1              //sbit sdc = P1^4;              //p1.4
  64   1              
  65   1              P1MDOUT = 0xFD; 
  66   1              P1=0xFD;        
  67   1      }
  68          
  69          
  70          
  71          u8 idx = 0;
  72             
  73               
  74          xdata u8 dbg_string[50];
  75          xdata u16 key_code;
  76          
  77          const u16 KEY_CODE_VP = 0x2000;
  78          
  79          
  80          void nothing(void)
  81          {
  82   1          static u8 cnt = 0;
  83   1          if((cnt & 0x01) == 1) {
  84   2              draw_vertical_menu();
*** WARNING C206 IN LINE 84 OF source\main.c: 'draw_vertical_menu': missing function-prototype
  85   2          } else {
  86   2              u16 dummpy = 0x0000;
  87   2              write_dgus_vp(0x9500, (u8*) &dummpy, 1);
  88   2          }
  89   1          cnt++; //for switch                             
  90   1          
  91   1      }
  92           
  93          void draw_rectangle(const u16 x,const u16 y)
  94          {
  95   1          xdata u16 draw_rect_cmd[30];
  96   1          draw_rect_cmd[0] = 0x0003;  //shape type
  97   1          draw_rect_cmd[1] = 0x0003;  //obj cnt
  98   1          draw_rect_cmd[2] = 0;       //x0
  99   1          draw_rect_cmd[3] = y;       //y0
 100   1          draw_rect_cmd[4] = 1023;    //x1
 101   1          draw_rect_cmd[5] = y + 100; //y1
 102   1          draw_rect_cmd[6] = 0xFFFF;  //color
 103   1          draw_rect_cmd[7] = 0 + 1;       //x0
 104   1          draw_rect_cmd[8] = y + 1;       //y0
 105   1          draw_rect_cmd[9] = 1023 - 1;    //x1
 106   1          draw_rect_cmd[10] = y + 100 - 1; //y1
 107   1          draw_rect_cmd[11] = 0xFFFF;  //color
 108   1          draw_rect_cmd[12] = 0 + 2;       //x0
 109   1          draw_rect_cmd[13] = y + 2;       //y0
 110   1          draw_rect_cmd[14] = 1023 - 2;    //x1
 111   1          draw_rect_cmd[15] = y + 100 - 2; //y1
 112   1          draw_rect_cmd[16] = 0xFFFF;  //color
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 3   

 113   1          draw_rect_cmd[17] = 0xFF00;
 114   1          
 115   1          write_dgus_vp(0x3000, (u8*) draw_rect_cmd, sizeof(draw_rect_cmd) / 2); 
 116   1      }
*** WARNING C280 IN LINE 93 OF source\main.c: 'x': unreferenced local variable
 117          
 118          void draw_string(u8* s)
 119          {
 120   1          xdata u16 str[50];
 121   1          u8 i;
 122   1          u8 len = strlen(s) + 1;
 123   1          for(i = 0; i < len; i++)
 124   1          {
 125   2              str[i] = s[i]; 
 126   2          }
 127   1          write_dgus_vp(0x1100, (u8*)str, len);
 128   1      }
 129          
 130          s16 rect_y_pos = 0;
 131          void btn_0(void)
 132          {
 133   1          //write_dgus_vp(0x1200, "F1\x00", sizeof("F1\x00"));
 134   1      //    text1.x += 10;
 135   1      //    text1.y += 10;
 136   1      //    write_dgus_vp(0x9001, (u8*) &text1.x, sizeof(text1.x));
 137   1          
 138   1        rect_y_pos -= 100;
 139   1          if(rect_y_pos <= 0) 
 140   1              rect_y_pos = 700;
 141   1          draw_rectangle(0, rect_y_pos);    
 142   1      }
 143          void btn_1(void)
 144          {
 145   1      //    write_dgus_vp(0x1200, "F2\x00", sizeof("F2\x00"));
 146   1            rect_y_pos += 100;
 147   1          if(rect_y_pos == 800) 
 148   1              rect_y_pos = 0;
 149   1          draw_rectangle(0, rect_y_pos);
 150   1          draw_string("string 1");   
 151   1      }
 152          
 153          void btn_2(void)
 154          {
 155   1          draw_string("string 2");
 156   1          write_dgus_vp(0x1200, "F3\x00", sizeof("F3\x00"));
 157   1      }
 158          
 159          void btn_3(void)
 160          {
 161   1          static u16 n;
 162   1          u8 temp[50];
 163   1          sprintf((u8*)temp, "%s%10d","test", n);//
 164   1          n++;
 165   1          draw_string(temp);
 166   1          write_dgus_vp(0x1200, "F4\x00", sizeof("F4\x00"));    
 167   1      }
 168          
 169          void btn_4(void)
 170          {
 171   1          draw_string("string 4");
 172   1          write_dgus_vp(0x1200, "F5\x00", sizeof("F5\x00"));
 173   1      }
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 4   

 174          void btn_5(void)
 175          {
 176   1          write_dgus_vp(0x1200, "F6\x00", sizeof("F6\x00"));
 177   1          
 178   1      }
 179          
 180          
 181          code void (*btn_func[])(void) = {
 182             btn_0, btn_1, btn_2,
 183             btn_3, btn_4, btn_5,
 184             nothing,nothing,nothing,nothing,nothing,nothing,nothing,nothing,nothing,nothing,    
 185          };
 186          
 187          
 188          
 189          
 190          print_utf_str(u16 vp, u8* str)
 191          {
 192   1          xdata u16 out_str[30];
 193   1          u8 i;
 194   1          u8 len;
 195   1          
 196   1          len = strlen(str) + 1;
 197   1          
 198   1          for(i = 0; i < len; i++) {
 199   2              out_str[i] = str[i];
 200   2          }
 201   1          
 202   1          write_dgus_vp(vp, (u8*)out_str, sizeof(out_str));
 203   1      }
 204          
 205          
 206          code u16 string_offsets[] = {0x1000, 0x1200, 0x1400, 0x1600, 0x1800 ,0x2000, 0x2200, 0x2400};
 207          
 208          
 209          typedef struct list_par_t{
 210              u8  name[30];
 211              u16 val;
 212          };
 213          
 214          
 215             
 216          void main()
 217          {
 218   1              INIT_CPU();            //CPU ÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩ◊¢ÔøΩÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–ªÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩxd
             -ataÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩ0ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩƒ±ÔøΩÔøΩÔøΩÔøΩ–≥ÔøΩ º÷µÔøΩÔøΩÔøΩÔøΩ“™ÔøΩ⁄∏√∫ÔøΩÔøΩÔøΩÔ
             -øΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ¬∏ÔøΩ÷µ
 219   1              T0_Init();                                               //ÔøΩÔøΩ ±ÔøΩÔøΩ0ÔøΩÔøΩ ºÔøΩÔøΩ
 220   1              EA = 1; //interrupt on
 221   1              
 222   1          //StartTimer(0,100);
 223   1              //StartTimer(1,50);
 224   1              //-------------------
 225   1              io_init();
 226   1      //      delay_ms(20);
 227   1              ssd2828_init();
 228   1      //________________________________________________________________________ __________   
 229   1              UartInit(UART5, 115200);
 230   1              UART_INIT //MARCROS
 231   1              
 232   1          draw_bottom_menu();
 233   1        
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 5   

 234   1      while(1)    
 235   1      {
 236   2         
 237   2         enum ETP_STATE 
 238   2         {
 239   2             ETPS_WAIT,
 240   2             ETPS_RELEASE,
 241   2             ETPS_FIRST_PRESS,
 242   2             ETPS_LIFT,
 243   2             ETPS_PRESSING,
 244   2         };
 245   2         
 246   2         static u8 tp_state = ETPS_WAIT;
 247   2         
 248   2         struct {
 249   2             u8 status;
 250   2             u8 action_type;
 251   2             u16 x;
 252   2             u16 y;
 253   2         } touch_data;
 254   2          
 255   2         while(1)
 256   2         {
 257   3             read_dgus_vp(0x16,(u8*)&touch_data, sizeof(touch_data) / 2); //info about touch status and coords
 258   3             
 259   3             if(touch_data.status == 0x5A) //if status byte 0x05 some action done
 260   3             {
 261   4                 touch_data.status = 0x00;
 262   4                 write_dgus_vp(0x16, (u8*) &touch_data.x, 1); //clear status byte to 00;
 263   4                  
 264   4                 {
 265   5                     u16 action = touch_data.action_type; 
 266   5                     write_dgus_vp(0x4000, (u8*) &action, 1); //show action type
 267   5                     write_dgus_vp(0x5200, (u8*) &touch_data.x, 2); //show coords of touch point
 268   5                 }
 269   4          
 270   4                 switch(touch_data.action_type)
 271   4                 {
 272   5                     case ETPS_RELEASE:
 273   5                     {
 274   6                         u8 i;
 275   6                         for(i = 0; i < cur_menu.size; i++) { //if touch coords in recatnle area
 276   7                              if(touch_data.x >= cur_menu.p_items[i].t_rect.x0 && touch_data.x <= cur_menu.p_ite
             -ms[i].t_rect.x1 &&  
 277   7                                  touch_data.y >= cur_menu.p_items[i].t_rect.y0 && touch_data.y <= cur_menu.p_it
             -ems[i].t_rect.y1 ) {
 278   8                                      //–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–π –ø—Ä—è–º–æ—É–≥–æ–
             -ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
 279   8                                      break;
 280   8                                  }
 281   7                              }
 282   6                          {
 283   7                              u16 dummy = i;
 284   7                              write_dgus_vp(0x2500, (u8*) &dummy, 1); //–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–¥ –≤—ã–±—Ä–∞–Ω
             -–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 285   7                          }
 286   6                          last_selected_menu_item = i;
 287   6                          cur_menu.func(); 
 288   6                         
 289   6                         break;
 290   6                     }
 291   5                         
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 6   

 292   5                     case ETPS_FIRST_PRESS:
 293   5                     {
 294   6                         
 295   6                          break;
 296   6                     }
 297   5                     case ETPS_LIFT:
 298   5                         break;
 299   5      
 300   5                     case ETPS_PRESSING:
 301   5                     {
 302   6                          break;
 303   6                     }
 304   5                     default:
 305   5                         break;
 306   5                 }
 307   4             }
 308   3             
 309   3         }
 310   2      }
 311   1          //working cmd 2407 0003 0000 02bc 0001  0064 02bc 0001   00c8 02bc 0003 FF00
 312   1          // {         
 313   1          //         struct {
 314   1          //           u16 x;
 315   1          //           u16 y;  
 316   1          //         } rect[] = {
 317   1          //           {0, 700},
 318   1          //           {100, 700},
 319   1          //           {200, 700},  
 320   1          //           {300, 700},  
 321   1          //           {400, 700},  
 322   1          //           {500, 700},  
 323   1          //           {600, 700},  
 324   1          //           {700, 700},  
 325   1          //           {800, 700},  
 326   1          //           {900, 700},  
 327   1                     
 328   1          //         };
 329   1                  
 330   1                
 331   1          //         while(1)
 332   1          //         {
 333   1          //             u8 i;
 334   1          //             struct {
 335   1          //                 u8 status; //0x5A if some action done
 336   1          //                 u8 action_type;
 337   1          //                 u16 x;
 338   1          //                 u16 y;
 339   1          //             } touch_data;
 340   1                      
 341   1                      
 342   1          //             read_dgus_vp(0x16,(u8*)&touch_data, sizeof(touch_data) / 2); //info about touch status 
             -and coords
 343   1          //             if(touch_data.status == 0x5A) {                                     
 344   1                          
 345   1          //                 //process touch action
 346   1          //                 for(i = 0; i < sizeof(rect) / sizeof(rect[0]); i++) { //if touch coords in recatnle
             - area
 347   1          //                 if(touch_data.x >= rect[i].x && touch_data.x <= rect[i].x + 100 &&
 348   1          //                    touch_data.y >= rect[i].y && touch_data.y <= rect[i].y + 100) {
 349   1                                                                                                        
 350   1          //                        write_dgus_vp(0x5200, (u8*) &touch_data.x, 2); //show coords of touch point
 351   1          //                        if(i == 0) {// –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω 0 —ç–ª–µ–º–µ–Ω—Ç
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 7   

 352   1          //                          static u8 cnt = 0;
 353   1          //                          if((cnt & 0x01) == 1) {
 354   1          //                             draw_vertical_menu();
 355   1          //                          } else {
 356   1          //                             u16 dummpy = 0x0000;
 357   1          //                             write_dgus_vp(0x9500, (u8*) &dummpy, 1);
 358   1          //                          }
 359   1          //                          cnt++; //for switch                             
 360   1          //                        }
 361   1                              
 362   1          //                        break;
 363   1          //                    }                           
 364   1          //                 }
 365   1                          
 366   1                          
 367   1          //                 //wait button up
 368   1                          
 369   1          //                 while(touch_data.action_type != 0x02) //manual page 52 tp controll
 370   1          //                 {
 371   1          //                     read_dgus_vp(0x16,(u8*)&touch_data, 1); //info about touch status and coords
 372   1          //                 }
 373   1          //                 touch_data.status = 0x00;
 374   1          //                 write_dgus_vp(0x16, (u8*) &touch_data.x, 1); //display coords of touch point
 375   1                          
 376   1          //             }        
 377   1                      
 378   1          //         }        
 379   1          // }    
 380   1         
 381   1          
 382   1      
 383   1      //     {
 384   1      //         u8 i;
 385   1      //         u8 str[60];
 386   1      //         struct list_par_t list_par[] = {
 387   1      //            {"par 1   ",  100},
 388   1      //            {"par 2sdf",  200},
 389   1      //            {"par 3   ",  300},
 390   1      //            {"par 4   ",  400},
 391   1      //            {"par 5a  ",  500},
 392   1      //            {"par 6b  ",  600},
 393   1      //            {"par 7c  ",  700},
 394   1      //            {"par 8   ",  800},
 395   1      //            {"par 9   ",  900},
 396   1      //            {"par 10  ", 1000},
 397   1      //        }; 
 398   1      //            
 399   1      //        
 400   1      //                 
 401   1      //          for(i = 0; i < sizeof(list_par) / sizeof(list_par[0]) ; i++){
 402   1      //              //sprintf(str, "%-30s %05d", list_par[i].name, list_par[i].val);   
 403   1      //              sprintf(str, "%s%d", list_par[i].name, list_par[i].val);   
 404   1      //              print_utf_str(string_offsets[i], str); 
 405   1      //          }
 406   1      //         
 407   1      //          
 408   1      //      }          
 409   1            
 410   1              
 411   1        
 412   1           
 413   1          
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 8   

 414   1           
 415   1          
 416   1          // dbg_string[0] = 0xff;
 417   1          // dbg_string[1] = 0xff;
 418   1          // dbg_string[2] = 0xff;
 419   1          // dbg_string[3] = 0xff;
 420   1          // dbg_string[4] = 0xff;
 421   1          // dbg_string[5] = 0xff;
 422   1          // while(1)
 423   1          // {
 424   1          //     //Uatr_Send_Data(UART5, sizeof(dbg_string), dbg_string);  
 425   1          //     delay_ms(5000);
 426   1          // }
 427   1          
 428   1         
 429   1          
 430   1          
 431   1          
 432   1          key_code = 0x0010; //16 –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞
 433   1          write_dgus_vp(0x5000, (u8*) &key_code, sizeof(key_code));
 434   1          while(1)
 435   1          {//–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
 436   2              read_dgus_vp(0x5000, (u8*)&key_code, sizeof(key_code));//—á—Ç–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–Ω–æ–∫–∏
 437   2              if(key_code < 0x0010)
 438   2              {
 439   3                              (*btn_func[key_code])();
 440   3                  key_code = 0x0010;            
 441   3                  write_dgus_vp(0x5000, (u8*) &key_code, sizeof(key_code));
 442   3              }
 443   2              
 444   2              
 445   2              
 446   2              //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ uart
 447   2              //delay_ms(100);
 448   2              if(Uart_Struct[UART5].tx_flag == 0) //–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
 449   2                      {
 450   3                 
 451   3                  static u8 buf_idx = 0;            
 452   3                  EA = 0;     
 453   3                  while(Uart_Struct[UART5].rx_tail != Uart_Struct[UART5].rx_head)
 454   3                              { 
 455   4                      u8 byte;
 456   4                      byte = Uart_Struct[UART5].rx_buf[Uart_Struct[UART5].rx_tail];
 457   4                                      Uart_Struct[UART5].rx_tail++;
 458   4                                      Uart_Struct[UART5].rx_tail &= SERIAL_COUNT;
 459   4                                      
 460   4                      //buf[buf_idx] = byte;
 461   4                      //buf_idx++;
 462   4                      
 463   4                      // if(Uart_Struct[UART5].rx_tail == Uart_Struct[UART5].rx_head)
 464   4                      // {
 465   4                      //     u8 i;
 466   4                      //     xdata u16 temp_buf[30];
 467   4                      //     for(i = 0; i < buf_idx; i++)
 468   4                      //     {  
 469   4                      //         sprintf((u8*) &temp_buf[i], "%02X", (u8)buf[i]);                        
 470   4                      //     } 
 471   4                      //     temp_buf[i] = 0x0000;
 472   4                          
 473   4                          
 474   4                      //     write_dgus_vp(0x1200, (u8*) &temp_buf, (buf_idx * 2) + 2);
 475   4                      //     buf_idx = 0;
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 9   

 476   4                      // }
 477   4                      
 478   4                      switch (state)
 479   4                                      {
 480   5                                      case 0:
 481   5                              if(byte == 0xA5) 
 482   5                                                      state=1;
 483   5                                              break; 
 484   5                                      
 485   5                                      case 1:
 486   5                                              if(byte == 0xA5) 
 487   5                                                      state=4;
 488   5                          else 
 489   5                                                      UART_INIT
 490   5                              break; 
 491   5                                      
 492   5                                      case 4:
 493   5                                              if(byte == 0xA5) 
 494   5                                                      begfl = 1;
 495   5                                              else if(byte == 0x5A)
 496   5                              endfl = 1;
 497   5                                              len = byte; 
 498   5                                              state = 6; 
 499   5                              break;  
 500   5      
 501   5                                      case 6:
 502   5                                              if(byte == 0xA5)
 503   5                          {
 504   6                                                      if (begfl == 1) 
 505   6                                                              state = 4;
 506   6                              else           
 507   6                                                              begfl = 1; 
 508   6                          }
 509   5                          else 
 510   5                                                      begfl=0;
 511   5      
 512   5                          if(byte == 0x5A)
 513   5                          {
 514   6                              if(endfl == 1) 
 515   6                                                      {
 516   7                                                              UART_INIT 
 517   7                                                              break;
 518   7                                                      } else
 519   6                                      endfl = 1; 
 520   6                          } else 
 521   5                                                      endfl = 0;
 522   5      
 523   5                              bufin[inbufind] = byte; 
 524   5                                              inbufind++;
 525   5      
 526   5                          if(inbufind == len + 2)
 527   5                          { 
 528   6                               state = 10;
 529   6                          } 
 530   5                                                      
 531   5                              break;
 532   5      
 533   5                                      case 10:
 534   5                                              if(byte == 0x5A) {
 535   6                              state = 11; 
 536   6                                                      break;
 537   6                                              }    
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 10  

 538   5                          if(byte == 0xA5) {  
 539   6                                                      UART_INIT_1 
 540   6                                                      break;
 541   6                                              }
 542   5                                              UART_INIT 
 543   5                                              break;
 544   5      
 545   5                                      case 11:
 546   5                                      {
 547   6                          u8 i;
 548   6                                              u8 crc = 0;
 549   6                          xdata u16 temp_buf[30];
 550   6                                              if(byte != 0x5A)
 551   6                          {
 552   7                              if(byte == 0xA5) 
 553   7                                                              UART_INIT_1 
 554   7                              else             
 555   7                                                              UART_INIT
 556   7                              break; 
 557   7                          }
 558   6                     
 559   6      
 560   6                          for(i = 1; i <= len; i++) {
 561   7                                                      crc += bufin[i];
 562   7                                              }
 563   6                          if(crc != bufin[len+1]) { 
 564   7                                                      UART_INIT
 565   7                                                      break; 
 566   7                                              }
 567   6                          //decode
 568   6                          for(i = 0; i < len; i++)
 569   6                          {  
 570   7                              sprintf((u8*) &temp_buf[i], "%02X", (u8)bufin[i + 1]);                        
 571   7                          } 
 572   6                          temp_buf[i] = 0x0000;
 573   6                          write_dgus_vp(0x1200, (u8*) &temp_buf, (len * 2) + 2);
 574   6                          
 575   6                      //     
 576   6                          //decode
 577   6                          // if(bufin[1] == 0x31) {
 578   6                          //     u8 i, j;
 579   6                          //     u8 temp_buf[30];
 580   6                          //     for(i = 2, j = 0; i < len; i++, j++) {
 581   6                          //         temp_buf[j] = bufin[i];         
 582   6                          //     }
 583   6                          //     temp_buf[j] = 0x00;
 584   6                          //     print_machine_name(temp_buf);
 585   6                          // }
 586   6                         
 587   6                                              UART_INIT
 588   6                                              break;
 589   6                                      }
 590   5                                      
 591   5                                      default: 
 592   5                                              break;
 593   5                              }
 594   4                              
 595   4                              
 596   4                              EA = 1;                
 597   4                  }
 598   3                 
 599   3                  
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 11  

 600   3              }        
 601   2      
 602   2          }
 603   1          
 604   1      
 605   1      
 606   1         
 607   1      }
*** WARNING C280 IN LINE 246 OF source\main.c: 'tp_state': unreferenced local variable
*** WARNING C280 IN LINE 451 OF source\main.c: 'buf_idx': unreferenced local variable
*** WARNING C290 IN LINE 203 OF source\main.c: missing return value
*** WARNING C294 IN LINE 432 OF source\main.c: unreachable code
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION io_init (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0000 75F901            MOV     PORTDRV,#01H
                                           ; SOURCE LINE # 65
0003 75BCFD            MOV     P1MDOUT,#0FDH
                                           ; SOURCE LINE # 66
0006 7590FD            MOV     P1,#0FDH
                                           ; SOURCE LINE # 67
0009 22                RET     
             ; FUNCTION io_init (END)

             ; FUNCTION nothing (BEGIN)
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 83
0000 900000      R     MOV     DPTR,#cnt
0003 E0                MOVX    A,@DPTR
0004 30E005            JNB     ACC.0,?C0002
                                           ; SOURCE LINE # 84
0007 120000      E     LCALL   draw_vertical_menu
                                           ; SOURCE LINE # 85
000A 801B              SJMP    ?C0003
000C         ?C0002:
                                           ; SOURCE LINE # 86
000C E4                CLR     A
000D 900000      R     MOV     DPTR,#dummpy
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
0013 7B01              MOV     R3,#01H
0015 7A00        R     MOV     R2,#HIGH dummpy
0017 7900        R     MOV     R1,#LOW dummpy
0019 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E 04                INC     A
001F F0                MOVX    @DPTR,A
0020 7F00              MOV     R7,#00H
0022 7E95              MOV     R6,#095H
0024 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 88
0027         ?C0003:
                                           ; SOURCE LINE # 89
0027 900000      R     MOV     DPTR,#cnt
002A E0                MOVX    A,@DPTR
002B 04                INC     A
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
002D 22                RET     
             ; FUNCTION nothing (END)

             ; FUNCTION _draw_rectangle (BEGIN)
                                           ; SOURCE LINE # 93
0000 900000      R     MOV     DPTR,#x
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 13  

0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
;---- Variable 'y' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 96
0008 A3                INC     DPTR
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C 7403              MOV     A,#03H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
000F A3                INC     DPTR
0010 E4                CLR     A
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7403              MOV     A,#03H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
0016 E4                CLR     A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
001B A3                INC     DPTR
001C EC                MOV     A,R4
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F ED                MOV     A,R5
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
0021 A3                INC     DPTR
0022 7403              MOV     A,#03H
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 74FF              MOV     A,#0FFH
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
0029 ED                MOV     A,R5
002A 2464              ADD     A,#064H
002C FE                MOV     R6,A
002D E4                CLR     A
002E 3C                ADDC    A,R4
002F A3                INC     DPTR
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 CE                XCH     A,R6
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
0034 74FF              MOV     A,#0FFH
0036 A3                INC     DPTR
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
003A A3                INC     DPTR
003B E4                CLR     A
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E 04                INC     A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 14  

003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
0040 2D                ADD     A,R5
0041 FE                MOV     R6,A
0042 E4                CLR     A
0043 3C                ADDC    A,R4
0044 A3                INC     DPTR
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 CE                XCH     A,R6
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
0049 A3                INC     DPTR
004A 7403              MOV     A,#03H
004C F0                MOVX    @DPTR,A
004D A3                INC     DPTR
004E 74FE              MOV     A,#0FEH
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0051 ED                MOV     A,R5
0052 2463              ADD     A,#063H
0054 FE                MOV     R6,A
0055 E4                CLR     A
0056 3C                ADDC    A,R4
0057 A3                INC     DPTR
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A CE                XCH     A,R6
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
005C 74FF              MOV     A,#0FFH
005E A3                INC     DPTR
005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
0062 A3                INC     DPTR
0063 E4                CLR     A
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066 7402              MOV     A,#02H
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0069 2D                ADD     A,R5
006A FE                MOV     R6,A
006B E4                CLR     A
006C 3C                ADDC    A,R4
006D A3                INC     DPTR
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 CE                XCH     A,R6
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
0072 A3                INC     DPTR
0073 7403              MOV     A,#03H
0075 F0                MOVX    @DPTR,A
0076 A3                INC     DPTR
0077 74FD              MOV     A,#0FDH
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
007A ED                MOV     A,R5
007B 2462              ADD     A,#062H
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 15  

007D FE                MOV     R6,A
007E E4                CLR     A
007F 3C                ADDC    A,R4
0080 A3                INC     DPTR
0081 F0                MOVX    @DPTR,A
0082 A3                INC     DPTR
0083 CE                XCH     A,R6
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0085 74FF              MOV     A,#0FFH
0087 A3                INC     DPTR
0088 F0                MOVX    @DPTR,A
0089 A3                INC     DPTR
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
008B A3                INC     DPTR
008C F0                MOVX    @DPTR,A
008D A3                INC     DPTR
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0090 7B01              MOV     R3,#01H
0092 7A00        R     MOV     R2,#HIGH draw_rect_cmd
0094 7900        R     MOV     R1,#LOW draw_rect_cmd
0096 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B 741E              MOV     A,#01EH
009D F0                MOVX    @DPTR,A
009E 7F00              MOV     R7,#00H
00A0 7E30              MOV     R6,#030H
00A2 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _draw_rectangle (END)

             ; FUNCTION _draw_string (BEGIN)
                                           ; SOURCE LINE # 118
0000 900000      R     MOV     DPTR,#s
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 122
000B 120000      E     LCALL   _strlen
000E EF                MOV     A,R7
000F 04                INC     A
0010 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 123
;---- Variable 'i' assigned to Register 'R6' ----
0011 E4                CLR     A
0012 FE                MOV     R6,A
0013         ?C0006:
0013 EE                MOV     A,R6
0014 C3                CLR     C
0015 9F                SUBB    A,R7
0016 5028              JNC     ?C0007
                                           ; SOURCE LINE # 124
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 16  

                                           ; SOURCE LINE # 125
0018 900000      R     MOV     DPTR,#s
001B E0                MOVX    A,@DPTR
001C FB                MOV     R3,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FA                MOV     R2,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 F9                MOV     R1,A
0023 8E82              MOV     DPL,R6
0025 758300            MOV     DPH,#00H
0028 120000      E     LCALL   ?C?CLDOPTR
002B FD                MOV     R5,A
002C EE                MOV     A,R6
002D 25E0              ADD     A,ACC
002F 2400        R     ADD     A,#LOW str
0031 F582              MOV     DPL,A
0033 E4                CLR     A
0034 3400        R     ADDC    A,#HIGH str
0036 F583              MOV     DPH,A
0038 E4                CLR     A
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B ED                MOV     A,R5
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
003D 0E                INC     R6
003E 80D3              SJMP    ?C0006
0040         ?C0007:
                                           ; SOURCE LINE # 127
0040 7B01              MOV     R3,#01H
0042 7A00        R     MOV     R2,#HIGH str
0044 7900        R     MOV     R1,#LOW str
0046 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0049 E4                CLR     A
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
004E 7F00              MOV     R7,#00H
0050 7E11              MOV     R6,#011H
0052 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _draw_string (END)

             ; FUNCTION btn_0 (BEGIN)
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 138
0000 900000      R     MOV     DPTR,#rect_y_pos+01H
0003 E0                MOVX    A,@DPTR
0004 249C              ADD     A,#09CH
0006 F0                MOVX    @DPTR,A
0007 900000      R     MOV     DPTR,#rect_y_pos
000A E0                MOVX    A,@DPTR
000B 34FF              ADDC    A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
000E D3                SETB    C
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 9400              SUBB    A,#00H
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 17  

0013 900000      R     MOV     DPTR,#rect_y_pos
0016 E0                MOVX    A,@DPTR
0017 6480              XRL     A,#080H
0019 9480              SUBB    A,#080H
001B 5007              JNC     ?C0010
                                           ; SOURCE LINE # 140
001D 7402              MOV     A,#02H
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 74BC              MOV     A,#0BCH
0023 F0                MOVX    @DPTR,A
0024         ?C0010:
                                           ; SOURCE LINE # 141
0024 900000      R     MOV     DPTR,#rect_y_pos
0027 E0                MOVX    A,@DPTR
0028 FC                MOV     R4,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FD                MOV     R5,A
002C E4                CLR     A
002D FF                MOV     R7,A
002E FE                MOV     R6,A
002F 020000      R     LJMP    _draw_rectangle
             ; FUNCTION btn_0 (END)

             ; FUNCTION btn_1 (BEGIN)
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 146
0000 900000      R     MOV     DPTR,#rect_y_pos+01H
0003 E0                MOVX    A,@DPTR
0004 2464              ADD     A,#064H
0006 F0                MOVX    @DPTR,A
0007 900000      R     MOV     DPTR,#rect_y_pos
000A E0                MOVX    A,@DPTR
000B 3400              ADDC    A,#00H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
000E E0                MOVX    A,@DPTR
000F B4030C            CJNE    A,#03H,?C0012
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 B42007            CJNE    A,#020H,?C0012
                                           ; SOURCE LINE # 148
0017 E4                CLR     A
0018 900000      R     MOV     DPTR,#rect_y_pos
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
001E         ?C0012:
                                           ; SOURCE LINE # 149
001E 900000      R     MOV     DPTR,#rect_y_pos
0021 E0                MOVX    A,@DPTR
0022 FC                MOV     R4,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 E4                CLR     A
0027 FF                MOV     R7,A
0028 FE                MOV     R6,A
0029 120000      R     LCALL   _draw_rectangle
                                           ; SOURCE LINE # 150
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 18  

002C 7BFF              MOV     R3,#0FFH
002E 7A00        R     MOV     R2,#HIGH ?SC_0
0030 7900        R     MOV     R1,#LOW ?SC_0
0032 020000      R     LJMP    _draw_string
             ; FUNCTION btn_1 (END)

             ; FUNCTION btn_2 (BEGIN)
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_9
0004 7900        R     MOV     R1,#LOW ?SC_9
0006 120000      R     LCALL   _draw_string
                                           ; SOURCE LINE # 156
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_18
000D 7900        R     MOV     R1,#LOW ?SC_18
000F 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 7404              MOV     A,#04H
0017 F0                MOVX    @DPTR,A
0018 7F00              MOV     R7,#00H
001A 7E12              MOV     R6,#012H
001C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_2 (END)

             ; FUNCTION btn_3 (BEGIN)
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 163
0000 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        R     MOV     A,#HIGH ?SC_22
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B 7400        R     MOV     A,#LOW ?SC_22
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F 74FF              MOV     A,#0FFH
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7400        R     MOV     A,#HIGH ?SC_29
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 7400        R     MOV     A,#LOW ?SC_29
0019 F0                MOVX    @DPTR,A
001A 900000      R     MOV     DPTR,#n
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 900000      E     MOV     DPTR,#?_sprintf?BYTE+09H
0024 CF                XCH     A,R7
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 19  

0029 7B01              MOV     R3,#01H
002B 7A00        R     MOV     R2,#HIGH temp
002D 7900        R     MOV     R1,#LOW temp
002F 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 164
0032 900000      R     MOV     DPTR,#n+01H
0035 E0                MOVX    A,@DPTR
0036 04                INC     A
0037 F0                MOVX    @DPTR,A
0038 7006              JNZ     ?C0080
003A 900000      R     MOV     DPTR,#n
003D E0                MOVX    A,@DPTR
003E 04                INC     A
003F F0                MOVX    @DPTR,A
0040         ?C0080:
                                           ; SOURCE LINE # 165
0040 7B01              MOV     R3,#01H
0042 7A00        R     MOV     R2,#HIGH temp
0044 7900        R     MOV     R1,#LOW temp
0046 120000      R     LCALL   _draw_string
                                           ; SOURCE LINE # 166
0049 7BFF              MOV     R3,#0FFH
004B 7A00        R     MOV     R2,#HIGH ?SC_34
004D 7900        R     MOV     R1,#LOW ?SC_34
004F 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0052 E4                CLR     A
0053 F0                MOVX    @DPTR,A
0054 A3                INC     DPTR
0055 7404              MOV     A,#04H
0057 F0                MOVX    @DPTR,A
0058 7F00              MOV     R7,#00H
005A 7E12              MOV     R6,#012H
005C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_3 (END)

             ; FUNCTION btn_4 (BEGIN)
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_38
0004 7900        R     MOV     R1,#LOW ?SC_38
0006 120000      R     LCALL   _draw_string
                                           ; SOURCE LINE # 172
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_47
000D 7900        R     MOV     R1,#LOW ?SC_47
000F 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 7404              MOV     A,#04H
0017 F0                MOVX    @DPTR,A
0018 7F00              MOV     R7,#00H
001A 7E12              MOV     R6,#012H
001C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_4 (END)

             ; FUNCTION btn_5 (BEGIN)
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 20  

0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_51
0004 7900        R     MOV     R1,#LOW ?SC_51
0006 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C 7404              MOV     A,#04H
000E F0                MOVX    @DPTR,A
000F 7F00              MOV     R7,#00H
0011 7E12              MOV     R6,#012H
0013 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_5 (END)

             ; FUNCTION _print_utf_str (BEGIN)
                                           ; SOURCE LINE # 190
0000 900000      R     MOV     DPTR,#vp
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F E9                MOV     A,R1
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 196
0011 120000      E     LCALL   _strlen
0014 EF                MOV     A,R7
0015 04                INC     A
0016 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 198
;---- Variable 'i' assigned to Register 'R6' ----
0017 E4                CLR     A
0018 FE                MOV     R6,A
0019         ?C0018:
0019 EE                MOV     A,R6
001A C3                CLR     C
001B 9F                SUBB    A,R7
001C 5028              JNC     ?C0019
                                           ; SOURCE LINE # 199
001E 900000      R     MOV     DPTR,#str
0021 E0                MOVX    A,@DPTR
0022 FB                MOV     R3,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FA                MOV     R2,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 F9                MOV     R1,A
0029 8E82              MOV     DPL,R6
002B 758300            MOV     DPH,#00H
002E 120000      E     LCALL   ?C?CLDOPTR
0031 FD                MOV     R5,A
0032 EE                MOV     A,R6
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 21  

0033 25E0              ADD     A,ACC
0035 2400        R     ADD     A,#LOW out_str
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH out_str
003C F583              MOV     DPH,A
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 ED                MOV     A,R5
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0043 0E                INC     R6
0044 80D3              SJMP    ?C0018
0046         ?C0019:
                                           ; SOURCE LINE # 202
0046 900000      R     MOV     DPTR,#vp
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 7B01              MOV     R3,#01H
0050 7A00        R     MOV     R2,#HIGH out_str
0052 7900        R     MOV     R1,#LOW out_str
0054 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0057 E4                CLR     A
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A 743C              MOV     A,#03CH
005C F0                MOVX    @DPTR,A
005D 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _print_utf_str (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
0000 120000      E     LCALL   INIT_CPU
                                           ; SOURCE LINE # 219
0003 120000      E     LCALL   T0_Init
                                           ; SOURCE LINE # 220
0006 D2AF              SETB    EA
                                           ; SOURCE LINE # 225
0008 120000      R     LCALL   io_init
                                           ; SOURCE LINE # 227
000B 120000      E     LCALL   ssd2828_init
                                           ; SOURCE LINE # 229
000E 900000      E     MOV     DPTR,#?_UartInit?BYTE+01H
0011 120000      E     LCALL   ?C?LSTKXDATA
0014 00                DB      00H
0015 01                DB      01H
0016 C2                DB      0C2H
0017 00                DB      00H
0018 7F03              MOV     R7,#03H
001A 120000      E     LCALL   _UartInit
                                           ; SOURCE LINE # 230
001D E4                CLR     A
001E 900000      R     MOV     DPTR,#inbufind
0021 F0                MOVX    @DPTR,A
0022 900000      R     MOV     DPTR,#state
0025 F0                MOVX    @DPTR,A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 22  

0026 900000      R     MOV     DPTR,#endfl
0029 F0                MOVX    @DPTR,A
002A 900000      R     MOV     DPTR,#begfl
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
002E 120000      E     LCALL   draw_bottom_menu
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
0031         ?C0024:
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0031 7B01              MOV     R3,#01H
0033 7A00        R     MOV     R2,#HIGH touch_data
0035 7900        R     MOV     R1,#LOW touch_data
0037 900000      E     MOV     DPTR,#?_read_dgus_vp?BYTE+05H
003A E4                CLR     A
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D 7403              MOV     A,#03H
003F F0                MOVX    @DPTR,A
0040 7F16              MOV     R7,#016H
0042 7E00              MOV     R6,#00H
0044 120000      E     LCALL   _read_dgus_vp
                                           ; SOURCE LINE # 259
0047 900000      R     MOV     DPTR,#touch_data
004A E0                MOVX    A,@DPTR
004B B45AE3            CJNE    A,#05AH,?C0024
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
004E E4                CLR     A
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0050 7B01              MOV     R3,#01H
0052 7A00        R     MOV     R2,#HIGH touch_data+02H
0054 7900        R     MOV     R1,#LOW touch_data+02H
0056 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B 04                INC     A
005C F0                MOVX    @DPTR,A
005D 7F16              MOV     R7,#016H
005F 7E00              MOV     R6,#00H
0061 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
0064 900000      R     MOV     DPTR,#touch_data+01H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 900000      R     MOV     DPTR,#action
006C E4                CLR     A
006D F0                MOVX    @DPTR,A
006E A3                INC     DPTR
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0071 7B01              MOV     R3,#01H
0073 7A00        R     MOV     R2,#HIGH action
0075 7900        R     MOV     R1,#LOW action
0077 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
007A E4                CLR     A
007B F0                MOVX    @DPTR,A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 23  

007C A3                INC     DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
007F 7F00              MOV     R7,#00H
0081 7E40              MOV     R6,#040H
0083 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 267
0086 7B01              MOV     R3,#01H
0088 7A00        R     MOV     R2,#HIGH touch_data+02H
008A 7900        R     MOV     R1,#LOW touch_data+02H
008C 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
008F E4                CLR     A
0090 F0                MOVX    @DPTR,A
0091 A3                INC     DPTR
0092 7402              MOV     A,#02H
0094 F0                MOVX    @DPTR,A
0095 7F00              MOV     R7,#00H
0097 7E52              MOV     R6,#052H
0099 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 270
009C 900000      R     MOV     DPTR,#touch_data+01H
009F E0                MOVX    A,@DPTR
00A0 14                DEC     A
00A1 708E              JNZ     ?C0024
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
00A3         ?C0028:
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 275
00A3 E4                CLR     A
00A4 900000      R     MOV     DPTR,#i
00A7 F0                MOVX    @DPTR,A
00A8         ?C0029:
00A8 900000      E     MOV     DPTR,#cur_menu
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD 900000      R     MOV     DPTR,#i
00B0 E0                MOVX    A,@DPTR
00B1 FE                MOV     R6,A
00B2 C3                CLR     C
00B3 9F                SUBB    A,R7
00B4 4003              JC      $ + 5H
00B6 020000      R     LJMP    ?C0030
                                           ; SOURCE LINE # 276
00B9 900000      E     MOV     DPTR,#cur_menu+02H
00BC E0                MOVX    A,@DPTR
00BD FB                MOV     R3,A
00BE A3                INC     DPTR
00BF E0                MOVX    A,@DPTR
00C0 FA                MOV     R2,A
00C1 A3                INC     DPTR
00C2 E0                MOVX    A,@DPTR
00C3 F9                MOV     R1,A
00C4 75F009            MOV     B,#09H
00C7 EE                MOV     A,R6
00C8 A4                MUL     AB
00C9 F582              MOV     DPL,A
00CB 85F083            MOV     DPH,B
00CE 120000      E     LCALL   ?C?ILDOPTR
00D1 FF                MOV     R7,A
00D2 C3                CLR     C
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 24  

00D3 900000      R     MOV     DPTR,#touch_data+03H
00D6 E0                MOVX    A,@DPTR
00D7 9F                SUBB    A,R7
00D8 900000      R     MOV     DPTR,#touch_data+02H
00DB E0                MOVX    A,@DPTR
00DC 95F0              SUBB    A,B
00DE 4054              JC      ?C0031
00E0 900000      R     MOV     DPTR,#i
00E3 E0                MOVX    A,@DPTR
00E4 75F009            MOV     B,#09H
00E7 A4                MUL     AB
00E8 FF                MOV     R7,A
00E9 900000      E     MOV     DPTR,#cur_menu+02H
00EC A3                INC     DPTR
00ED A3                INC     DPTR
00EE E0                MOVX    A,@DPTR
00EF 2F                ADD     A,R7
00F0 F9                MOV     R1,A
00F1 EA                MOV     A,R2
00F2 35F0              ADDC    A,B
00F4 FA                MOV     R2,A
00F5 900004            MOV     DPTR,#04H
00F8 120000      E     LCALL   ?C?ILDOPTR
00FB FF                MOV     R7,A
00FC D3                SETB    C
00FD 900000      R     MOV     DPTR,#touch_data+03H
0100 E0                MOVX    A,@DPTR
0101 9F                SUBB    A,R7
0102 900000      R     MOV     DPTR,#touch_data+02H
0105 E0                MOVX    A,@DPTR
0106 95F0              SUBB    A,B
0108 502A              JNC     ?C0031
010A 900002            MOV     DPTR,#02H
010D 120000      E     LCALL   ?C?ILDOPTR
0110 FF                MOV     R7,A
0111 C3                CLR     C
0112 900000      R     MOV     DPTR,#touch_data+05H
0115 E0                MOVX    A,@DPTR
0116 9F                SUBB    A,R7
0117 900000      R     MOV     DPTR,#touch_data+04H
011A E0                MOVX    A,@DPTR
011B 95F0              SUBB    A,B
011D 4015              JC      ?C0031
011F 900006            MOV     DPTR,#06H
0122 120000      E     LCALL   ?C?ILDOPTR
0125 FF                MOV     R7,A
0126 D3                SETB    C
0127 900000      R     MOV     DPTR,#touch_data+05H
012A E0                MOVX    A,@DPTR
012B 9F                SUBB    A,R7
012C 900000      R     MOV     DPTR,#touch_data+04H
012F E0                MOVX    A,@DPTR
0130 95F0              SUBB    A,B
0132 4009              JC      ?C0030
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0134         ?C0032:
                                           ; SOURCE LINE # 281
0134         ?C0031:
0134 900000      R     MOV     DPTR,#i
0137 E0                MOVX    A,@DPTR
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 25  

0138 04                INC     A
0139 F0                MOVX    @DPTR,A
013A 020000      R     LJMP    ?C0029
013D         ?C0030:
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
013D 900000      R     MOV     DPTR,#i
0140 E0                MOVX    A,@DPTR
0141 FF                MOV     R7,A
0142 A3                INC     DPTR
0143 E4                CLR     A
0144 F0                MOVX    @DPTR,A
0145 A3                INC     DPTR
0146 EF                MOV     A,R7
0147 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 284
0148 7B01              MOV     R3,#01H
014A 7A00        R     MOV     R2,#HIGH dummy
014C 7900        R     MOV     R1,#LOW dummy
014E 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0151 E4                CLR     A
0152 F0                MOVX    @DPTR,A
0153 A3                INC     DPTR
0154 04                INC     A
0155 F0                MOVX    @DPTR,A
0156 7F00              MOV     R7,#00H
0158 7E25              MOV     R6,#025H
015A 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
015D 900000      R     MOV     DPTR,#i
0160 E0                MOVX    A,@DPTR
0161 900000      E     MOV     DPTR,#last_selected_menu_item
0164 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0165 900000      E     MOV     DPTR,#cur_menu+05H
0168 E0                MOVX    A,@DPTR
0169 FE                MOV     R6,A
016A A3                INC     DPTR
016B E0                MOVX    A,@DPTR
016C AA06              MOV     R2,AR6
016E F9                MOV     R1,A
016F 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 289
0172 020000      R     LJMP    ?C0024
             ; FUNCTION main (END)

C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 26  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


INIT_CPU . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
QUENE. . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
EIID_AC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CANBUSUNIT . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
EIID_D_10. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
begfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0005H  1
EIID_H2O_OFF . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_D_20. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_2T. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
counter. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0006H  1
EIID_D_40. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_4T. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_PULSE_ON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
EIID_D_16. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Uart_Struct. . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
draw_vertical_menu . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
EIID_HF. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_sprintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
endfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0007H  1
menu_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  7
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  active . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  p_items. . . . . . . . . . . . . . .  MEMBER   -----  PTR      0002H  3
  func . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0005H  2
_write_dgus_vp . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
my_text. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0008H  100
last_selected_menu_item. . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CANBUS8283 . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
CANUNIT. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
bufin. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    006CH  255
_strlen. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_print_utf_str . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vp . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  out_str. . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0005H  60
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 27  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
menu_item_t. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  t_rect . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  8
  icon . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
temp_offset. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   016BH  1
state. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   016CH  1
EIID_NO_ICON . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  action . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  dummy. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  ETPS_WAIT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_RELEASE . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_FIRST_PRESS . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_LIFT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_PRESSING. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETP_STATE. . . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
  tp_state . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0003H  1
  touch_data . . . . . . . . . . . . .  AUTO     XDATA  STRUCT   0000H  6
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  crc. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  temp_buf . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0003H  60
  byte . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  buf_idx. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0004H  1
dbg_string . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    016DH  50
EIID_DC_PLUS . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_4T_PLUS . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MSPIFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_mSPIFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_draw_string . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0003H  100
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
EIID_RECT. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_LIFT. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
MNORFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 28  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
_mNORFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
text_field . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  vp . . . . . . . . . . . . . . . . .  MEMBER   -----  VOID_PTR 0000H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
_candataunitbuf. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
EIID_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PORTDRV. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
EIID_TRAP. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_UartInit. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
list_par_t . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  32
  name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  30
  val. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001EH  2
ssd2828_init . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
rect_y_pos . . . . . . . . . . . . . .  PUBLIC   XDATA  INT      019FH  2
len. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   01A1H  1
DATABUFF . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
draw_bottom_menu . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
databuff . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
EIID_H2O_ON. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_PULSE_OFF . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
idx. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   01A2H  1
key_code . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    01A3H  2
_draw_rectangle. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  y. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  draw_rect_cmd. . . . . . . . . . . .  AUTO     XDATA  ARRAY    0002H  60
MMUSIC . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 29  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
_mMUSIC. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
btn_func . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    003CH  48
inbufind . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   01A5H  1
btn_0. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
btn_1. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
btn_2. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_quene8283 . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
btn_3. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_INT    0001H  2
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0000H  50
EIID_MMA . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
s32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
btn_4. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
icon_id. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
btn_5. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
u32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
s16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
u16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
EIID_TIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cur_menu . . . . . . . . . . . . . . .  EXTERN   XDATA  STRUCT   -----  7
EIID_SIN . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
_can8283 . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
EIID_MIX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
KEY_CODE_VP. . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    01A6H  2
some_rus_string. . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0000H  54
io_init. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
EIID_DC_MINUS. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_candataunit . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
text1. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   01A8H  9
trect_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  x0 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  y0 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  x1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
string_offsets . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    006CH  16
T0_Init. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
nothing. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dummpy . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  cnt. . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 18:53:27 PAGE 30  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_read_dgus_vp. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1057    ----
   CONSTANT SIZE    =    124    ----
   XDATA SIZE       =    433     345
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
