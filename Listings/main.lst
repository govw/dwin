C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\DWIN\Keil_v5\C51\BIN\C51.EXE source\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\sour
                    -ce) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "timer.h"
   2          #include "ui.h"
   3          #include "uart.h"
   4          #include "dwin8283.h"
   5          #include "canbus.h"
   6          #include "ssd2828.h"
*** WARNING C235 IN LINE 76 OF source\ssd2828.h: parameter 1: different types
   7          #include <string.h> 
   8          #include <stdio.h>
   9          
  10          
  11          #include "temp.h"
  12          #include "encoder.h"
  13          
  14          #define UART_INIT       {state = inbufind=0;  begfl=endfl=0;} 
  15          #define UART_INIT_1 {state=1; inbufind=0; begfl=endfl=0;}
  16          
  17          u8 state, inbufind;
  18          u8 bufin[255];
  19          u8 len; 
  20          u8 begfl,endfl;
  21          
  22          
  23          
  24          
  25          
  26          //IOÔøΩÔøΩÔøΩ≈≥ÔøΩ ºÔøΩÔøΩ
  27          void io_init()
  28          {
  29   1               PORTDRV = 0x01;//ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒ™8mA
  30   1              //P1MDOUT |= 0x02;//ÔøΩÔøΩP1.1ÔøΩÔøΩÔøΩÔøΩŒ™ÔøΩÔøΩÔøΩ,ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩLED1ÔøΩÔøΩ
  31   1              //P1MDOUT &= 0xFE;//ÔøΩÔøΩP1.0ÔøΩÔøΩÔøΩÔøΩŒ™ÔøΩÔøΩÔøΩÔøΩ,ÔøΩÔøΩÔøΩ⁄∂ÔøΩ»°ÔøΩÔøΩÔøΩ≈µƒµÔøΩ∆ΩÔøΩ‰ªØ
  32   1              //sbit csx = P1^0;              //p1.0
  33   1              //sbit sdo = P1^1;              //p1.1
  34   1              //sbit sdi = P1^2;              //p1.2
  35   1              //sbit sck = P1^3;              //p1.3
  36   1              //sbit sdc = P1^4;              //p1.4
  37   1              
  38   1              P1MDOUT = 0xFD; 
  39   1              P1=0xFD;        
  40   1      }
  41          
  42           
  43          
  44          
  45          
  46          
  47          
  48          
  49          
  50          u8 val; 
  51          
  52          
  53          void ext_int0() interrupt 0
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 2   

  54          { //p3.0
  55   1          EA = 0;// –º–æ–µ–∂–µ—Ç –∏ –Ω–µ –Ω—É–∂–Ω–æ —Å–¥–µ—Å—å
  56   1          do
  57   1          {
  58   2              delay_us(800);
  59   2          }
  60   1          while((P3 & (1 << 0)) == 0);
  61   1          do
  62   1          {
  63   2              delay_us(800);
  64   2          }
  65   1          while((P3 & (1 << 0)) == 0);
  66   1          do
  67   1          {
  68   2              delay_us(300);
  69   2          }
  70   1          while((P3 & (1 << 0)) == 0);
  71   1          
  72   1         
  73   1          
  74   1          if((P3 & (1 << 1)) == 0) {
  75   2              if(encoder_ticks > 80)
  76   2                 Process_Encoder(ENC_L1);
  77   2              else
  78   2                  Process_Encoder(ENC_L0);
  79   2              encoder_ticks = 100;
  80   2          }
  81   1          delay_ms(1);
  82   1         
  83   1          
  84   1          IE0 = 0;
  85   1          IE1 = 0;
  86   1          EA = 1;
  87   1          
  88   1      }
  89          
  90          
  91          void ext_int1() interrupt 2
  92          {//p3.1
  93   1          EA = 0;
  94   1          do
  95   1          {
  96   2              delay_us(800);
  97   2          }
  98   1          while((P3 & (1 << 1)) == 0);
  99   1          do
 100   1          {
 101   2              delay_us(800);
 102   2          }
 103   1          while((P3 & (1 << 1)) == 0);
 104   1          do
 105   1          {
 106   2              delay_us(300);
 107   2          }
 108   1          while((P3 & (1 << 1)) == 0);
 109   1          
 110   1          
 111   1          
 112   1          
 113   1          if((P3 & (1 << 0)) == 0) {
 114   2              if(encoder_ticks > 80) 
 115   2                  Process_Encoder(ENC_R1);
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 3   

 116   2             else
 117   2                  Process_Encoder(ENC_R0);
 118   2              encoder_ticks = 100;
 119   2          }
 120   1          delay_ms(1);
 121   1         
 122   1          
 123   1          IE0 = 0;
 124   1          IE1 = 0;
 125   1          EA = 1;
 126   1      }
 127          
 128          
 129          
 130          void main()
 131          {
 132   1              INIT_CPU();            //CPU ÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩ◊¢ÔøΩÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–ªÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩxd
             -ataÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩ0ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩƒ±ÔøΩÔøΩÔøΩÔøΩ–≥ÔøΩ º÷µÔøΩÔøΩÔøΩÔøΩ“™ÔøΩ⁄∏√∫ÔøΩÔøΩÔøΩÔ
             -øΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ¬∏ÔøΩ÷µ
 133   1          T0_Init();                                           //ÔøΩÔøΩ ±ÔøΩÔøΩ0ÔøΩÔøΩ ºÔøΩÔøΩ
 134   1              EA = 0; //interrupt off
 135   1      
 136   1          
 137   1        
 138   1      
 139   1           //int0
 140   1          IP0 &= 0xFE;//Clear bit0
 141   1              IP1 &= 0xFE;//Clear bit0
 142   1          
 143   1              IE0 = 0;//Clear the interrupt flag bit of external interrupt 0
 144   1              
 145   1              IT0 = 1;//1 is set as falling edge trigger, 0 is set as low level trigger
 146   1              EX0 = 1;//Enable external interrupt 0, the corresponding pin is P3.0
 147   1          
 148   1         
 149   1          //int1
 150   1          IE1 = 0;
 151   1          
 152   1          IT1 = 1;
 153   1          EX1 = 1;
 154   1          EA = 1;   
 155   1          
 156   1      
 157   1          //StartTimer(0,100);
 158   1              //StartTimer(1,50);
 159   1              //-------------------
 160   1              io_init();
 161   1      //      delay_ms(20);
 162   1              ssd2828_init();
 163   1      //__________________________________________________________________________________    
 164   1              UartInit(UART5, 115200);
 165   1              UART_INIT //MARCROS
 166   1      //__________________________________________________________________________________              
 167   1          
 168   1          // draw_cyclogramm();
 169   1          
 170   1          place_numbers_on_cyclogramm();
 171   1          
 172   1          
 173   1         
 174   1         
 175   1       
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 4   

 176   1      while(1)    
 177   1      {
 178   2         
 179   2         enum ETP_STATE 
 180   2         {
 181   2             ETPS_WAIT,
 182   2             ETPS_RELEASE,
 183   2             ETPS_FIRST_PRESS,
 184   2             ETPS_LIFT,
 185   2             ETPS_PRESSING,
 186   2         };
 187   2         
 188   2         static u8 tp_state = ETPS_WAIT;
 189   2         
 190   2         struct {
 191   2             u8 status;
 192   2             u8 action_type;
 193   2             u16 x;
 194   2             u16 y;
 195   2         } touch_data;
 196   2          
 197   2      
 198   2         while(1)
 199   2         {    
 200   3              read_dgus_vp(0x16,(u8*)&touch_data, sizeof(touch_data) / 2); //info about touch status and coords
 201   3              if(touch_data.status == 0x5A) //if status byte 0x05 some action done
 202   3              {
 203   4                  touch_data.status = 0x00;
 204   4                  write_dgus_vp(0x16, (u8*) &touch_data.x, 1); //clear status byte to 00;
 205   4                  {
 206   5                          u16 action = touch_data.action_type; 
 207   5                          write_dgus_vp(0x4000, (u8*) &touch_data.x, 2); //show coords of touch point
 208   5                          write_dgus_vp(0x4002, (u8*) &action, 1); //show action type
 209   5                  }
 210   4              
 211   4                  switch(touch_data.action_type)
 212   4                  {
 213   5                      case ETPS_RELEASE:
 214   5                      {
 215   6                          u8 i;
 216   6                          for(i = 0; i < cur_menu_size; i++) { //if touch coords in recatnle area               
             -         
 217   7                                  if( touch_data.x >= cur_menu[i].r.x0 && touch_data.x <= cur_menu[i].r.x1 &&  
 218   7                                      touch_data.y >= cur_menu[i].r.y0 && touch_data.y <= cur_menu[i].r.y1 ) {
 219   8                                          cur_menu_fanc(i);
 220   8                                          break;  
 221   8                                  }
 222   7                              }
 223   6                              
 224   6                              {//–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 225   7                                  u16 dummy = i;
 226   7                                  write_dgus_vp(0x4003, (u8*) &dummy, 1); //–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–¥ –≤—ã–±—Ä
             -–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 227   7                              }
 228   6                          break;
 229   6                      }
 230   5                          
 231   5                      case ETPS_FIRST_PRESS:
 232   5                      {
 233   6                          
 234   6                              break;
 235   6                      }
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 5   

 236   5                      case ETPS_LIFT:
 237   5                          break;
 238   5      
 239   5                      case ETPS_PRESSING:
 240   5                      {
 241   6                              break;
 242   6                      }
 243   5                      default:
 244   5                          break;
 245   5                  }
 246   4              }
 247   3             
 248   3         }
 249   2      }
 250   1          
 251   1            
 252   1              
 253   1        
 254   1      
 255   1      
 256   1      
 257   1      
 258   1      
 259   1      
 260   1      
 261   1      
 262   1      
 263   1          
 264   1          // while(1)
 265   1          // {
 266   1          //     //Uatr_Send_Data(UART5, sizeof(dbg_string), dbg_string);  
 267   1          //     delay_ms(5000);
 268   1          // }
 269   1          
 270   1         
 271   1          while(1)
 272   1          {
 273   2              //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ uart
 274   2              //delay_ms(100);
 275   2              if(Uart_Struct[UART5].tx_flag == 0) //–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
 276   2                      {
 277   3                  static u8 buf_idx = 0;            
 278   3                  EA = 0;     
 279   3                  while(Uart_Struct[UART5].rx_tail != Uart_Struct[UART5].rx_head)
 280   3                              { 
 281   4                      u8 byte;
 282   4                      byte = Uart_Struct[UART5].rx_buf[Uart_Struct[UART5].rx_tail];
 283   4                                      Uart_Struct[UART5].rx_tail++;
 284   4                                      Uart_Struct[UART5].rx_tail &= SERIAL_COUNT;
 285   4                                      
 286   4                      //buf[buf_idx] = byte;
 287   4                      //buf_idx++;
 288   4                      
 289   4                      // if(Uart_Struct[UART5].rx_tail == Uart_Struct[UART5].rx_head)
 290   4                      // {
 291   4                      //     u8 i;
 292   4                      //     xdata u16 temp_buf[30];
 293   4                      //     for(i = 0; i < buf_idx; i++)
 294   4                      //     {  
 295   4                      //         sprintf((u8*) &temp_buf[i], "%02X", (u8)buf[i]);                        
 296   4                      //     } 
 297   4                      //     temp_buf[i] = 0x0000;
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 6   

 298   4                          
 299   4                          
 300   4                      //     write_dgus_vp(0x1200, (u8*) &temp_buf, (buf_idx * 2) + 2);
 301   4                      //     buf_idx = 0;
 302   4                      // }
 303   4                      
 304   4                      switch (state)
 305   4                                      {
 306   5                                      case 0:
 307   5                              if(byte == 0xA5) 
 308   5                                                      state=1;
 309   5                                              break; 
 310   5                                      
 311   5                                      case 1:
 312   5                                              if(byte == 0xA5) 
 313   5                                                      state=4;
 314   5                          else 
 315   5                                                      UART_INIT
 316   5                              break; 
 317   5                                      
 318   5                                      case 4:
 319   5                                              if(byte == 0xA5) 
 320   5                                                      begfl = 1;
 321   5                                              else if(byte == 0x5A)
 322   5                              endfl = 1;
 323   5                                              len = byte; 
 324   5                                              state = 6; 
 325   5                              break;  
 326   5      
 327   5                                      case 6:
 328   5                                              if(byte == 0xA5)
 329   5                          {
 330   6                                                      if (begfl == 1) 
 331   6                                                              state = 4;
 332   6                              else           
 333   6                                                              begfl = 1; 
 334   6                          }
 335   5                          else 
 336   5                                                      begfl=0;
 337   5      
 338   5                          if(byte == 0x5A)
 339   5                          {
 340   6                              if(endfl == 1) 
 341   6                                                      {
 342   7                                                              UART_INIT 
 343   7                                                              break;
 344   7                                                      } else
 345   6                                      endfl = 1; 
 346   6                          } else 
 347   5                                                      endfl = 0;
 348   5      
 349   5                              bufin[inbufind] = byte; 
 350   5                                              inbufind++;
 351   5      
 352   5                          if(inbufind == len + 2)
 353   5                          { 
 354   6                               state = 10;
 355   6                          } 
 356   5                                                      
 357   5                              break;
 358   5      
 359   5                                      case 10:
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 7   

 360   5                                              if(byte == 0x5A) {
 361   6                              state = 11; 
 362   6                                                      break;
 363   6                                              }    
 364   5                          if(byte == 0xA5) {  
 365   6                                                      UART_INIT_1 
 366   6                                                      break;
 367   6                                              }
 368   5                                              UART_INIT 
 369   5                                              break;
 370   5      
 371   5                                      case 11:
 372   5                                      {
 373   6                          u8 i;
 374   6                                              u8 crc = 0;
 375   6                          xdata u16 temp_buf[30];
 376   6                                              if(byte != 0x5A)
 377   6                          {
 378   7                              if(byte == 0xA5) 
 379   7                                                              UART_INIT_1 
 380   7                              else             
 381   7                                                              UART_INIT
 382   7                              break; 
 383   7                          }
 384   6                     
 385   6      
 386   6                          for(i = 1; i <= len; i++) {
 387   7                                                      crc += bufin[i];
 388   7                                              }
 389   6                          if(crc != bufin[len+1]) { 
 390   7                                                      UART_INIT
 391   7                                                      break; 
 392   7                                              }
 393   6                          //decode
 394   6                          for(i = 0; i < len; i++)
 395   6                          {  
 396   7                              sprintf((u8*) &temp_buf[i], "%02X", (u8)bufin[i + 1]);                        
 397   7                          } 
 398   6                          temp_buf[i] = 0x0000;
 399   6                          write_dgus_vp(0x1200, (u8*) &temp_buf, (len * 2) + 2);
 400   6                          
 401   6                      //     
 402   6                          //decode
 403   6                          // if(bufin[1] == 0x31) {
 404   6                          //     u8 i, j;
 405   6                          //     u8 temp_buf[30];
 406   6                          //     for(i = 2, j = 0; i < len; i++, j++) {
 407   6                          //         temp_buf[j] = bufin[i];         
 408   6                          //     }
 409   6                          //     temp_buf[j] = 0x00;
 410   6                          //     print_machine_name(temp_buf);
 411   6                          // }
 412   6                         
 413   6                                              UART_INIT
 414   6                                              break;
 415   6                                      }
 416   5                                      
 417   5                                      default: 
 418   5                                              break;
 419   5                              }
 420   4                              
 421   4                              
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 8   

 422   4                              EA = 1;                
 423   4                  }
 424   3                 
 425   3                  
 426   3              }        
 427   2      
 428   2          }
 429   1          
 430   1      
 431   1      
 432   1         
 433   1      }
*** WARNING C280 IN LINE 188 OF source\main.c: 'tp_state': unreferenced local variable
*** WARNING C280 IN LINE 277 OF source\main.c: 'buf_idx': unreferenced local variable
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION io_init (BEGIN)
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 28
                                           ; SOURCE LINE # 29
0000 75F901            MOV     PORTDRV,#01H
                                           ; SOURCE LINE # 38
0003 75BCFD            MOV     P1MDOUT,#0FDH
                                           ; SOURCE LINE # 39
0006 7590FD            MOV     P1,#0FDH
                                           ; SOURCE LINE # 40
0009 22                RET     
             ; FUNCTION io_init (END)

             ; FUNCTION ext_int0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 55
001D C2AF              CLR     EA
001F         ?C0004:
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
001F 7F20              MOV     R7,#020H
0021 7E03              MOV     R6,#03H
0023 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
0026 E5B0              MOV     A,P3
0028 30E0F4            JNB     ACC.0,?C0004
002B         ?C0007:
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
002B 7F20              MOV     R7,#020H
002D 7E03              MOV     R6,#03H
002F 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0032 E5B0              MOV     A,P3
0034 30E0F4            JNB     ACC.0,?C0007
0037         ?C0010:
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
0037 7F2C              MOV     R7,#02CH
0039 7E01              MOV     R6,#01H
003B 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 70
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 10  

003E E5B0              MOV     A,P3
0040 30E0F4            JNB     ACC.0,?C0010
                                           ; SOURCE LINE # 74
0043 E5B0              MOV     A,P3
0045 20E113            JB      ACC.1,?C0011
                                           ; SOURCE LINE # 75
0048 E500        E     MOV     A,encoder_ticks
004A D3                SETB    C
004B 9450              SUBB    A,#050H
004D 4004              JC      ?C0012
                                           ; SOURCE LINE # 76
004F 7F01              MOV     R7,#01H
0051 8002              SJMP    ?C0087
0053         ?C0012:
                                           ; SOURCE LINE # 78
0053 E4                CLR     A
0054 FF                MOV     R7,A
0055         ?C0087:
0055 120000      E     LCALL   _Process_Encoder
0058         ?C0013:
                                           ; SOURCE LINE # 79
0058 750064      E     MOV     encoder_ticks,#064H
                                           ; SOURCE LINE # 80
005B         ?C0011:
                                           ; SOURCE LINE # 81
005B 7F01              MOV     R7,#01H
005D 7E00              MOV     R6,#00H
005F 120000      E     LCALL   _delay_ms
                                           ; SOURCE LINE # 84
0062 C289              CLR     IE0
                                           ; SOURCE LINE # 85
0064 C28B              CLR     IE1
                                           ; SOURCE LINE # 86
0066 D2AF              SETB    EA
                                           ; SOURCE LINE # 88
0068 D007              POP     AR7
006A D006              POP     AR6
006C D005              POP     AR5
006E D004              POP     AR4
0070 D003              POP     AR3
0072 D002              POP     AR2
0074 D001              POP     AR1
0076 D000              POP     AR0
0078 D0D0              POP     PSW
007A D082              POP     DPL
007C D083              POP     DPH
007E D0F0              POP     B
0080 D0E0              POP     ACC
0082 32                RETI    
             ; FUNCTION ext_int0 (END)

             ; FUNCTION ext_int1 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 11  

0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 93
001D C2AF              CLR     EA
001F         ?C0017:
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
001F 7F20              MOV     R7,#020H
0021 7E03              MOV     R6,#03H
0023 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
0026 E5B0              MOV     A,P3
0028 30E1F4            JNB     ACC.1,?C0017
002B         ?C0020:
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
002B 7F20              MOV     R7,#020H
002D 7E03              MOV     R6,#03H
002F 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
0032 E5B0              MOV     A,P3
0034 30E1F4            JNB     ACC.1,?C0020
0037         ?C0023:
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0037 7F2C              MOV     R7,#02CH
0039 7E01              MOV     R6,#01H
003B 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
003E E5B0              MOV     A,P3
0040 30E1F4            JNB     ACC.1,?C0023
                                           ; SOURCE LINE # 113
0043 E5B0              MOV     A,P3
0045 20E013            JB      ACC.0,?C0024
                                           ; SOURCE LINE # 114
0048 E500        E     MOV     A,encoder_ticks
004A D3                SETB    C
004B 9450              SUBB    A,#050H
004D 4004              JC      ?C0025
                                           ; SOURCE LINE # 115
004F 7F03              MOV     R7,#03H
0051 8002              SJMP    ?C0088
0053         ?C0025:
                                           ; SOURCE LINE # 117
0053 7F02              MOV     R7,#02H
0055         ?C0088:
0055 120000      E     LCALL   _Process_Encoder
0058         ?C0026:
                                           ; SOURCE LINE # 118
0058 750064      E     MOV     encoder_ticks,#064H
                                           ; SOURCE LINE # 119
005B         ?C0024:
                                           ; SOURCE LINE # 120
005B 7F01              MOV     R7,#01H
005D 7E00              MOV     R6,#00H
005F 120000      E     LCALL   _delay_ms
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 12  

                                           ; SOURCE LINE # 123
0062 C289              CLR     IE0
                                           ; SOURCE LINE # 124
0064 C28B              CLR     IE1
                                           ; SOURCE LINE # 125
0066 D2AF              SETB    EA
                                           ; SOURCE LINE # 126
0068 D007              POP     AR7
006A D006              POP     AR6
006C D005              POP     AR5
006E D004              POP     AR4
0070 D003              POP     AR3
0072 D002              POP     AR2
0074 D001              POP     AR1
0076 D000              POP     AR0
0078 D0D0              POP     PSW
007A D082              POP     DPL
007C D083              POP     DPH
007E D0F0              POP     B
0080 D0E0              POP     ACC
0082 32                RETI    
             ; FUNCTION ext_int1 (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0000 120000      E     LCALL   INIT_CPU
                                           ; SOURCE LINE # 133
0003 120000      E     LCALL   T0_Init
                                           ; SOURCE LINE # 134
0006 C2AF              CLR     EA
                                           ; SOURCE LINE # 140
0008 53A9FE            ANL     IP0,#0FEH
                                           ; SOURCE LINE # 141
000B 53B9FE            ANL     IP1,#0FEH
                                           ; SOURCE LINE # 143
000E C289              CLR     IE0
                                           ; SOURCE LINE # 145
0010 D288              SETB    IT0
                                           ; SOURCE LINE # 146
0012 D2A8              SETB    EX0
                                           ; SOURCE LINE # 150
0014 C28B              CLR     IE1
                                           ; SOURCE LINE # 152
0016 D28A              SETB    IT1
                                           ; SOURCE LINE # 153
0018 D2AA              SETB    EX1
                                           ; SOURCE LINE # 154
001A D2AF              SETB    EA
                                           ; SOURCE LINE # 160
001C 120000      R     LCALL   io_init
                                           ; SOURCE LINE # 162
001F 120000      E     LCALL   ssd2828_init
                                           ; SOURCE LINE # 164
0022 900000      E     MOV     DPTR,#?_UartInit?BYTE+01H
0025 120000      E     LCALL   ?C?LSTKXDATA
0028 00                DB      00H
0029 01                DB      01H
002A C2                DB      0C2H
002B 00                DB      00H
002C 7F03              MOV     R7,#03H
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 13  

002E 120000      E     LCALL   _UartInit
                                           ; SOURCE LINE # 165
0031 E4                CLR     A
0032 900000      R     MOV     DPTR,#inbufind
0035 F0                MOVX    @DPTR,A
0036 900000      R     MOV     DPTR,#state
0039 F0                MOVX    @DPTR,A
003A 900000      R     MOV     DPTR,#endfl
003D F0                MOVX    @DPTR,A
003E 900000      R     MOV     DPTR,#begfl
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
0042 120000      E     LCALL   place_numbers_on_cyclogramm
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
0045         ?C0030:
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0045 7B01              MOV     R3,#01H
0047 7A00        R     MOV     R2,#HIGH touch_data
0049 7900        R     MOV     R1,#LOW touch_data
004B 900000      E     MOV     DPTR,#?_read_dgus_vp?BYTE+05H
004E E4                CLR     A
004F F0                MOVX    @DPTR,A
0050 A3                INC     DPTR
0051 7403              MOV     A,#03H
0053 F0                MOVX    @DPTR,A
0054 7F16              MOV     R7,#016H
0056 7E00              MOV     R6,#00H
0058 120000      E     LCALL   _read_dgus_vp
                                           ; SOURCE LINE # 201
005B 900000      R     MOV     DPTR,#touch_data
005E E0                MOVX    A,@DPTR
005F B45AE3            CJNE    A,#05AH,?C0030
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
0062 E4                CLR     A
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0064 7B01              MOV     R3,#01H
0066 7A00        R     MOV     R2,#HIGH touch_data+02H
0068 7900        R     MOV     R1,#LOW touch_data+02H
006A 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
006D F0                MOVX    @DPTR,A
006E A3                INC     DPTR
006F 04                INC     A
0070 F0                MOVX    @DPTR,A
0071 7F16              MOV     R7,#016H
0073 7E00              MOV     R6,#00H
0075 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
0078 900000      R     MOV     DPTR,#touch_data+01H
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D 900000      R     MOV     DPTR,#action
0080 E4                CLR     A
0081 F0                MOVX    @DPTR,A
0082 A3                INC     DPTR
0083 EF                MOV     A,R7
0084 F0                MOVX    @DPTR,A
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 14  

                                           ; SOURCE LINE # 207
0085 7B01              MOV     R3,#01H
0087 7A00        R     MOV     R2,#HIGH touch_data+02H
0089 7900        R     MOV     R1,#LOW touch_data+02H
008B 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
0090 A3                INC     DPTR
0091 7402              MOV     A,#02H
0093 F0                MOVX    @DPTR,A
0094 7F00              MOV     R7,#00H
0096 7E40              MOV     R6,#040H
0098 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 208
009B 7B01              MOV     R3,#01H
009D 7A00        R     MOV     R2,#HIGH action
009F 7900        R     MOV     R1,#LOW action
00A1 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
00A4 E4                CLR     A
00A5 F0                MOVX    @DPTR,A
00A6 A3                INC     DPTR
00A7 04                INC     A
00A8 F0                MOVX    @DPTR,A
00A9 7F02              MOV     R7,#02H
00AB 7E40              MOV     R6,#040H
00AD 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 211
00B0 900000      R     MOV     DPTR,#touch_data+01H
00B3 E0                MOVX    A,@DPTR
00B4 14                DEC     A
00B5 708E              JNZ     ?C0030
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
00B7         ?C0034:
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 216
00B7 E4                CLR     A
00B8 900000      R     MOV     DPTR,#i
00BB F0                MOVX    @DPTR,A
00BC         ?C0035:
00BC 900000      E     MOV     DPTR,#cur_menu_size
00BF E0                MOVX    A,@DPTR
00C0 FF                MOV     R7,A
00C1 900000      R     MOV     DPTR,#i
00C4 E0                MOVX    A,@DPTR
00C5 FE                MOV     R6,A
00C6 C3                CLR     C
00C7 9F                SUBB    A,R7
00C8 4003              JC      $ + 5H
00CA 020000      R     LJMP    ?C0036
                                           ; SOURCE LINE # 217
00CD 75F009            MOV     B,#09H
00D0 EE                MOV     A,R6
00D1 A4                MUL     AB
00D2 2400        E     ADD     A,#LOW cur_menu+01H
00D4 F582              MOV     DPL,A
00D6 E5F0              MOV     A,B
00D8 3400        E     ADDC    A,#HIGH cur_menu+01H
00DA F583              MOV     DPH,A
00DC E0                MOVX    A,@DPTR
00DD FE                MOV     R6,A
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 15  

00DE A3                INC     DPTR
00DF E0                MOVX    A,@DPTR
00E0 FF                MOV     R7,A
00E1 900000      R     MOV     DPTR,#touch_data+02H
00E4 E0                MOVX    A,@DPTR
00E5 FC                MOV     R4,A
00E6 A3                INC     DPTR
00E7 E0                MOVX    A,@DPTR
00E8 FD                MOV     R5,A
00E9 C3                CLR     C
00EA 9F                SUBB    A,R7
00EB EC                MOV     A,R4
00EC 9E                SUBB    A,R6
00ED 406F              JC      ?C0037
00EF 900000      R     MOV     DPTR,#i
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 75F009            MOV     B,#09H
00F7 A4                MUL     AB
00F8 2400        E     ADD     A,#LOW cur_menu+05H
00FA F582              MOV     DPL,A
00FC E5F0              MOV     A,B
00FE 3400        E     ADDC    A,#HIGH cur_menu+05H
0100 F583              MOV     DPH,A
0102 E0                MOVX    A,@DPTR
0103 FA                MOV     R2,A
0104 A3                INC     DPTR
0105 E0                MOVX    A,@DPTR
0106 FB                MOV     R3,A
0107 D3                SETB    C
0108 ED                MOV     A,R5
0109 9B                SUBB    A,R3
010A EC                MOV     A,R4
010B 9A                SUBB    A,R2
010C 5050              JNC     ?C0037
010E 75F009            MOV     B,#09H
0111 EF                MOV     A,R7
0112 A4                MUL     AB
0113 2400        E     ADD     A,#LOW cur_menu+03H
0115 F582              MOV     DPL,A
0117 E5F0              MOV     A,B
0119 3400        E     ADDC    A,#HIGH cur_menu+03H
011B F583              MOV     DPH,A
011D E0                MOVX    A,@DPTR
011E FE                MOV     R6,A
011F A3                INC     DPTR
0120 E0                MOVX    A,@DPTR
0121 FF                MOV     R7,A
0122 900000      R     MOV     DPTR,#touch_data+04H
0125 E0                MOVX    A,@DPTR
0126 FC                MOV     R4,A
0127 A3                INC     DPTR
0128 E0                MOVX    A,@DPTR
0129 FD                MOV     R5,A
012A C3                CLR     C
012B 9F                SUBB    A,R7
012C EC                MOV     A,R4
012D 9E                SUBB    A,R6
012E 402E              JC      ?C0037
0130 A3                INC     DPTR
0131 E0                MOVX    A,@DPTR
0132 FF                MOV     R7,A
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 16  

0133 75F009            MOV     B,#09H
0136 A4                MUL     AB
0137 2400        E     ADD     A,#LOW cur_menu+07H
0139 F582              MOV     DPL,A
013B E5F0              MOV     A,B
013D 3400        E     ADDC    A,#HIGH cur_menu+07H
013F F583              MOV     DPH,A
0141 E0                MOVX    A,@DPTR
0142 FA                MOV     R2,A
0143 A3                INC     DPTR
0144 E0                MOVX    A,@DPTR
0145 FB                MOV     R3,A
0146 D3                SETB    C
0147 ED                MOV     A,R5
0148 9B                SUBB    A,R3
0149 EC                MOV     A,R4
014A 9A                SUBB    A,R2
014B 5011              JNC     ?C0037
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
014D 900000      E     MOV     DPTR,#_cur_menu_fanc
0150 A3                INC     DPTR
0151 E0                MOVX    A,@DPTR
0152 FA                MOV     R2,A
0153 A3                INC     DPTR
0154 E0                MOVX    A,@DPTR
0155 F582              MOV     DPL,A
0157 8A83              MOV     DPH,R2
0159 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 220
015C 8009              SJMP    ?C0036
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
015E         ?C0037:
015E 900000      R     MOV     DPTR,#i
0161 E0                MOVX    A,@DPTR
0162 04                INC     A
0163 F0                MOVX    @DPTR,A
0164 020000      R     LJMP    ?C0035
0167         ?C0036:
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
0167 900000      R     MOV     DPTR,#i
016A E0                MOVX    A,@DPTR
016B FF                MOV     R7,A
016C A3                INC     DPTR
016D E4                CLR     A
016E F0                MOVX    @DPTR,A
016F A3                INC     DPTR
0170 EF                MOV     A,R7
0171 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
0172 7B01              MOV     R3,#01H
0174 7A00        R     MOV     R2,#HIGH dummy
0176 7900        R     MOV     R1,#LOW dummy
0178 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
017B E4                CLR     A
017C F0                MOVX    @DPTR,A
017D A3                INC     DPTR
017E 04                INC     A
017F F0                MOVX    @DPTR,A
0180 7F03              MOV     R7,#03H
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 17  

0182 7E40              MOV     R6,#040H
0184 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
0187 020000      R     LJMP    ?C0030
             ; FUNCTION main (END)

C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 18  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


INIT_CPU . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
icon_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  ico. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  r. . . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0001H  8
QUENE. . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
CANBUSUNIT . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
cur_menu_size. . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
point_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
begfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0002H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
rect_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  x0 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  y0 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  x1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
Uart_Struct. . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
_Process_Encoder . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_sprintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
endfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
_write_dgus_vp . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
dgus_data_variable_display_t . . . . .  TYPEDEF  -----  STRUCT   -----  20
  vp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  upper_left_point . . . . . . . . . .  MEMBER   -----  STRUCT   0002H  4
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  lib_id . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  font_size. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  alignment. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  integer_digits . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  decimal_places . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  variable_data_type . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  len_unit . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  string_unit. . . . . . . . . . . . .  MEMBER   -----  ARRAY    000FH  5
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CANBUS8283 . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
CANUNIT. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 19  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


bufin. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0004H  255
state. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0103H  1
SCREEN_WIDTH . . . . . . . . . . . . .  STATIC   CODE   U_INT    0005H  2
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  action . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  dummy. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  ETPS_WAIT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_RELEASE . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_FIRST_PRESS . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_LIFT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_PRESSING. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETP_STATE. . . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
  tp_state . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
  touch_data . . . . . . . . . . . . .  AUTO     XDATA  STRUCT   0000H  6
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  crc. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  temp_buf . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0003H  60
  byte . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  buf_idx. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
MSPIFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_mSPIFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
MNORFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
_mNORFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
ext_int0 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ext_int1 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ENC_L0 . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_candataunitbuf. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 20  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
ENC_L1 . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PORTDRV. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
_UartInit. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
dgus_variables_icon_t. . . . . . . . .  TYPEDEF  -----  STRUCT   -----  20
  vp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  upper_left_point . . . . . . . . . .  MEMBER   -----  STRUCT   0002H  4
  v_min. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  v_max. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  icon_min . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  icon_max . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  icon_lib . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  layer_mode . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  icon_gamma . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0011H  1
  pic_gamma. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0012H  1
  filter_set . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
ssd2828_init . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ENC_R0 . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ENC_R1 . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
place_numbers_on_cyclogramm. . . . . .  EXTERN   CODE   PROC     -----  -----
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
len. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0104H  1
DATABUFF . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
databuff . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
val. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0105H  1
IP0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
IP1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
MMUSIC . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
_mMUSIC. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
C51 COMPILER V9.53.0.0   MAIN                                                              11/23/2023 14:27:36 PAGE 21  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
_delay_ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
inbufind . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0106H  1
_quene8283 . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
s32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
u32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
s16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
_delay_us. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
u16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_cur_menu_fanc . . . . . . . . . . . .  EXTERN   XDATA  PTR      -----  3
SCREEN_HEIGHT. . . . . . . . . . . . .  STATIC   CODE   U_INT    0007H  2
cur_menu . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
encoder_ticks. . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
_can8283 . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
io_init. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_candataunit . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
T0_Init. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_read_dgus_vp. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    666    ----
   CONSTANT SIZE    =      9    ----
   XDATA SIZE       =    263      63
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
