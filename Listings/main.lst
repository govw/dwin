C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\DWIN\Keil_v5\C51\BIN\C51.EXE source\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\sour
                    -ce) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "timer.h"
   2          #include "ui.h"
   3          #include "uart.h"
   4          #include "dwin8283.h"
   5          #include "canbus.h"
   6          #include "ssd2828.h"
*** WARNING C235 IN LINE 76 OF source\ssd2828.h: parameter 1: different types
   7          #include <string.h> 
   8          #include <stdio.h>
   9          
  10          
  11          #include "temp.h"
  12          
  13          
  14          #define UART_INIT       {state = inbufind=0;  begfl=endfl=0;} 
  15          #define UART_INIT_1 {state=1; inbufind=0; begfl=endfl=0;}
  16          
  17          u8 state, inbufind;
  18          u8 bufin[255];
  19          u8 len; 
  20          u8 begfl,endfl;
  21          
  22          
  23          
  24          
  25          
  26          //IOï¿½ï¿½ï¿½Å³ï¿½Ê¼ï¿½ï¿½
  27          void io_init()
  28          {
  29   1               PORTDRV = 0x01;//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îª8mA
  30   1              //P1MDOUT |= 0x02;//ï¿½ï¿½P1.1ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½LED1ï¿½ï¿½
  31   1              //P1MDOUT &= 0xFE;//ï¿½ï¿½P1.0ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½Ú¶ï¿½È¡ï¿½ï¿½ï¿½ÅµÄµï¿½Æ½ï¿½ä»¯
  32   1              //sbit csx = P1^0;              //p1.0
  33   1              //sbit sdo = P1^1;              //p1.1
  34   1              //sbit sdi = P1^2;              //p1.2
  35   1              //sbit sck = P1^3;              //p1.3
  36   1              //sbit sdc = P1^4;              //p1.4
  37   1              
  38   1              P1MDOUT = 0xFD; 
  39   1              P1=0xFD;        
  40   1      }
  41          
  42           
  43          void dgus_draw_string(u16 vp, u8* s)
  44          {
  45   1          xdata u16 str[50];
  46   1          u8 i;
  47   1          u8 len = strlen(s) + 1;
  48   1          for(i = 0; i < len; i++)
  49   1          {
  50   2              str[i] = s[i]; 
  51   2          }
  52   1          write_dgus_vp(vp, (u8*)str, len);
  53   1      }
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 2   

  54          
  55          
  56          
  57          void dgus_print_utf_str(u16 vp, u8* str)
  58          {
  59   1          xdata u16 out_str[30];
  60   1          u8 i;
  61   1          u8 len = strlen(str) + 1;
  62   1          for(i = 0; i < len; i++) {
  63   2              out_str[i] = str[i];
  64   2          }
  65   1          write_dgus_vp(vp, (u8*)out_str, sizeof(out_str));
  66   1      }
  67          
  68          void setup_ext_int0(void)
  69          {
  70   1          //int0
  71   1          IP0 &= 0xFE;//Clear bit0
  72   1              IP1 &= 0xFE;//Clear bit0
  73   1              IE0 = 0;//Clear the interrupt flag bit of external interrupt 0
  74   1              
  75   1              IT0 = 1;//1 is set as falling edge trigger, 0 is set as low level trigger
  76   1              EX0 = 1;//Enable external interrupt 0, the corresponding pin is P3.0
  77   1          
  78   1         
  79   1          //int1
  80   1          IE1 = 0;
  81   1          
  82   1          IT1 = 1;
  83   1          EX1 = 1;
  84   1      
  85   1          
  86   1      //EA = 0;   
  87   1      //    //Interrupt Allow Register IE
  88   1      //    //EA = 1;     //Open the total interrupt
  89   1      //      EX0 = 1;     //Open the external interrupt of the 0
  90   1      //    //Control register TCON
  91   1      //      IT0 = 1;     //Set external interrupt trigger mode 
  92   1      //                   //0 - low level trigger
  93   1      //                   //1 - Negative jump trigger
  94   1      //       
  95   1      ////    P0 |= (1 << 6);
  96   1      ////    P0 |= (1 << 7);
  97   1      //    SetPinIn(0,6);    
  98   1      //    SetPinIn(0,7);
  99   1      //    EA = 1;   
 100   1      }
 101          
 102          
 103          
 104          enum {
 105              ENC_STOP,
 106              ENC_L0,
 107              ENC_L1,
 108              ENC_R0,
 109              ENC_R1,
 110          };
 111          static xdata u8 roteate_state;
 112          static xdata u16 tmp = 0;
 113          void ext_int0() interrupt 0
 114          { //p3.0
 115   1      EA = 0;
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 3   

 116   1         
 117   1         
 118   1          do
 119   1          {
 120   2              delay_us(800);
 121   2          }
 122   1          while((P3 & (1 << 0)) == 0);
 123   1          do
 124   1          {
 125   2              delay_us(800);
 126   2          }
 127   1          while((P3 & (1 << 0)) == 0);
 128   1          do
 129   1          {
 130   2              delay_us(300);
 131   2          }
 132   1          while((P3 & (1 << 0)) == 0);
 133   1          
 134   1         
 135   1          
 136   1          if((P3 & (1 << 1)) == 0) {
 137   2              if(encoder_ticks > 80) 
 138   2                  //roteate_state = ENC_L1;
 139   2              //else
 140   2                  //roteate_state = ENC_L0;
 141   2              encoder_ticks = 100;
 142   2          }
 143   1          delay_ms(1);
 144   1         
 145   1          
 146   1          IE0 = 0;
 147   1          IE1 = 0;
 148   1          EA = 1;
 149   1          
 150   1      }
 151          
 152          
 153          void ext_int1() interrupt 2
 154          {//p3.1
 155   1          EA = 0;
 156   1         
 157   1         
 158   1          do
 159   1          {
 160   2              delay_us(800);
 161   2          }
 162   1          while((P3 & (1 << 1)) == 0);
 163   1          do
 164   1          {
 165   2              delay_us(800);
 166   2          }
 167   1          while((P3 & (1 << 1)) == 0);
 168   1          do
 169   1          {
 170   2              delay_us(300);
 171   2          }
 172   1          while((P3 & (1 << 1)) == 0);
 173   1          
 174   1         
 175   1          
 176   1          if((P3 & (1 << 0)) == 0) {
 177   2              if(encoder_ticks > 80) 
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 4   

 178   2                  //roteate_state = ENC_R1;
 179   2              //else
 180   2                  //roteate_state = ENC_R0;
 181   2              encoder_ticks = 100;
 182   2          }
 183   1          delay_ms(1);
 184   1         
 185   1          
 186   1          IE0 = 0;
 187   1          IE1 = 0;
 188   1          EA = 1;
 189   1      }
 190          
 191          
 192          
 193          
 194          u8 val; 
 195          void main()
 196          {
 197   1              INIT_CPU();            //CPU ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½×¢ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½xd
             -ataï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½0ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä±ï¿½ï¿½ï¿½ï¿½Ð³ï¿½Ê¼Öµï¿½ï¿½ï¿½ï¿½Òªï¿½Ú¸Ãºï¿½ï¿½ï¿½ï
             -¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â¸ï¿½Öµ
 198   1              T0_Init();                                               //ï¿½ï¿½Ê±ï¿½ï¿½0ï¿½ï¿½Ê¼ï¿½ï¿½
 199   1          //setup_ext_int0();
 200   1              EA = 1; //interrupt on
 201   1          //StartTimer(0,100);
 202   1              //StartTimer(1,50);
 203   1              //-------------------
 204   1              io_init();
 205   1      //      delay_ms(20);
 206   1              ssd2828_init();
 207   1      //________________________________________________________________________ __________   
 208   1              UartInit(UART5, 115200);
 209   1              UART_INIT //MARCROS
 210   1                
 211   1          
 212   1          // draw_cyclogramm();
 213   1          
 214   1          place_numbers_on_cyclogramm();
 215   1          
 216   1          
 217   1          //SetPinIn(3,0);    
 218   1          //SetPinIn(3,1);
 219   1          //PinOutput(0,6,1);
 220   1          //PinOutput(3,0,1);
 221   1         
 222   1       
 223   1      while(1)    
 224   1      {
 225   2         
 226   2         enum ETP_STATE 
 227   2         {
 228   2             ETPS_WAIT,
 229   2             ETPS_RELEASE,
 230   2             ETPS_FIRST_PRESS,
 231   2             ETPS_LIFT,
 232   2             ETPS_PRESSING,
 233   2         };
 234   2         
 235   2         static u8 tp_state = ETPS_WAIT;
 236   2         
 237   2         struct {
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 5   

 238   2             u8 status;
 239   2             u8 action_type;
 240   2             u16 x;
 241   2             u16 y;
 242   2         } touch_data;
 243   2          
 244   2      
 245   2      
 246   2      
 247   2         while(1)
 248   2         {    
 249   3                  read_dgus_vp(0x16,(u8*)&touch_data, sizeof(touch_data) / 2); //info about touch status and coo
             -rds
 250   3               
 251   3                  // if(roteate_state)
 252   3                  // {
 253   3                  //     switch (roteate_state)
 254   3                  //     {
 255   3                  //         case ENC_L0:
 256   3                  //         {
 257   3                  //             tmp--;
 258   3                  //         }break;
 259   3                  //         case ENC_L1:
 260   3                  //         {
 261   3                  //             tmp-= 5;
 262   3                  //         }break;
 263   3                  //         case ENC_R0:
 264   3                  //         {
 265   3                  //             tmp++;
 266   3                  //         }break;
 267   3                  //         case ENC_R1:
 268   3                  //         {
 269   3                  //             tmp += 5;
 270   3                  //         }break;  
 271   3                  //     }
 272   3                  //     roteate_state = ENC_STOP;
 273   3                  //     //write_dgus_vp(0x5000, (u8*) &tmp, 1);
 274   3                  // }
 275   3                  
 276   3          //    {
 277   3          //         static u16 tmp;
 278   3                      
 279   3          //         tmp++;
 280   3          //         if(tmp >= 40) tmp = 0;
 281   3                  
 282   3          //         //delay_ms(100);
 283   3          //    }
 284   3              
 285   3      
 286   3      
 287   3             if(touch_data.status == 0x5A) //if status byte 0x05 some action done
 288   3             {
 289   4                 touch_data.status = 0x00;
 290   4                 write_dgus_vp(0x16, (u8*) &touch_data.x, 1); //clear status byte to 00;
 291   4                 {
 292   5                      u16 action = touch_data.action_type; 
 293   5                      write_dgus_vp(0x4000, (u8*) &touch_data.x, 2); //show coords of touch point
 294   5                      write_dgus_vp(0x4002, (u8*) &action, 1); //show action type
 295   5                 }
 296   4          
 297   4                 switch(touch_data.action_type)
 298   4                 {
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 6   

 299   5                     case ETPS_RELEASE:
 300   5                     {
 301   6                         u8 i;
 302   6                         for(i = 0; i < cur_menu_size; i++) { //if touch coords in recatnle area                
             -        
 303   7                              if( touch_data.x >= cur_menu[i].r.x0 && touch_data.x <= cur_menu[i].r.x1 &&  
 304   7                                  touch_data.y >= cur_menu[i].r.y0 && touch_data.y <= cur_menu[i].r.y1 ) {
 305   8                                      cur_menu_fanc(i);
 306   8                                      break;  
 307   8                              }
 308   7                          }
 309   6                          
 310   6                          {//Ð´Ð»Ñ Ð¾ÑÐ»Ð°Ð´ÐºÐ¸
 311   7                              u16 dummy = i;
 312   7                              write_dgus_vp(0x4003, (u8*) &dummy, 1); //Ð¾ÑÐ¾Ð±ÑÐ°Ð·Ð¸ÑÑ ÐºÐ¾Ð´ Ð²ÑÐ±ÑÐ°Ð½
             -Ð½Ð¾Ð¹ ÑÑÐ½ÐºÑÐ¸Ð¸
 313   7                          }
 314   6                         break;
 315   6                     }
 316   5                         
 317   5                     case ETPS_FIRST_PRESS:
 318   5                     {
 319   6                         
 320   6                          break;
 321   6                     }
 322   5                     case ETPS_LIFT:
 323   5                         break;
 324   5      
 325   5                     case ETPS_PRESSING:
 326   5                     {
 327   6                          break;
 328   6                     }
 329   5                     default:
 330   5                         break;
 331   5                 }
 332   4             }
 333   3             
 334   3         }
 335   2      }
 336   1          
 337   1            
 338   1              
 339   1        
 340   1          
 341   1          // while(1)
 342   1          // {
 343   1          //     //Uatr_Send_Data(UART5, sizeof(dbg_string), dbg_string);  
 344   1          //     delay_ms(5000);
 345   1          // }
 346   1          
 347   1         
 348   1          while(1)
 349   1          {//Ð¾Ð±ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº ÐºÐ½Ð¾Ð¿Ð¾Ðº
 350   2              
 351   2              //Ð¾Ð±ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº uart
 352   2              //delay_ms(100);
 353   2              if(Uart_Struct[UART5].tx_flag == 0) //ÐµÑÐ»Ð¸ Ð¿ÐµÑÐµÐ´Ð°ÑÐ° Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð°
 354   2                      {
 355   3                 
 356   3                  static u8 buf_idx = 0;            
 357   3                  EA = 0;     
 358   3                  while(Uart_Struct[UART5].rx_tail != Uart_Struct[UART5].rx_head)
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 7   

 359   3                              { 
 360   4                      u8 byte;
 361   4                      byte = Uart_Struct[UART5].rx_buf[Uart_Struct[UART5].rx_tail];
 362   4                                      Uart_Struct[UART5].rx_tail++;
 363   4                                      Uart_Struct[UART5].rx_tail &= SERIAL_COUNT;
 364   4                                      
 365   4                      //buf[buf_idx] = byte;
 366   4                      //buf_idx++;
 367   4                      
 368   4                      // if(Uart_Struct[UART5].rx_tail == Uart_Struct[UART5].rx_head)
 369   4                      // {
 370   4                      //     u8 i;
 371   4                      //     xdata u16 temp_buf[30];
 372   4                      //     for(i = 0; i < buf_idx; i++)
 373   4                      //     {  
 374   4                      //         sprintf((u8*) &temp_buf[i], "%02X", (u8)buf[i]);                        
 375   4                      //     } 
 376   4                      //     temp_buf[i] = 0x0000;
 377   4                          
 378   4                          
 379   4                      //     write_dgus_vp(0x1200, (u8*) &temp_buf, (buf_idx * 2) + 2);
 380   4                      //     buf_idx = 0;
 381   4                      // }
 382   4                      
 383   4                      switch (state)
 384   4                                      {
 385   5                                      case 0:
 386   5                              if(byte == 0xA5) 
 387   5                                                      state=1;
 388   5                                              break; 
 389   5                                      
 390   5                                      case 1:
 391   5                                              if(byte == 0xA5) 
 392   5                                                      state=4;
 393   5                          else 
 394   5                                                      UART_INIT
 395   5                              break; 
 396   5                                      
 397   5                                      case 4:
 398   5                                              if(byte == 0xA5) 
 399   5                                                      begfl = 1;
 400   5                                              else if(byte == 0x5A)
 401   5                              endfl = 1;
 402   5                                              len = byte; 
 403   5                                              state = 6; 
 404   5                              break;  
 405   5      
 406   5                                      case 6:
 407   5                                              if(byte == 0xA5)
 408   5                          {
 409   6                                                      if (begfl == 1) 
 410   6                                                              state = 4;
 411   6                              else           
 412   6                                                              begfl = 1; 
 413   6                          }
 414   5                          else 
 415   5                                                      begfl=0;
 416   5      
 417   5                          if(byte == 0x5A)
 418   5                          {
 419   6                              if(endfl == 1) 
 420   6                                                      {
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 8   

 421   7                                                              UART_INIT 
 422   7                                                              break;
 423   7                                                      } else
 424   6                                      endfl = 1; 
 425   6                          } else 
 426   5                                                      endfl = 0;
 427   5      
 428   5                              bufin[inbufind] = byte; 
 429   5                                              inbufind++;
 430   5      
 431   5                          if(inbufind == len + 2)
 432   5                          { 
 433   6                               state = 10;
 434   6                          } 
 435   5                                                      
 436   5                              break;
 437   5      
 438   5                                      case 10:
 439   5                                              if(byte == 0x5A) {
 440   6                              state = 11; 
 441   6                                                      break;
 442   6                                              }    
 443   5                          if(byte == 0xA5) {  
 444   6                                                      UART_INIT_1 
 445   6                                                      break;
 446   6                                              }
 447   5                                              UART_INIT 
 448   5                                              break;
 449   5      
 450   5                                      case 11:
 451   5                                      {
 452   6                          u8 i;
 453   6                                              u8 crc = 0;
 454   6                          xdata u16 temp_buf[30];
 455   6                                              if(byte != 0x5A)
 456   6                          {
 457   7                              if(byte == 0xA5) 
 458   7                                                              UART_INIT_1 
 459   7                              else             
 460   7                                                              UART_INIT
 461   7                              break; 
 462   7                          }
 463   6                     
 464   6      
 465   6                          for(i = 1; i <= len; i++) {
 466   7                                                      crc += bufin[i];
 467   7                                              }
 468   6                          if(crc != bufin[len+1]) { 
 469   7                                                      UART_INIT
 470   7                                                      break; 
 471   7                                              }
 472   6                          //decode
 473   6                          for(i = 0; i < len; i++)
 474   6                          {  
 475   7                              sprintf((u8*) &temp_buf[i], "%02X", (u8)bufin[i + 1]);                        
 476   7                          } 
 477   6                          temp_buf[i] = 0x0000;
 478   6                          write_dgus_vp(0x1200, (u8*) &temp_buf, (len * 2) + 2);
 479   6                          
 480   6                      //     
 481   6                          //decode
 482   6                          // if(bufin[1] == 0x31) {
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 9   

 483   6                          //     u8 i, j;
 484   6                          //     u8 temp_buf[30];
 485   6                          //     for(i = 2, j = 0; i < len; i++, j++) {
 486   6                          //         temp_buf[j] = bufin[i];         
 487   6                          //     }
 488   6                          //     temp_buf[j] = 0x00;
 489   6                          //     print_machine_name(temp_buf);
 490   6                          // }
 491   6                         
 492   6                                              UART_INIT
 493   6                                              break;
 494   6                                      }
 495   5                                      
 496   5                                      default: 
 497   5                                              break;
 498   5                              }
 499   4                              
 500   4                              
 501   4                              EA = 1;                
 502   4                  }
 503   3                 
 504   3                  
 505   3              }        
 506   2      
 507   2          }
 508   1          
 509   1      
 510   1      
 511   1         
 512   1      }
*** WARNING C280 IN LINE 235 OF source\main.c: 'tp_state': unreferenced local variable
*** WARNING C280 IN LINE 356 OF source\main.c: 'buf_idx': unreferenced local variable
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION io_init (BEGIN)
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 28
                                           ; SOURCE LINE # 29
0000 75F901            MOV     PORTDRV,#01H
                                           ; SOURCE LINE # 38
0003 75BCFD            MOV     P1MDOUT,#0FDH
                                           ; SOURCE LINE # 39
0006 7590FD            MOV     P1,#0FDH
                                           ; SOURCE LINE # 40
0009 22                RET     
             ; FUNCTION io_init (END)

             ; FUNCTION _dgus_draw_string (BEGIN)
                                           ; SOURCE LINE # 43
0000 900000      R     MOV     DPTR,#vp
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F E9                MOV     A,R1
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 47
0011 120000      E     LCALL   _strlen
0014 EF                MOV     A,R7
0015 04                INC     A
;---- Variable 'len' assigned to Register 'R5' ----
0016 FD                MOV     R5,A
                                           ; SOURCE LINE # 48
;---- Variable 'i' assigned to Register 'R7' ----
0017 E4                CLR     A
0018 FF                MOV     R7,A
0019         ?C0002:
0019 EF                MOV     A,R7
001A C3                CLR     C
001B 9D                SUBB    A,R5
001C 5028              JNC     ?C0003
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
001E 900000      R     MOV     DPTR,#s
0021 E0                MOVX    A,@DPTR
0022 FB                MOV     R3,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FA                MOV     R2,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 F9                MOV     R1,A
0029 8F82              MOV     DPL,R7
002B 758300            MOV     DPH,#00H
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 11  

002E 120000      E     LCALL   ?C?CLDOPTR
0031 FB                MOV     R3,A
0032 EF                MOV     A,R7
0033 25E0              ADD     A,ACC
0035 2400        R     ADD     A,#LOW str
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH str
003C F583              MOV     DPH,A
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 EB                MOV     A,R3
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
0043 0F                INC     R7
0044 80D3              SJMP    ?C0002
0046         ?C0003:
                                           ; SOURCE LINE # 52
0046 900000      R     MOV     DPTR,#vp
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 7B01              MOV     R3,#01H
0050 7A00        R     MOV     R2,#HIGH str
0052 7900        R     MOV     R1,#LOW str
0054 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0057 E4                CLR     A
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A ED                MOV     A,R5
005B F0                MOVX    @DPTR,A
005C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _dgus_draw_string (END)

             ; FUNCTION _dgus_print_utf_str (BEGIN)
                                           ; SOURCE LINE # 57
0000 900000      R     MOV     DPTR,#vp
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F E9                MOV     A,R1
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 61
0011 120000      E     LCALL   _strlen
0014 EF                MOV     A,R7
0015 04                INC     A
0016 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 62
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 12  

;---- Variable 'i' assigned to Register 'R6' ----
0017 E4                CLR     A
0018 FE                MOV     R6,A
0019         ?C0006:
0019 EE                MOV     A,R6
001A C3                CLR     C
001B 9F                SUBB    A,R7
001C 5028              JNC     ?C0007
                                           ; SOURCE LINE # 63
001E 900000      R     MOV     DPTR,#str
0021 E0                MOVX    A,@DPTR
0022 FB                MOV     R3,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FA                MOV     R2,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 F9                MOV     R1,A
0029 8E82              MOV     DPL,R6
002B 758300            MOV     DPH,#00H
002E 120000      E     LCALL   ?C?CLDOPTR
0031 FD                MOV     R5,A
0032 EE                MOV     A,R6
0033 25E0              ADD     A,ACC
0035 2400        R     ADD     A,#LOW out_str
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH out_str
003C F583              MOV     DPH,A
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 ED                MOV     A,R5
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 64
0043 0E                INC     R6
0044 80D3              SJMP    ?C0006
0046         ?C0007:
                                           ; SOURCE LINE # 65
0046 900000      R     MOV     DPTR,#vp
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 7B01              MOV     R3,#01H
0050 7A00        R     MOV     R2,#HIGH out_str
0052 7900        R     MOV     R1,#LOW out_str
0054 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0057 E4                CLR     A
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A 743C              MOV     A,#03CH
005C F0                MOVX    @DPTR,A
005D 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _dgus_print_utf_str (END)

             ; FUNCTION setup_ext_int0 (BEGIN)
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 71
0000 53A9FE            ANL     IP0,#0FEH
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 13  

                                           ; SOURCE LINE # 72
0003 53B9FE            ANL     IP1,#0FEH
                                           ; SOURCE LINE # 73
0006 C289              CLR     IE0
                                           ; SOURCE LINE # 75
0008 D288              SETB    IT0
                                           ; SOURCE LINE # 76
000A D2A8              SETB    EX0
                                           ; SOURCE LINE # 80
000C C28B              CLR     IE1
                                           ; SOURCE LINE # 82
000E D28A              SETB    IT1
                                           ; SOURCE LINE # 83
0010 D2AA              SETB    EX1
                                           ; SOURCE LINE # 100
0012 22                RET     
             ; FUNCTION setup_ext_int0 (END)

             ; FUNCTION ext_int0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 115
001D C2AF              CLR     EA
001F         ?C0013:
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
001F 7F20              MOV     R7,#020H
0021 7E03              MOV     R6,#03H
0023 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
0026 E5B0              MOV     A,P3
0028 30E0F4            JNB     ACC.0,?C0013
002B         ?C0016:
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
002B 7F20              MOV     R7,#020H
002D 7E03              MOV     R6,#03H
002F 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
0032 E5B0              MOV     A,P3
0034 30E0F4            JNB     ACC.0,?C0016
0037         ?C0019:
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
0037 7F2C              MOV     R7,#02CH
0039 7E01              MOV     R6,#01H
003B 120000      E     LCALL   _delay_us
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 14  

                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
003E E5B0              MOV     A,P3
0040 30E0F4            JNB     ACC.0,?C0019
                                           ; SOURCE LINE # 136
0043 E5B0              MOV     A,P3
0045 20E10A            JB      ACC.1,?C0020
                                           ; SOURCE LINE # 137
0048 E500        E     MOV     A,encoder_ticks
004A D3                SETB    C
004B 9450              SUBB    A,#050H
004D 4003              JC      ?C0020
                                           ; SOURCE LINE # 141
004F 750064      E     MOV     encoder_ticks,#064H
                                           ; SOURCE LINE # 142
0052         ?C0020:
                                           ; SOURCE LINE # 143
0052 7F01              MOV     R7,#01H
0054 7E00              MOV     R6,#00H
0056 120000      E     LCALL   _delay_ms
                                           ; SOURCE LINE # 146
0059 C289              CLR     IE0
                                           ; SOURCE LINE # 147
005B C28B              CLR     IE1
                                           ; SOURCE LINE # 148
005D D2AF              SETB    EA
                                           ; SOURCE LINE # 150
005F D007              POP     AR7
0061 D006              POP     AR6
0063 D005              POP     AR5
0065 D004              POP     AR4
0067 D003              POP     AR3
0069 D002              POP     AR2
006B D001              POP     AR1
006D D000              POP     AR0
006F D0D0              POP     PSW
0071 D082              POP     DPL
0073 D083              POP     DPH
0075 D0F0              POP     B
0077 D0E0              POP     ACC
0079 32                RETI    
             ; FUNCTION ext_int0 (END)

             ; FUNCTION ext_int1 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 155
001D C2AF              CLR     EA
001F         ?C0025:
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 15  

                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
001F 7F20              MOV     R7,#020H
0021 7E03              MOV     R6,#03H
0023 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
0026 E5B0              MOV     A,P3
0028 30E1F4            JNB     ACC.1,?C0025
002B         ?C0028:
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
002B 7F20              MOV     R7,#020H
002D 7E03              MOV     R6,#03H
002F 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
0032 E5B0              MOV     A,P3
0034 30E1F4            JNB     ACC.1,?C0028
0037         ?C0031:
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
0037 7F2C              MOV     R7,#02CH
0039 7E01              MOV     R6,#01H
003B 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
003E E5B0              MOV     A,P3
0040 30E1F4            JNB     ACC.1,?C0031
                                           ; SOURCE LINE # 176
0043 E5B0              MOV     A,P3
0045 20E00A            JB      ACC.0,?C0032
                                           ; SOURCE LINE # 177
0048 E500        E     MOV     A,encoder_ticks
004A D3                SETB    C
004B 9450              SUBB    A,#050H
004D 4003              JC      ?C0032
                                           ; SOURCE LINE # 181
004F 750064      E     MOV     encoder_ticks,#064H
                                           ; SOURCE LINE # 182
0052         ?C0032:
                                           ; SOURCE LINE # 183
0052 7F01              MOV     R7,#01H
0054 7E00              MOV     R6,#00H
0056 120000      E     LCALL   _delay_ms
                                           ; SOURCE LINE # 186
0059 C289              CLR     IE0
                                           ; SOURCE LINE # 187
005B C28B              CLR     IE1
                                           ; SOURCE LINE # 188
005D D2AF              SETB    EA
                                           ; SOURCE LINE # 189
005F D007              POP     AR7
0061 D006              POP     AR6
0063 D005              POP     AR5
0065 D004              POP     AR4
0067 D003              POP     AR3
0069 D002              POP     AR2
006B D001              POP     AR1
006D D000              POP     AR0
006F D0D0              POP     PSW
0071 D082              POP     DPL
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 16  

0073 D083              POP     DPH
0075 D0F0              POP     B
0077 D0E0              POP     ACC
0079 32                RETI    
             ; FUNCTION ext_int1 (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
0000 120000      E     LCALL   INIT_CPU
                                           ; SOURCE LINE # 198
0003 120000      E     LCALL   T0_Init
                                           ; SOURCE LINE # 200
0006 D2AF              SETB    EA
                                           ; SOURCE LINE # 204
0008 120000      R     LCALL   io_init
                                           ; SOURCE LINE # 206
000B 120000      E     LCALL   ssd2828_init
                                           ; SOURCE LINE # 208
000E 900000      E     MOV     DPTR,#?_UartInit?BYTE+01H
0011 120000      E     LCALL   ?C?LSTKXDATA
0014 00                DB      00H
0015 01                DB      01H
0016 C2                DB      0C2H
0017 00                DB      00H
0018 7F03              MOV     R7,#03H
001A 120000      E     LCALL   _UartInit
                                           ; SOURCE LINE # 209
001D E4                CLR     A
001E 900000      R     MOV     DPTR,#inbufind
0021 F0                MOVX    @DPTR,A
0022 900000      R     MOV     DPTR,#state
0025 F0                MOVX    @DPTR,A
0026 900000      R     MOV     DPTR,#endfl
0029 F0                MOVX    @DPTR,A
002A 900000      R     MOV     DPTR,#begfl
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
002E 120000      E     LCALL   place_numbers_on_cyclogramm
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0031         ?C0037:
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
0031 7B01              MOV     R3,#01H
0033 7A00        R     MOV     R2,#HIGH touch_data
0035 7900        R     MOV     R1,#LOW touch_data
0037 900000      E     MOV     DPTR,#?_read_dgus_vp?BYTE+05H
003A E4                CLR     A
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D 7403              MOV     A,#03H
003F F0                MOVX    @DPTR,A
0040 7F16              MOV     R7,#016H
0042 7E00              MOV     R6,#00H
0044 120000      E     LCALL   _read_dgus_vp
                                           ; SOURCE LINE # 287
0047 900000      R     MOV     DPTR,#touch_data
004A E0                MOVX    A,@DPTR
004B B45AE3            CJNE    A,#05AH,?C0037
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 17  

                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
004E E4                CLR     A
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
0050 7B01              MOV     R3,#01H
0052 7A00        R     MOV     R2,#HIGH touch_data+02H
0054 7900        R     MOV     R1,#LOW touch_data+02H
0056 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B 04                INC     A
005C F0                MOVX    @DPTR,A
005D 7F16              MOV     R7,#016H
005F 7E00              MOV     R6,#00H
0061 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
0064 900000      R     MOV     DPTR,#touch_data+01H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 900000      R     MOV     DPTR,#action
006C E4                CLR     A
006D F0                MOVX    @DPTR,A
006E A3                INC     DPTR
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
0071 7B01              MOV     R3,#01H
0073 7A00        R     MOV     R2,#HIGH touch_data+02H
0075 7900        R     MOV     R1,#LOW touch_data+02H
0077 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
007A E4                CLR     A
007B F0                MOVX    @DPTR,A
007C A3                INC     DPTR
007D 7402              MOV     A,#02H
007F F0                MOVX    @DPTR,A
0080 7F00              MOV     R7,#00H
0082 7E40              MOV     R6,#040H
0084 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 294
0087 7B01              MOV     R3,#01H
0089 7A00        R     MOV     R2,#HIGH action
008B 7900        R     MOV     R1,#LOW action
008D 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0090 E4                CLR     A
0091 F0                MOVX    @DPTR,A
0092 A3                INC     DPTR
0093 04                INC     A
0094 F0                MOVX    @DPTR,A
0095 7F02              MOV     R7,#02H
0097 7E40              MOV     R6,#040H
0099 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 297
009C 900000      R     MOV     DPTR,#touch_data+01H
009F E0                MOVX    A,@DPTR
00A0 14                DEC     A
00A1 708E              JNZ     ?C0037
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
00A3         ?C0041:
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 18  

                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 302
00A3 E4                CLR     A
00A4 900000      R     MOV     DPTR,#i
00A7 F0                MOVX    @DPTR,A
00A8         ?C0042:
00A8 900000      E     MOV     DPTR,#cur_menu_size
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD 900000      R     MOV     DPTR,#i
00B0 E0                MOVX    A,@DPTR
00B1 FE                MOV     R6,A
00B2 C3                CLR     C
00B3 9F                SUBB    A,R7
00B4 4003              JC      $ + 5H
00B6 020000      R     LJMP    ?C0043
                                           ; SOURCE LINE # 303
00B9 75F009            MOV     B,#09H
00BC EE                MOV     A,R6
00BD A4                MUL     AB
00BE 2400        E     ADD     A,#LOW cur_menu+01H
00C0 F582              MOV     DPL,A
00C2 E5F0              MOV     A,B
00C4 3400        E     ADDC    A,#HIGH cur_menu+01H
00C6 F583              MOV     DPH,A
00C8 E0                MOVX    A,@DPTR
00C9 FE                MOV     R6,A
00CA A3                INC     DPTR
00CB E0                MOVX    A,@DPTR
00CC FF                MOV     R7,A
00CD 900000      R     MOV     DPTR,#touch_data+02H
00D0 E0                MOVX    A,@DPTR
00D1 FC                MOV     R4,A
00D2 A3                INC     DPTR
00D3 E0                MOVX    A,@DPTR
00D4 FD                MOV     R5,A
00D5 C3                CLR     C
00D6 9F                SUBB    A,R7
00D7 EC                MOV     A,R4
00D8 9E                SUBB    A,R6
00D9 406F              JC      ?C0044
00DB 900000      R     MOV     DPTR,#i
00DE E0                MOVX    A,@DPTR
00DF FF                MOV     R7,A
00E0 75F009            MOV     B,#09H
00E3 A4                MUL     AB
00E4 2400        E     ADD     A,#LOW cur_menu+05H
00E6 F582              MOV     DPL,A
00E8 E5F0              MOV     A,B
00EA 3400        E     ADDC    A,#HIGH cur_menu+05H
00EC F583              MOV     DPH,A
00EE E0                MOVX    A,@DPTR
00EF FA                MOV     R2,A
00F0 A3                INC     DPTR
00F1 E0                MOVX    A,@DPTR
00F2 FB                MOV     R3,A
00F3 D3                SETB    C
00F4 ED                MOV     A,R5
00F5 9B                SUBB    A,R3
00F6 EC                MOV     A,R4
00F7 9A                SUBB    A,R2
00F8 5050              JNC     ?C0044
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 19  

00FA 75F009            MOV     B,#09H
00FD EF                MOV     A,R7
00FE A4                MUL     AB
00FF 2400        E     ADD     A,#LOW cur_menu+03H
0101 F582              MOV     DPL,A
0103 E5F0              MOV     A,B
0105 3400        E     ADDC    A,#HIGH cur_menu+03H
0107 F583              MOV     DPH,A
0109 E0                MOVX    A,@DPTR
010A FE                MOV     R6,A
010B A3                INC     DPTR
010C E0                MOVX    A,@DPTR
010D FF                MOV     R7,A
010E 900000      R     MOV     DPTR,#touch_data+04H
0111 E0                MOVX    A,@DPTR
0112 FC                MOV     R4,A
0113 A3                INC     DPTR
0114 E0                MOVX    A,@DPTR
0115 FD                MOV     R5,A
0116 C3                CLR     C
0117 9F                SUBB    A,R7
0118 EC                MOV     A,R4
0119 9E                SUBB    A,R6
011A 402E              JC      ?C0044
011C A3                INC     DPTR
011D E0                MOVX    A,@DPTR
011E FF                MOV     R7,A
011F 75F009            MOV     B,#09H
0122 A4                MUL     AB
0123 2400        E     ADD     A,#LOW cur_menu+07H
0125 F582              MOV     DPL,A
0127 E5F0              MOV     A,B
0129 3400        E     ADDC    A,#HIGH cur_menu+07H
012B F583              MOV     DPH,A
012D E0                MOVX    A,@DPTR
012E FA                MOV     R2,A
012F A3                INC     DPTR
0130 E0                MOVX    A,@DPTR
0131 FB                MOV     R3,A
0132 D3                SETB    C
0133 ED                MOV     A,R5
0134 9B                SUBB    A,R3
0135 EC                MOV     A,R4
0136 9A                SUBB    A,R2
0137 5011              JNC     ?C0044
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0139 900000      E     MOV     DPTR,#_cur_menu_fanc
013C A3                INC     DPTR
013D E0                MOVX    A,@DPTR
013E FA                MOV     R2,A
013F A3                INC     DPTR
0140 E0                MOVX    A,@DPTR
0141 F582              MOV     DPL,A
0143 8A83              MOV     DPH,R2
0145 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 306
0148 8009              SJMP    ?C0043
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
014A         ?C0044:
014A 900000      R     MOV     DPTR,#i
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 20  

014D E0                MOVX    A,@DPTR
014E 04                INC     A
014F F0                MOVX    @DPTR,A
0150 020000      R     LJMP    ?C0042
0153         ?C0043:
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
0153 900000      R     MOV     DPTR,#i
0156 E0                MOVX    A,@DPTR
0157 FF                MOV     R7,A
0158 A3                INC     DPTR
0159 E4                CLR     A
015A F0                MOVX    @DPTR,A
015B A3                INC     DPTR
015C EF                MOV     A,R7
015D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
015E 7B01              MOV     R3,#01H
0160 7A00        R     MOV     R2,#HIGH dummy
0162 7900        R     MOV     R1,#LOW dummy
0164 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0167 E4                CLR     A
0168 F0                MOVX    @DPTR,A
0169 A3                INC     DPTR
016A 04                INC     A
016B F0                MOVX    @DPTR,A
016C 7F03              MOV     R7,#03H
016E 7E40              MOV     R6,#040H
0170 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
0173 020000      R     LJMP    ?C0037
             ; FUNCTION main (END)

C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 21  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ENC_STOP . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
INIT_CPU . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
icon_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  ico. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  r. . . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0001H  8
QUENE. . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
CANBUSUNIT . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
cur_menu_size. . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
point_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
begfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0002H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
rect_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  x0 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  y0 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  x1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
Uart_Struct. . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
_sprintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
endfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
_write_dgus_vp . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
dgus_data_variable_display_t . . . . .  TYPEDEF  -----  STRUCT   -----  26
  vp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  upper_left_point . . . . . . . . . .  MEMBER   -----  STRUCT   0002H  4
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  lib_id . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  font_size. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  alignment. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  integer_digits . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  decimal_places . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  variable_data_type . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  len_unit . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  string_unit. . . . . . . . . . . . .  MEMBER   -----  ARRAY    000FH  11
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CANBUS8283 . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
CANUNIT. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 22  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


bufin. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0004H  255
_strlen. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
state. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0103H  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  action . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  dummy. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  ETPS_WAIT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_RELEASE . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_FIRST_PRESS . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_LIFT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_PRESSING. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETP_STATE. . . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
  tp_state . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
  touch_data . . . . . . . . . . . . .  AUTO     XDATA  STRUCT   0000H  6
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  crc. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  temp_buf . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0003H  60
  byte . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  buf_idx. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
MSPIFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_mSPIFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
MNORFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
_mNORFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
ext_int0 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ext_int1 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ENC_L0 . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_dgus_print_utf_str. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vp . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  out_str. . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0005H  60
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 23  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_candataunitbuf. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
ENC_L1 . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PORTDRV. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
_UartInit. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
dgus_variables_icon_t. . . . . . . . .  TYPEDEF  -----  STRUCT   -----  20
  vp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  upper_left_point . . . . . . . . . .  MEMBER   -----  STRUCT   0002H  4
  v_min. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  v_max. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0008H  2
  icon_min . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  icon_max . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  icon_lib . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000FH  1
  layer_mode . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0010H  1
  icon_gamma . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0011H  1
  pic_gamma. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0012H  1
  filter_set . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0013H  1
ssd2828_init . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ENC_R0 . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ENC_R1 . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
place_numbers_on_cyclogramm. . . . . .  EXTERN   CODE   PROC     -----  -----
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
len. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0104H  1
DATABUFF . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
_dgus_draw_string. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vp . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  s. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0005H  100
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
databuff . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
val. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0105H  1
setup_ext_int0 . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C51 COMPILER V9.53.0.0   MAIN                                                              11/17/2023 15:18:31 PAGE 24  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


IP0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
IP1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
MMUSIC . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
_mMUSIC. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
tmp. . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_INT    0106H  2
_delay_ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
inbufind . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0108H  1
_quene8283 . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
s32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
u32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
s16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
_delay_us. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
u16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_cur_menu_fanc . . . . . . . . . . . .  EXTERN   XDATA  PTR      -----  3
cur_menu . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
encoder_ticks. . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
_can8283 . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
io_init. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_candataunit . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
T0_Init. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_read_dgus_vp. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
roteate_state. . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0109H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    838    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =    266     233
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
