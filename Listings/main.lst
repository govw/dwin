C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\DWIN\Keil_v5\C51\BIN\C51.EXE source\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\sour
                    -ce) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "timer.h"
   2          #include "ui.h"
   3          #include "uart.h"
   4          #include "dwin8283.h"
   5          #include "canbus.h"
   6          #include "ssd2828.h"
*** WARNING C235 IN LINE 76 OF source\ssd2828.h: parameter 1: different types
   7          #include <string.h> 
   8          #include <stdio.h>
   9          
  10          
  11          #include "temp.h"
  12          
  13          
  14          #define UART_INIT       {state = inbufind=0;  begfl=endfl=0;} 
  15          #define UART_INIT_1 {state=1; inbufind=0; begfl=endfl=0;}
  16          
  17          u8 state, inbufind;
  18          u8 bufin[255];
  19          u8 len; 
  20          u8 begfl,endfl;
  21          
  22          
  23          
  24          
  25          
  26          //IOï¿½ï¿½ï¿½Å³ï¿½Ê¼ï¿½ï¿½
  27          void io_init()
  28          {
  29   1               PORTDRV = 0x01;//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îª8mA
  30   1              //P1MDOUT |= 0x02;//ï¿½ï¿½P1.1ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½LED1ï¿½ï¿½
  31   1              //P1MDOUT &= 0xFE;//ï¿½ï¿½P1.0ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½ï¿½ï¿½,ï¿½ï¿½ï¿½Ú¶ï¿½È¡ï¿½ï¿½ï¿½ÅµÄµï¿½Æ½ï¿½ä»¯
  32   1              //sbit csx = P1^0;              //p1.0
  33   1              //sbit sdo = P1^1;              //p1.1
  34   1              //sbit sdi = P1^2;              //p1.2
  35   1              //sbit sck = P1^3;              //p1.3
  36   1              //sbit sdc = P1^4;              //p1.4
  37   1              
  38   1              P1MDOUT = 0xFD; 
  39   1              P1=0xFD;        
  40   1      }
  41          
  42           
  43          void dgus_draw_string(u16 vp, u8* s)
  44          {
  45   1          xdata u16 str[50];
  46   1          u8 i;
  47   1          u8 len = strlen(s) + 1;
  48   1          for(i = 0; i < len; i++)
  49   1          {
  50   2              str[i] = s[i]; 
  51   2          }
  52   1          write_dgus_vp(vp, (u8*)str, len);
  53   1      }
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 2   

  54          
  55          
  56          
  57          void dgus_print_utf_str(u16 vp, u8* str)
  58          {
  59   1          xdata u16 out_str[30];
  60   1          u8 i;
  61   1          u8 len = strlen(str) + 1;
  62   1          for(i = 0; i < len; i++) {
  63   2              out_str[i] = str[i];
  64   2          }
  65   1          write_dgus_vp(vp, (u8*)out_str, sizeof(out_str));
  66   1      }
  67          
  68          void setup_ext_int0(void)
  69          {
  70   1          //int0
  71   1          IP0 &= 0xFE;//Clear bit0
  72   1              IP1 &= 0xFE;//Clear bit0
  73   1              IE0 = 0;//Clear the interrupt flag bit of external interrupt 0
  74   1              
  75   1              IT0 = 1;//1 is set as falling edge trigger, 0 is set as low level trigger
  76   1              EX0 = 1;//Enable external interrupt 0, the corresponding pin is P3.0
  77   1          
  78   1         
  79   1          //int1
  80   1          IE1 = 0;
  81   1          
  82   1          IT1 = 1;
  83   1          EX1 = 1;
  84   1      
  85   1          
  86   1      //EA = 0;   
  87   1      //    //Interrupt Allow Register IE
  88   1      //    //EA = 1;     //Open the total interrupt
  89   1      //      EX0 = 1;     //Open the external interrupt of the 0
  90   1      //    //Control register TCON
  91   1      //      IT0 = 1;     //Set external interrupt trigger mode 
  92   1      //                   //0 - low level trigger
  93   1      //                   //1 - Negative jump trigger
  94   1      //       
  95   1      ////    P0 |= (1 << 6);
  96   1      ////    P0 |= (1 << 7);
  97   1      //    SetPinIn(0,6);    
  98   1      //    SetPinIn(0,7);
  99   1      //    EA = 1;   
 100   1      }
 101          
 102          
 103          static u16 tmp = 0;
 104          
 105          void ext_int0() interrupt 0
 106          { //p3.0
 107   1      EA = 0;
 108   1         
 109   1         
 110   1          do
 111   1          {
 112   2              delay_us(800);
 113   2          }
 114   1          while((P3 & (1 << 0)) == 0);
 115   1          do
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 3   

 116   1          {
 117   2              delay_us(800);
 118   2          }
 119   1          while((P3 & (1 << 0)) == 0);
 120   1          do
 121   1          {
 122   2              delay_us(300);
 123   2          }
 124   1          while((P3 & (1 << 0)) == 0);
 125   1          
 126   1         
 127   1          
 128   1          if((P3 & (1 << 1)) == 0) {
 129   2              if(encoder_ticks > 80) 
 130   2                  tmp-=5;
 131   2              else
 132   2                  tmp--;
 133   2              encoder_ticks = 100;
 134   2          }
 135   1          delay_ms(1);
 136   1         
 137   1          
 138   1          IE0 = 0;
 139   1          IE1 = 0;
 140   1          EA = 1;
 141   1          
 142   1      }
 143          
 144          void ext_int1() interrupt 2
 145          {//p3.1
 146   1          EA = 0;
 147   1         
 148   1         
 149   1          do
 150   1          {
 151   2              delay_us(800);
 152   2          }
 153   1          while((P3 & (1 << 1)) == 0);
 154   1          do
 155   1          {
 156   2              delay_us(800);
 157   2          }
 158   1          while((P3 & (1 << 1)) == 0);
 159   1          do
 160   1          {
 161   2              delay_us(300);
 162   2          }
 163   1          while((P3 & (1 << 1)) == 0);
 164   1          
 165   1         
 166   1          
 167   1          if((P3 & (1 << 0)) == 0) {
 168   2              if(encoder_ticks > 80) 
 169   2                  tmp+=5;
 170   2              else
 171   2                  tmp++;
 172   2              encoder_ticks = 100;
 173   2          }
 174   1          delay_ms(1);
 175   1         
 176   1          
 177   1          IE0 = 0;
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 4   

 178   1          IE1 = 0;
 179   1          EA = 1;
 180   1          
 181   1      
 182   1      }
 183          
 184          u8 read_gray_code_from_encoder(void ) 
 185          { 
 186   1       u8 val=0; 
 187   1      
 188   1          
 189   1        if((P3 & (1 << 0)) == 0) 
 190   1              val |= (1<<1); 
 191   1      
 192   1        if((P3 & (1 << 6)) == 0)  
 193   1              val |= (1<<0); 
 194   1      
 195   1        return val; 
 196   1      }
 197          
 198          
 199          u8 val; 
 200          void main()
 201          {
 202   1              INIT_CPU();            //CPU ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½×¢ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½xd
             -ataï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½0ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä±ï¿½ï¿½ï¿½ï¿½Ð³ï¿½Ê¼Öµï¿½ï¿½ï¿½ï¿½Òªï¿½Ú¸Ãºï¿½ï¿½ï¿½ï
             -¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â¸ï¿½Öµ
 203   1              T0_Init();                                               //ï¿½ï¿½Ê±ï¿½ï¿½0ï¿½ï¿½Ê¼ï¿½ï¿½
 204   1          setup_ext_int0();
 205   1              EA = 1; //interrupt on
 206   1          //StartTimer(0,100);
 207   1              //StartTimer(1,50);
 208   1              //-------------------
 209   1              io_init();
 210   1      //      delay_ms(20);
 211   1              ssd2828_init();
 212   1      //________________________________________________________________________ __________   
 213   1              UartInit(UART5, 115200);
 214   1              UART_INIT //MARCROS
 215   1              
 216   1          
 217   1          draw_bottom_menu();
 218   1          draw_cyclogramm();
 219   1          place_numbers_on_cyclogramm();
 220   1      
 221   1          
 222   1          //SetPinIn(3,0);    
 223   1          //SetPinIn(3,1);
 224   1          //PinOutput(0,6,1);
 225   1          //PinOutput(3,0,1);
 226   1         
 227   1       
 228   1      while(1)    
 229   1      {
 230   2         
 231   2         enum ETP_STATE 
 232   2         {
 233   2             ETPS_WAIT,
 234   2             ETPS_RELEASE,
 235   2             ETPS_FIRST_PRESS,
 236   2             ETPS_LIFT,
 237   2             ETPS_PRESSING,
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 5   

 238   2         };
 239   2         
 240   2         static u8 tp_state = ETPS_WAIT;
 241   2         
 242   2         struct {
 243   2             u8 status;
 244   2             u8 action_type;
 245   2             u16 x;
 246   2             u16 y;
 247   2         } touch_data;
 248   2          
 249   2         while(1)
 250   2         {
 251   3             EA = 0;
 252   3             write_dgus_vp(0x3000, (u8*) &tmp, 1);
 253   3             EA = 1;
 254   3             
 255   3             read_dgus_vp(0x16,(u8*)&touch_data, sizeof(touch_data) / 2); //info about touch status and coords
 256   3             
 257   3             if(touch_data.status == 0x5A) //if status byte 0x05 some action done
 258   3             {
 259   4                 touch_data.status = 0x00;
 260   4                 write_dgus_vp(0x16, (u8*) &touch_data.x, 1); //clear status byte to 00;
 261   4                 {
 262   5                     u16 action = touch_data.action_type; 
 263   5                     write_dgus_vp(0x4000, (u8*) &action, 1); //show action type
 264   5                     write_dgus_vp(0x5200, (u8*) &touch_data.x, 2); //show coords of touch point
 265   5                 }
 266   4          
 267   4                 switch(touch_data.action_type)
 268   4                 {
 269   5                     case ETPS_RELEASE:
 270   5                     {
 271   6                         u8 i;
 272   6                         for(i = 0; i < cur_menu_size; i++) { //if touch coords in recatnle area                
             -        
 273   7                              if( touch_data.x >= cur_menu[i].r.x0 && touch_data.x <= cur_menu[i].r.x1 &&  
 274   7                                  touch_data.y >= cur_menu[i].r.y0 && touch_data.y <= cur_menu[i].r.y1 ) {
 275   8                                      cur_menu_fanc(i);
 276   8                                      break;  
 277   8                              }
 278   7                          }
 279   6                          
 280   6                          {//Ð´Ð»Ñ Ð¾ÑÐ»Ð°Ð´ÐºÐ¸
 281   7                              u16 dummy = i;
 282   7                              write_dgus_vp(0x2500, (u8*) &dummy, 1); //Ð¾ÑÐ¾Ð±ÑÐ°Ð·Ð¸ÑÑ ÐºÐ¾Ð´ Ð²ÑÐ±ÑÐ°Ð½
             -Ð½Ð¾Ð¹ ÑÑÐ½ÐºÑÐ¸Ð¸
 283   7                          }
 284   6                         break;
 285   6                     }
 286   5                         
 287   5                     case ETPS_FIRST_PRESS:
 288   5                     {
 289   6                         
 290   6                          break;
 291   6                     }
 292   5                     case ETPS_LIFT:
 293   5                         break;
 294   5      
 295   5                     case ETPS_PRESSING:
 296   5                     {
 297   6                          break;
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 6   

 298   6                     }
 299   5                     default:
 300   5                         break;
 301   5                 }
 302   4             }
 303   3             
 304   3         }
 305   2      }
 306   1          
 307   1            
 308   1              
 309   1        
 310   1          
 311   1          // while(1)
 312   1          // {
 313   1          //     //Uatr_Send_Data(UART5, sizeof(dbg_string), dbg_string);  
 314   1          //     delay_ms(5000);
 315   1          // }
 316   1          
 317   1         
 318   1          while(1)
 319   1          {//Ð¾Ð±ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº ÐºÐ½Ð¾Ð¿Ð¾Ðº
 320   2              
 321   2              //Ð¾Ð±ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº uart
 322   2              //delay_ms(100);
 323   2              if(Uart_Struct[UART5].tx_flag == 0) //ÐµÑÐ»Ð¸ Ð¿ÐµÑÐµÐ´Ð°ÑÐ° Ð·Ð°Ð²ÐµÑÑÐµÐ½Ð°
 324   2                      {
 325   3                 
 326   3                  static u8 buf_idx = 0;            
 327   3                  EA = 0;     
 328   3                  while(Uart_Struct[UART5].rx_tail != Uart_Struct[UART5].rx_head)
 329   3                              { 
 330   4                      u8 byte;
 331   4                      byte = Uart_Struct[UART5].rx_buf[Uart_Struct[UART5].rx_tail];
 332   4                                      Uart_Struct[UART5].rx_tail++;
 333   4                                      Uart_Struct[UART5].rx_tail &= SERIAL_COUNT;
 334   4                                      
 335   4                      //buf[buf_idx] = byte;
 336   4                      //buf_idx++;
 337   4                      
 338   4                      // if(Uart_Struct[UART5].rx_tail == Uart_Struct[UART5].rx_head)
 339   4                      // {
 340   4                      //     u8 i;
 341   4                      //     xdata u16 temp_buf[30];
 342   4                      //     for(i = 0; i < buf_idx; i++)
 343   4                      //     {  
 344   4                      //         sprintf((u8*) &temp_buf[i], "%02X", (u8)buf[i]);                        
 345   4                      //     } 
 346   4                      //     temp_buf[i] = 0x0000;
 347   4                          
 348   4                          
 349   4                      //     write_dgus_vp(0x1200, (u8*) &temp_buf, (buf_idx * 2) + 2);
 350   4                      //     buf_idx = 0;
 351   4                      // }
 352   4                      
 353   4                      switch (state)
 354   4                                      {
 355   5                                      case 0:
 356   5                              if(byte == 0xA5) 
 357   5                                                      state=1;
 358   5                                              break; 
 359   5                                      
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 7   

 360   5                                      case 1:
 361   5                                              if(byte == 0xA5) 
 362   5                                                      state=4;
 363   5                          else 
 364   5                                                      UART_INIT
 365   5                              break; 
 366   5                                      
 367   5                                      case 4:
 368   5                                              if(byte == 0xA5) 
 369   5                                                      begfl = 1;
 370   5                                              else if(byte == 0x5A)
 371   5                              endfl = 1;
 372   5                                              len = byte; 
 373   5                                              state = 6; 
 374   5                              break;  
 375   5      
 376   5                                      case 6:
 377   5                                              if(byte == 0xA5)
 378   5                          {
 379   6                                                      if (begfl == 1) 
 380   6                                                              state = 4;
 381   6                              else           
 382   6                                                              begfl = 1; 
 383   6                          }
 384   5                          else 
 385   5                                                      begfl=0;
 386   5      
 387   5                          if(byte == 0x5A)
 388   5                          {
 389   6                              if(endfl == 1) 
 390   6                                                      {
 391   7                                                              UART_INIT 
 392   7                                                              break;
 393   7                                                      } else
 394   6                                      endfl = 1; 
 395   6                          } else 
 396   5                                                      endfl = 0;
 397   5      
 398   5                              bufin[inbufind] = byte; 
 399   5                                              inbufind++;
 400   5      
 401   5                          if(inbufind == len + 2)
 402   5                          { 
 403   6                               state = 10;
 404   6                          } 
 405   5                                                      
 406   5                              break;
 407   5      
 408   5                                      case 10:
 409   5                                              if(byte == 0x5A) {
 410   6                              state = 11; 
 411   6                                                      break;
 412   6                                              }    
 413   5                          if(byte == 0xA5) {  
 414   6                                                      UART_INIT_1 
 415   6                                                      break;
 416   6                                              }
 417   5                                              UART_INIT 
 418   5                                              break;
 419   5      
 420   5                                      case 11:
 421   5                                      {
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 8   

 422   6                          u8 i;
 423   6                                              u8 crc = 0;
 424   6                          xdata u16 temp_buf[30];
 425   6                                              if(byte != 0x5A)
 426   6                          {
 427   7                              if(byte == 0xA5) 
 428   7                                                              UART_INIT_1 
 429   7                              else             
 430   7                                                              UART_INIT
 431   7                              break; 
 432   7                          }
 433   6                     
 434   6      
 435   6                          for(i = 1; i <= len; i++) {
 436   7                                                      crc += bufin[i];
 437   7                                              }
 438   6                          if(crc != bufin[len+1]) { 
 439   7                                                      UART_INIT
 440   7                                                      break; 
 441   7                                              }
 442   6                          //decode
 443   6                          for(i = 0; i < len; i++)
 444   6                          {  
 445   7                              sprintf((u8*) &temp_buf[i], "%02X", (u8)bufin[i + 1]);                        
 446   7                          } 
 447   6                          temp_buf[i] = 0x0000;
 448   6                          write_dgus_vp(0x1200, (u8*) &temp_buf, (len * 2) + 2);
 449   6                          
 450   6                      //     
 451   6                          //decode
 452   6                          // if(bufin[1] == 0x31) {
 453   6                          //     u8 i, j;
 454   6                          //     u8 temp_buf[30];
 455   6                          //     for(i = 2, j = 0; i < len; i++, j++) {
 456   6                          //         temp_buf[j] = bufin[i];         
 457   6                          //     }
 458   6                          //     temp_buf[j] = 0x00;
 459   6                          //     print_machine_name(temp_buf);
 460   6                          // }
 461   6                         
 462   6                                              UART_INIT
 463   6                                              break;
 464   6                                      }
 465   5                                      
 466   5                                      default: 
 467   5                                              break;
 468   5                              }
 469   4                              
 470   4                              
 471   4                              EA = 1;                
 472   4                  }
 473   3                 
 474   3                  
 475   3              }        
 476   2      
 477   2          }
 478   1          
 479   1      
 480   1      
 481   1         
 482   1      }
*** WARNING C280 IN LINE 240 OF source\main.c: 'tp_state': unreferenced local variable
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 9   

*** WARNING C280 IN LINE 326 OF source\main.c: 'buf_idx': unreferenced local variable
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION io_init (BEGIN)
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 28
                                           ; SOURCE LINE # 29
0000 75F901            MOV     PORTDRV,#01H
                                           ; SOURCE LINE # 38
0003 75BCFD            MOV     P1MDOUT,#0FDH
                                           ; SOURCE LINE # 39
0006 7590FD            MOV     P1,#0FDH
                                           ; SOURCE LINE # 40
0009 22                RET     
             ; FUNCTION io_init (END)

             ; FUNCTION _dgus_draw_string (BEGIN)
                                           ; SOURCE LINE # 43
0000 900000      R     MOV     DPTR,#vp
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F E9                MOV     A,R1
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 47
0011 120000      E     LCALL   _strlen
0014 EF                MOV     A,R7
0015 04                INC     A
;---- Variable 'len' assigned to Register 'R5' ----
0016 FD                MOV     R5,A
                                           ; SOURCE LINE # 48
;---- Variable 'i' assigned to Register 'R7' ----
0017 E4                CLR     A
0018 FF                MOV     R7,A
0019         ?C0002:
0019 EF                MOV     A,R7
001A C3                CLR     C
001B 9D                SUBB    A,R5
001C 5028              JNC     ?C0003
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
001E 900000      R     MOV     DPTR,#s
0021 E0                MOVX    A,@DPTR
0022 FB                MOV     R3,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FA                MOV     R2,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 F9                MOV     R1,A
0029 8F82              MOV     DPL,R7
002B 758300            MOV     DPH,#00H
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 11  

002E 120000      E     LCALL   ?C?CLDOPTR
0031 FB                MOV     R3,A
0032 EF                MOV     A,R7
0033 25E0              ADD     A,ACC
0035 2400        R     ADD     A,#LOW str
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH str
003C F583              MOV     DPH,A
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 EB                MOV     A,R3
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
0043 0F                INC     R7
0044 80D3              SJMP    ?C0002
0046         ?C0003:
                                           ; SOURCE LINE # 52
0046 900000      R     MOV     DPTR,#vp
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 7B01              MOV     R3,#01H
0050 7A00        R     MOV     R2,#HIGH str
0052 7900        R     MOV     R1,#LOW str
0054 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0057 E4                CLR     A
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A ED                MOV     A,R5
005B F0                MOVX    @DPTR,A
005C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _dgus_draw_string (END)

             ; FUNCTION _dgus_print_utf_str (BEGIN)
                                           ; SOURCE LINE # 57
0000 900000      R     MOV     DPTR,#vp
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F E9                MOV     A,R1
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 61
0011 120000      E     LCALL   _strlen
0014 EF                MOV     A,R7
0015 04                INC     A
0016 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 62
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 12  

;---- Variable 'i' assigned to Register 'R6' ----
0017 E4                CLR     A
0018 FE                MOV     R6,A
0019         ?C0006:
0019 EE                MOV     A,R6
001A C3                CLR     C
001B 9F                SUBB    A,R7
001C 5028              JNC     ?C0007
                                           ; SOURCE LINE # 63
001E 900000      R     MOV     DPTR,#str
0021 E0                MOVX    A,@DPTR
0022 FB                MOV     R3,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FA                MOV     R2,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 F9                MOV     R1,A
0029 8E82              MOV     DPL,R6
002B 758300            MOV     DPH,#00H
002E 120000      E     LCALL   ?C?CLDOPTR
0031 FD                MOV     R5,A
0032 EE                MOV     A,R6
0033 25E0              ADD     A,ACC
0035 2400        R     ADD     A,#LOW out_str
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH out_str
003C F583              MOV     DPH,A
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 ED                MOV     A,R5
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 64
0043 0E                INC     R6
0044 80D3              SJMP    ?C0006
0046         ?C0007:
                                           ; SOURCE LINE # 65
0046 900000      R     MOV     DPTR,#vp
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 7B01              MOV     R3,#01H
0050 7A00        R     MOV     R2,#HIGH out_str
0052 7900        R     MOV     R1,#LOW out_str
0054 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0057 E4                CLR     A
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A 743C              MOV     A,#03CH
005C F0                MOVX    @DPTR,A
005D 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _dgus_print_utf_str (END)

             ; FUNCTION setup_ext_int0 (BEGIN)
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 71
0000 53A9FE            ANL     IP0,#0FEH
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 13  

                                           ; SOURCE LINE # 72
0003 53B9FE            ANL     IP1,#0FEH
                                           ; SOURCE LINE # 73
0006 C289              CLR     IE0
                                           ; SOURCE LINE # 75
0008 D288              SETB    IT0
                                           ; SOURCE LINE # 76
000A D2A8              SETB    EX0
                                           ; SOURCE LINE # 80
000C C28B              CLR     IE1
                                           ; SOURCE LINE # 82
000E D28A              SETB    IT1
                                           ; SOURCE LINE # 83
0010 D2AA              SETB    EX1
                                           ; SOURCE LINE # 100
0012 22                RET     
             ; FUNCTION setup_ext_int0 (END)

             ; FUNCTION ext_int0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
001D C2AF              CLR     EA
001F         ?C0013:
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
001F 7F20              MOV     R7,#020H
0021 7E03              MOV     R6,#03H
0023 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
0026 E5B0              MOV     A,P3
0028 30E0F4            JNB     ACC.0,?C0013
002B         ?C0016:
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
002B 7F20              MOV     R7,#020H
002D 7E03              MOV     R6,#03H
002F 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
0032 E5B0              MOV     A,P3
0034 30E0F4            JNB     ACC.0,?C0016
0037         ?C0019:
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
0037 7F2C              MOV     R7,#02CH
0039 7E01              MOV     R6,#01H
003B 120000      E     LCALL   _delay_us
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 14  

                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
003E E5B0              MOV     A,P3
0040 30E0F4            JNB     ACC.0,?C0019
                                           ; SOURCE LINE # 128
0043 E5B0              MOV     A,P3
0045 20E11C            JB      ACC.1,?C0020
                                           ; SOURCE LINE # 129
0048 E500        E     MOV     A,encoder_ticks
004A D3                SETB    C
004B 9450              SUBB    A,#050H
004D 900000      R     MOV     DPTR,#tmp+01H
0050 E0                MOVX    A,@DPTR
0051 4004              JC      ?C0021
                                           ; SOURCE LINE # 130
0053 24FB              ADD     A,#0FBH
0055 8002              SJMP    ?C0100
0057         ?C0021:
                                           ; SOURCE LINE # 132
0057 24FF              ADD     A,#0FFH
0059         ?C0100:
0059 F0                MOVX    @DPTR,A
005A 900000      R     MOV     DPTR,#tmp
005D E0                MOVX    A,@DPTR
005E 34FF              ADDC    A,#0FFH
0060 F0                MOVX    @DPTR,A
0061         ?C0022:
                                           ; SOURCE LINE # 133
0061 750064      E     MOV     encoder_ticks,#064H
                                           ; SOURCE LINE # 134
0064         ?C0020:
                                           ; SOURCE LINE # 135
0064 7F01              MOV     R7,#01H
0066 7E00              MOV     R6,#00H
0068 120000      E     LCALL   _delay_ms
                                           ; SOURCE LINE # 138
006B C289              CLR     IE0
                                           ; SOURCE LINE # 139
006D C28B              CLR     IE1
                                           ; SOURCE LINE # 140
006F D2AF              SETB    EA
                                           ; SOURCE LINE # 142
0071 D007              POP     AR7
0073 D006              POP     AR6
0075 D005              POP     AR5
0077 D004              POP     AR4
0079 D003              POP     AR3
007B D002              POP     AR2
007D D001              POP     AR1
007F D000              POP     AR0
0081 D0D0              POP     PSW
0083 D082              POP     DPL
0085 D083              POP     DPH
0087 D0F0              POP     B
0089 D0E0              POP     ACC
008B 32                RETI    
             ; FUNCTION ext_int0 (END)

             ; FUNCTION ext_int1 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 15  

0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 146
001D C2AF              CLR     EA
001F         ?C0026:
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
001F 7F20              MOV     R7,#020H
0021 7E03              MOV     R6,#03H
0023 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
0026 E5B0              MOV     A,P3
0028 30E1F4            JNB     ACC.1,?C0026
002B         ?C0029:
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
002B 7F20              MOV     R7,#020H
002D 7E03              MOV     R6,#03H
002F 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
0032 E5B0              MOV     A,P3
0034 30E1F4            JNB     ACC.1,?C0029
0037         ?C0032:
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
0037 7F2C              MOV     R7,#02CH
0039 7E01              MOV     R6,#01H
003B 120000      E     LCALL   _delay_us
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
003E E5B0              MOV     A,P3
0040 30E1F4            JNB     ACC.1,?C0032
                                           ; SOURCE LINE # 167
0043 E5B0              MOV     A,P3
0045 20E028            JB      ACC.0,?C0033
                                           ; SOURCE LINE # 168
0048 E500        E     MOV     A,encoder_ticks
004A D3                SETB    C
004B 9450              SUBB    A,#050H
004D 4010              JC      ?C0034
                                           ; SOURCE LINE # 169
004F 900000      R     MOV     DPTR,#tmp+01H
0052 E0                MOVX    A,@DPTR
0053 2405              ADD     A,#05H
0055 F0                MOVX    @DPTR,A
0056 900000      R     MOV     DPTR,#tmp
0059 E0                MOVX    A,@DPTR
005A 3400              ADDC    A,#00H
005C F0                MOVX    @DPTR,A
005D 800E              SJMP    ?C0035
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 16  

005F         ?C0034:
                                           ; SOURCE LINE # 171
005F 900000      R     MOV     DPTR,#tmp+01H
0062 E0                MOVX    A,@DPTR
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
0065 7006              JNZ     ?C0096
0067 900000      R     MOV     DPTR,#tmp
006A E0                MOVX    A,@DPTR
006B 04                INC     A
006C F0                MOVX    @DPTR,A
006D         ?C0096:
006D         ?C0035:
                                           ; SOURCE LINE # 172
006D 750064      E     MOV     encoder_ticks,#064H
                                           ; SOURCE LINE # 173
0070         ?C0033:
                                           ; SOURCE LINE # 174
0070 7F01              MOV     R7,#01H
0072 7E00              MOV     R6,#00H
0074 120000      E     LCALL   _delay_ms
                                           ; SOURCE LINE # 177
0077 C289              CLR     IE0
                                           ; SOURCE LINE # 178
0079 C28B              CLR     IE1
                                           ; SOURCE LINE # 179
007B D2AF              SETB    EA
                                           ; SOURCE LINE # 182
007D D007              POP     AR7
007F D006              POP     AR6
0081 D005              POP     AR5
0083 D004              POP     AR4
0085 D003              POP     AR3
0087 D002              POP     AR2
0089 D001              POP     AR1
008B D000              POP     AR0
008D D0D0              POP     PSW
008F D082              POP     DPL
0091 D083              POP     DPH
0093 D0F0              POP     B
0095 D0E0              POP     ACC
0097 32                RETI    
             ; FUNCTION ext_int1 (END)

             ; FUNCTION read_gray_code_from_encoder (BEGIN)
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
;---- Variable 'val' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 189
0002 E5B0              MOV     A,P3
0004 20E003            JB      ACC.0,?C0037
                                           ; SOURCE LINE # 190
0007 7402              MOV     A,#02H
0009 FF                MOV     R7,A
000A         ?C0037:
                                           ; SOURCE LINE # 192
000A E5B0              MOV     A,P3
000C 20E604            JB      ACC.6,?C0038
                                           ; SOURCE LINE # 193
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 17  

000F EF                MOV     A,R7
0010 4401              ORL     A,#01H
0012 FF                MOV     R7,A
0013         ?C0038:
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
0013         ?C0039:
0013 22                RET     
             ; FUNCTION read_gray_code_from_encoder (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
0000 120000      E     LCALL   INIT_CPU
                                           ; SOURCE LINE # 203
0003 120000      E     LCALL   T0_Init
                                           ; SOURCE LINE # 204
0006 120000      R     LCALL   setup_ext_int0
                                           ; SOURCE LINE # 205
0009 D2AF              SETB    EA
                                           ; SOURCE LINE # 209
000B 120000      R     LCALL   io_init
                                           ; SOURCE LINE # 211
000E 120000      E     LCALL   ssd2828_init
                                           ; SOURCE LINE # 213
0011 900000      E     MOV     DPTR,#?_UartInit?BYTE+01H
0014 120000      E     LCALL   ?C?LSTKXDATA
0017 00                DB      00H
0018 01                DB      01H
0019 C2                DB      0C2H
001A 00                DB      00H
001B 7F03              MOV     R7,#03H
001D 120000      E     LCALL   _UartInit
                                           ; SOURCE LINE # 214
0020 E4                CLR     A
0021 900000      R     MOV     DPTR,#inbufind
0024 F0                MOVX    @DPTR,A
0025 900000      R     MOV     DPTR,#state
0028 F0                MOVX    @DPTR,A
0029 900000      R     MOV     DPTR,#endfl
002C F0                MOVX    @DPTR,A
002D 900000      R     MOV     DPTR,#begfl
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0031 120000      E     LCALL   draw_bottom_menu
                                           ; SOURCE LINE # 218
0034 120000      E     LCALL   draw_cyclogramm
                                           ; SOURCE LINE # 219
0037 120000      E     LCALL   place_numbers_on_cyclogramm
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
003A         ?C0042:
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
003A C2AF              CLR     EA
                                           ; SOURCE LINE # 252
003C 7B01              MOV     R3,#01H
003E 7A00        R     MOV     R2,#HIGH tmp
0040 7900        R     MOV     R1,#LOW tmp
0042 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 18  

0045 E4                CLR     A
0046 F0                MOVX    @DPTR,A
0047 A3                INC     DPTR
0048 04                INC     A
0049 F0                MOVX    @DPTR,A
004A 7F00              MOV     R7,#00H
004C 7E30              MOV     R6,#030H
004E 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 253
0051 D2AF              SETB    EA
                                           ; SOURCE LINE # 255
0053 7B01              MOV     R3,#01H
0055 7A00        R     MOV     R2,#HIGH touch_data
0057 7900        R     MOV     R1,#LOW touch_data
0059 900000      E     MOV     DPTR,#?_read_dgus_vp?BYTE+05H
005C E4                CLR     A
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F 7403              MOV     A,#03H
0061 F0                MOVX    @DPTR,A
0062 7F16              MOV     R7,#016H
0064 7E00              MOV     R6,#00H
0066 120000      E     LCALL   _read_dgus_vp
                                           ; SOURCE LINE # 257
0069 900000      R     MOV     DPTR,#touch_data
006C E0                MOVX    A,@DPTR
006D B45ACA            CJNE    A,#05AH,?C0042
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
0070 E4                CLR     A
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 260
0072 7B01              MOV     R3,#01H
0074 7A00        R     MOV     R2,#HIGH touch_data+02H
0076 7900        R     MOV     R1,#LOW touch_data+02H
0078 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
007B F0                MOVX    @DPTR,A
007C A3                INC     DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
007F 7F16              MOV     R7,#016H
0081 7E00              MOV     R6,#00H
0083 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
0086 900000      R     MOV     DPTR,#touch_data+01H
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B 900000      R     MOV     DPTR,#action
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
0090 A3                INC     DPTR
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
0093 7B01              MOV     R3,#01H
0095 7A00        R     MOV     R2,#HIGH action
0097 7900        R     MOV     R1,#LOW action
0099 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
009C E4                CLR     A
009D F0                MOVX    @DPTR,A
009E A3                INC     DPTR
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 19  

009F 04                INC     A
00A0 F0                MOVX    @DPTR,A
00A1 7F00              MOV     R7,#00H
00A3 7E40              MOV     R6,#040H
00A5 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 264
00A8 7B01              MOV     R3,#01H
00AA 7A00        R     MOV     R2,#HIGH touch_data+02H
00AC 7900        R     MOV     R1,#LOW touch_data+02H
00AE 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
00B1 E4                CLR     A
00B2 F0                MOVX    @DPTR,A
00B3 A3                INC     DPTR
00B4 7402              MOV     A,#02H
00B6 F0                MOVX    @DPTR,A
00B7 7F00              MOV     R7,#00H
00B9 7E52              MOV     R6,#052H
00BB 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 267
00BE 900000      R     MOV     DPTR,#touch_data+01H
00C1 E0                MOVX    A,@DPTR
00C2 14                DEC     A
00C3 6003              JZ      $ + 5H
00C5 020000      R     LJMP    ?C0042
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
00C8         ?C0046:
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 272
00C8 E4                CLR     A
00C9 900000      R     MOV     DPTR,#i
00CC F0                MOVX    @DPTR,A
00CD         ?C0047:
00CD 900000      E     MOV     DPTR,#cur_menu_size
00D0 E0                MOVX    A,@DPTR
00D1 FF                MOV     R7,A
00D2 900000      R     MOV     DPTR,#i
00D5 E0                MOVX    A,@DPTR
00D6 FE                MOV     R6,A
00D7 C3                CLR     C
00D8 9F                SUBB    A,R7
00D9 4003              JC      $ + 5H
00DB 020000      R     LJMP    ?C0048
                                           ; SOURCE LINE # 273
00DE 75F009            MOV     B,#09H
00E1 EE                MOV     A,R6
00E2 A4                MUL     AB
00E3 2400        E     ADD     A,#LOW cur_menu+01H
00E5 F582              MOV     DPL,A
00E7 E5F0              MOV     A,B
00E9 3400        E     ADDC    A,#HIGH cur_menu+01H
00EB F583              MOV     DPH,A
00ED E0                MOVX    A,@DPTR
00EE FE                MOV     R6,A
00EF A3                INC     DPTR
00F0 E0                MOVX    A,@DPTR
00F1 FF                MOV     R7,A
00F2 900000      R     MOV     DPTR,#touch_data+02H
00F5 E0                MOVX    A,@DPTR
00F6 FC                MOV     R4,A
00F7 A3                INC     DPTR
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 20  

00F8 E0                MOVX    A,@DPTR
00F9 FD                MOV     R5,A
00FA C3                CLR     C
00FB 9F                SUBB    A,R7
00FC EC                MOV     A,R4
00FD 9E                SUBB    A,R6
00FE 406F              JC      ?C0049
0100 900000      R     MOV     DPTR,#i
0103 E0                MOVX    A,@DPTR
0104 FF                MOV     R7,A
0105 75F009            MOV     B,#09H
0108 A4                MUL     AB
0109 2400        E     ADD     A,#LOW cur_menu+05H
010B F582              MOV     DPL,A
010D E5F0              MOV     A,B
010F 3400        E     ADDC    A,#HIGH cur_menu+05H
0111 F583              MOV     DPH,A
0113 E0                MOVX    A,@DPTR
0114 FA                MOV     R2,A
0115 A3                INC     DPTR
0116 E0                MOVX    A,@DPTR
0117 FB                MOV     R3,A
0118 D3                SETB    C
0119 ED                MOV     A,R5
011A 9B                SUBB    A,R3
011B EC                MOV     A,R4
011C 9A                SUBB    A,R2
011D 5050              JNC     ?C0049
011F 75F009            MOV     B,#09H
0122 EF                MOV     A,R7
0123 A4                MUL     AB
0124 2400        E     ADD     A,#LOW cur_menu+03H
0126 F582              MOV     DPL,A
0128 E5F0              MOV     A,B
012A 3400        E     ADDC    A,#HIGH cur_menu+03H
012C F583              MOV     DPH,A
012E E0                MOVX    A,@DPTR
012F FE                MOV     R6,A
0130 A3                INC     DPTR
0131 E0                MOVX    A,@DPTR
0132 FF                MOV     R7,A
0133 900000      R     MOV     DPTR,#touch_data+04H
0136 E0                MOVX    A,@DPTR
0137 FC                MOV     R4,A
0138 A3                INC     DPTR
0139 E0                MOVX    A,@DPTR
013A FD                MOV     R5,A
013B C3                CLR     C
013C 9F                SUBB    A,R7
013D EC                MOV     A,R4
013E 9E                SUBB    A,R6
013F 402E              JC      ?C0049
0141 A3                INC     DPTR
0142 E0                MOVX    A,@DPTR
0143 FF                MOV     R7,A
0144 75F009            MOV     B,#09H
0147 A4                MUL     AB
0148 2400        E     ADD     A,#LOW cur_menu+07H
014A F582              MOV     DPL,A
014C E5F0              MOV     A,B
014E 3400        E     ADDC    A,#HIGH cur_menu+07H
0150 F583              MOV     DPH,A
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 21  

0152 E0                MOVX    A,@DPTR
0153 FA                MOV     R2,A
0154 A3                INC     DPTR
0155 E0                MOVX    A,@DPTR
0156 FB                MOV     R3,A
0157 D3                SETB    C
0158 ED                MOV     A,R5
0159 9B                SUBB    A,R3
015A EC                MOV     A,R4
015B 9A                SUBB    A,R2
015C 5011              JNC     ?C0049
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
015E 900000      E     MOV     DPTR,#_cur_menu_fanc
0161 A3                INC     DPTR
0162 E0                MOVX    A,@DPTR
0163 FA                MOV     R2,A
0164 A3                INC     DPTR
0165 E0                MOVX    A,@DPTR
0166 F582              MOV     DPL,A
0168 8A83              MOV     DPH,R2
016A 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 276
016D 8009              SJMP    ?C0048
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
016F         ?C0049:
016F 900000      R     MOV     DPTR,#i
0172 E0                MOVX    A,@DPTR
0173 04                INC     A
0174 F0                MOVX    @DPTR,A
0175 020000      R     LJMP    ?C0047
0178         ?C0048:
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0178 900000      R     MOV     DPTR,#i
017B E0                MOVX    A,@DPTR
017C FF                MOV     R7,A
017D A3                INC     DPTR
017E E4                CLR     A
017F F0                MOVX    @DPTR,A
0180 A3                INC     DPTR
0181 EF                MOV     A,R7
0182 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
0183 7B01              MOV     R3,#01H
0185 7A00        R     MOV     R2,#HIGH dummy
0187 7900        R     MOV     R1,#LOW dummy
0189 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
018C E4                CLR     A
018D F0                MOVX    @DPTR,A
018E A3                INC     DPTR
018F 04                INC     A
0190 F0                MOVX    @DPTR,A
0191 7F00              MOV     R7,#00H
0193 7E25              MOV     R6,#025H
0195 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0198 020000      R     LJMP    ?C0042
             ; FUNCTION main (END)

C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 22  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


INIT_CPU . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
icon_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  ico. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  r. . . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0001H  8
QUENE. . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
CANBUSUNIT . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
cur_menu_size. . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
point_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
begfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0002H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
rect_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  x0 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  y0 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  x1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
Uart_Struct. . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
_sprintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
endfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0003H  1
_write_dgus_vp . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
read_gray_code_from_encoder. . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
dgus_data_variable_display_t . . . . .  TYPEDEF  -----  STRUCT   -----  26
  vp . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  upper_left_point . . . . . . . . . .  MEMBER   -----  STRUCT   0002H  4
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
  lib_id . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0008H  1
  font_size. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0009H  1
  alignment. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000AH  1
  integer_digits . . . . . . . . . . .  MEMBER   -----  U_CHAR   000BH  1
  decimal_places . . . . . . . . . . .  MEMBER   -----  U_CHAR   000CH  1
  variable_data_type . . . . . . . . .  MEMBER   -----  U_CHAR   000DH  1
  len_unit . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   000EH  1
  string_unit. . . . . . . . . . . . .  MEMBER   -----  ARRAY    000FH  11
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CANBUS8283 . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
CANUNIT. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 23  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
bufin. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0004H  255
_strlen. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
state. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0103H  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  action . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  dummy. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  ETPS_WAIT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_RELEASE . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_FIRST_PRESS . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_LIFT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_PRESSING. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETP_STATE. . . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
  tp_state . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
  touch_data . . . . . . . . . . . . .  AUTO     XDATA  STRUCT   0000H  6
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  crc. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  temp_buf . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0003H  60
  byte . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  buf_idx. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0001H  1
MSPIFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_mSPIFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
MNORFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
_mNORFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
ext_int0 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ext_int1 . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_dgus_print_utf_str. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vp . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  out_str. . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0005H  60
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 24  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_candataunitbuf. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
PORTDRV. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
_UartInit. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ssd2828_init . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
place_numbers_on_cyclogramm. . . . . .  EXTERN   CODE   PROC     -----  -----
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
len. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0104H  1
DATABUFF . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
_dgus_draw_string. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vp . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  s. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0005H  100
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
draw_bottom_menu . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
databuff . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
val. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0105H  1
setup_ext_int0 . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
draw_cyclogramm. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
IP0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
IP1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
MMUSIC . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
_mMUSIC. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
C51 COMPILER V9.53.0.0   MAIN                                                              11/10/2023 13:37:39 PAGE 25  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
tmp. . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_INT    0106H  2
_delay_ms. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
inbufind . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0108H  1
_quene8283 . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
s32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
u32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
s16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
_delay_us. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
u16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_cur_menu_fanc . . . . . . . . . . . .  EXTERN   XDATA  PTR      -----  3
cur_menu . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
encoder_ticks. . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
_can8283 . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
io_init. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_candataunit . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
T0_Init. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_read_dgus_vp. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    943    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =    265     233
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
