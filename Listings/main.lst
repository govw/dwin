C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\DWIN\Keil_v5\C51\BIN\C51.EXE source\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\sour
                    -ce) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "timer.h"
   2          #include "ui.h"
   3          #include "uart.h"
   4          #include "dwin8283.h"
   5          #include "canbus.h"
   6          #include "ssd2828.h"
*** WARNING C235 IN LINE 76 OF source\ssd2828.h: parameter 1: different types
   7          #include <string.h> 
   8          #include <stdio.h>
   9          
  10          
  11          #include "temp.h"
  12          
  13          
  14          
  15          //–∑–∞–º–µ—Ç–∫–∏!!
  16          //—Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏ –ø–æ vp
  17          //write_dgus_vp(0x1200, "fadsfsadfad\x00", sizeof("fadsfsadfad\x00"));
  18          
  19          //–¢1   –≤—Ä–µ–º—è –ø—Ä–µ–¥–≤. –ø—Ä–æ–¥—É–≤–∫–∏, —Å
  20          data u16 some_rus_string[] = {0x0422, 0x0031, 0x0020, 0x0432, 0x0440, 0x0435, 0x043C, 0x044F, 0x0020, 0x04
             -3F, 0x0440, 0x0435, 0x0434, 0x0432, 0x002E, 0x0020, 0x043F, 0x0440, 0x043E, 0x0434, 0x0443, 0x0432, 0x043A, 0x0438, 0x00
             -2C, 0x0020, 0000};
  21          
  22                        
  23          
  24                  
  25          
  26          
  27          struct text_field
  28          {
  29              void *vp;
  30              u16 x;
  31              u16 y;
  32              u16 color;    
  33          }text1;
  34          
  35          
  36          u8 state, inbufind;
  37          u8 bufin[255];
  38          u8 len; 
  39          
  40          u8 begfl,endfl;
  41          
  42          #define UART_INIT       {state = inbufind=0;  begfl=endfl=0;} 
  43          #define UART_INIT_1 {state=1; inbufind=0; begfl=endfl=0;}
  44          #define TEXT_VP (0x1200)
  45          u8 temp_offset = 0;
  46          
  47          
  48          
  49          
  50          u8  my_text[100];
  51          u8 counter = 0;
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 2   

  52          
  53          
  54          //IOÔøΩÔøΩÔøΩ≈≥ÔøΩ ºÔøΩÔøΩ
  55          void io_init()
  56          {
  57   1               PORTDRV = 0x01;//ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒ™8mA
  58   1              //P1MDOUT |= 0x02;//ÔøΩÔøΩP1.1ÔøΩÔøΩÔøΩÔøΩŒ™ÔøΩÔøΩÔøΩ,ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩLED1ÔøΩÔøΩ
  59   1              //P1MDOUT &= 0xFE;//ÔøΩÔøΩP1.0ÔøΩÔøΩÔøΩÔøΩŒ™ÔøΩÔøΩÔøΩÔøΩ,ÔøΩÔøΩÔøΩ⁄∂ÔøΩ»°ÔøΩÔøΩÔøΩ≈µƒµÔøΩ∆ΩÔøΩ‰ªØ
  60   1              //sbit csx = P1^0;              //p1.0
  61   1              //sbit sdo = P1^1;              //p1.1
  62   1              //sbit sdi = P1^2;              //p1.2
  63   1              //sbit sck = P1^3;              //p1.3
  64   1              //sbit sdc = P1^4;              //p1.4
  65   1              
  66   1              P1MDOUT = 0xFD; 
  67   1              P1=0xFD;        
  68   1      }
  69          
  70          
  71          
  72          u8 idx = 0;
  73             
  74               
  75          xdata u8 dbg_string[50];
  76          xdata u16 key_code;
  77          
  78          const u16 KEY_CODE_VP = 0x2000;
  79          
  80          
  81          void nothing(void)
  82          {
  83   1          static u8 cnt = 0;
  84   1          if((cnt & 0x01) == 1) {
  85   2              draw_vertical_menu();
*** WARNING C206 IN LINE 85 OF source\main.c: 'draw_vertical_menu': missing function-prototype
  86   2          } else {
  87   2              u16 dummpy = 0x0000;
  88   2              write_dgus_vp(0x9500, (u8*) &dummpy, 1);
  89   2          }
  90   1          cnt++; //for switch                             
  91   1          
  92   1      }
  93           
  94          void draw_rectangle(const u16 x,const u16 y)
  95          {
  96   1          xdata u16 draw_rect_cmd[30];
  97   1          draw_rect_cmd[0] = 0x0003;  //shape type
  98   1          draw_rect_cmd[1] = 0x0003;  //obj cnt
  99   1          draw_rect_cmd[2] = 0;       //x0
 100   1          draw_rect_cmd[3] = y;       //y0
 101   1          draw_rect_cmd[4] = 1023;    //x1
 102   1          draw_rect_cmd[5] = y + 100; //y1
 103   1          draw_rect_cmd[6] = 0xFFFF;  //color
 104   1          draw_rect_cmd[7] = 0 + 1;       //x0
 105   1          draw_rect_cmd[8] = y + 1;       //y0
 106   1          draw_rect_cmd[9] = 1023 - 1;    //x1
 107   1          draw_rect_cmd[10] = y + 100 - 1; //y1
 108   1          draw_rect_cmd[11] = 0xFFFF;  //color
 109   1          draw_rect_cmd[12] = 0 + 2;       //x0
 110   1          draw_rect_cmd[13] = y + 2;       //y0
 111   1          draw_rect_cmd[14] = 1023 - 2;    //x1
 112   1          draw_rect_cmd[15] = y + 100 - 2; //y1
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 3   

 113   1          draw_rect_cmd[16] = 0xFFFF;  //color
 114   1          draw_rect_cmd[17] = 0xFF00;
 115   1          
 116   1          write_dgus_vp(0x3000, (u8*) draw_rect_cmd, sizeof(draw_rect_cmd) / 2); 
 117   1      }
*** WARNING C280 IN LINE 94 OF source\main.c: 'x': unreferenced local variable
 118          
 119          void draw_string(u8* s)
 120          {
 121   1          xdata u16 str[50];
 122   1          u8 i;
 123   1          u8 len = strlen(s) + 1;
 124   1          for(i = 0; i < len; i++)
 125   1          {
 126   2              str[i] = s[i]; 
 127   2          }
 128   1          write_dgus_vp(0x1100, (u8*)str, len);
 129   1      }
 130          
 131          s16 rect_y_pos = 0;
 132          void btn_0(void)
 133          {
 134   1          //write_dgus_vp(0x1200, "F1\x00", sizeof("F1\x00"));
 135   1      //    text1.x += 10;
 136   1      //    text1.y += 10;
 137   1      //    write_dgus_vp(0x9001, (u8*) &text1.x, sizeof(text1.x));
 138   1          
 139   1        rect_y_pos -= 100;
 140   1          if(rect_y_pos <= 0) 
 141   1              rect_y_pos = 700;
 142   1          draw_rectangle(0, rect_y_pos);    
 143   1      }
 144          void btn_1(void)
 145          {
 146   1      //    write_dgus_vp(0x1200, "F2\x00", sizeof("F2\x00"));
 147   1            rect_y_pos += 100;
 148   1          if(rect_y_pos == 800) 
 149   1              rect_y_pos = 0;
 150   1          draw_rectangle(0, rect_y_pos);
 151   1          draw_string("string 1");   
 152   1      }
 153          
 154          void btn_2(void)
 155          {
 156   1          draw_string("string 2");
 157   1          write_dgus_vp(0x1200, "F3\x00", sizeof("F3\x00"));
 158   1      }
 159          
 160          void btn_3(void)
 161          {
 162   1          static u16 n;
 163   1          u8 temp[50];
 164   1          sprintf((u8*)temp, "%s%10d","test", n);//
 165   1          n++;
 166   1          draw_string(temp);
 167   1          write_dgus_vp(0x1200, "F4\x00", sizeof("F4\x00"));    
 168   1      }
 169          
 170          void btn_4(void)
 171          {
 172   1          draw_string("string 4");
 173   1          write_dgus_vp(0x1200, "F5\x00", sizeof("F5\x00"));
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 4   

 174   1      }
 175          void btn_5(void)
 176          {
 177   1          write_dgus_vp(0x1200, "F6\x00", sizeof("F6\x00"));
 178   1          
 179   1      }
 180          
 181          
 182          code void (*btn_func[])(void) = {
 183             btn_0, btn_1, btn_2,
 184             btn_3, btn_4, btn_5,
 185             nothing,nothing,nothing,nothing,nothing,nothing,nothing,nothing,nothing,nothing,    
 186          };
 187          
 188          
 189          
 190          
 191          print_utf_str(u16 vp, u8* str)
 192          {
 193   1          xdata u16 out_str[30];
 194   1          u8 i;
 195   1          u8 len;
 196   1          
 197   1          len = strlen(str) + 1;
 198   1          
 199   1          for(i = 0; i < len; i++) {
 200   2              out_str[i] = str[i];
 201   2          }
 202   1          
 203   1          write_dgus_vp(vp, (u8*)out_str, sizeof(out_str));
 204   1      }
 205          
 206          
 207          code u16 string_offsets[] = {0x1000, 0x1200, 0x1400, 0x1600, 0x1800 ,0x2000, 0x2200, 0x2400};
 208          
 209          
 210          typedef struct list_par_t{
 211              u8  name[30];
 212              u16 val;
 213          };
 214          
 215          
 216             
 217          void main()
 218          {
 219   1              INIT_CPU();            //CPU ÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩ◊¢ÔøΩÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–ªÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩxd
             -ataÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩ0ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩƒ±ÔøΩÔøΩÔøΩÔøΩ–≥ÔøΩ º÷µÔøΩÔøΩÔøΩÔøΩ“™ÔøΩ⁄∏√∫ÔøΩÔøΩÔøΩÔ
             -øΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ¬∏ÔøΩ÷µ
 220   1              T0_Init();                                               //ÔøΩÔøΩ ±ÔøΩÔøΩ0ÔøΩÔøΩ ºÔøΩÔøΩ
 221   1              EA = 1; //interrupt on
 222   1              
 223   1          //StartTimer(0,100);
 224   1              //StartTimer(1,50);
 225   1              //-------------------
 226   1              io_init();
 227   1      //      delay_ms(20);
 228   1              ssd2828_init();
 229   1      //________________________________________________________________________ __________   
 230   1              UartInit(UART5, 115200);
 231   1              UART_INIT //MARCROS
 232   1              
 233   1          draw_bottom_menu();
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 5   

 234   1        
 235   1      while(1)    
 236   1      {
 237   2         
 238   2         enum ETP_STATE 
 239   2         {
 240   2             ETPS_WAIT,
 241   2             ETPS_RELEASE,
 242   2             ETPS_FIRST_PRESS,
 243   2             ETPS_LIFT,
 244   2             ETPS_PRESSING,
 245   2         };
 246   2         
 247   2         static u8 tp_state = ETPS_WAIT;
 248   2         
 249   2         struct {
 250   2             u8 status;
 251   2             u8 action_type;
 252   2             u16 x;
 253   2             u16 y;
 254   2         } touch_data;
 255   2          
 256   2         while(1)
 257   2         {
 258   3             read_dgus_vp(0x16,(u8*)&touch_data, sizeof(touch_data) / 2); //info about touch status and coords
 259   3             
 260   3             if(touch_data.status == 0x5A) //if status byte 0x05 some action done
 261   3             {
 262   4                 touch_data.status = 0x00;
 263   4                 write_dgus_vp(0x16, (u8*) &touch_data.x, 1); //clear status byte to 00;
 264   4                  
 265   4                 {
 266   5                     u16 action = touch_data.action_type; 
 267   5                     write_dgus_vp(0x4000, (u8*) &action, 1); //show action type
 268   5                     write_dgus_vp(0x5200, (u8*) &touch_data.x, 2); //show coords of touch point
 269   5                 }
 270   4          
 271   4                 switch(touch_data.action_type)
 272   4                 {
 273   5                     case ETPS_RELEASE:
 274   5                     {
 275   6                         u8 i;
 276   6                         for(i = 0; i < p_cur_menu->size; i++) { //if touch coords in recatnle area
 277   7                              if(touch_data.x >= p_cur_menu->p_items[i].icon.x && touch_data.x <= p_cur_menu->p_
             -items[i].icon.x + 100 &&  
 278   7                                  touch_data.y >= p_cur_menu->p_items[i].icon.y && touch_data.y <= p_cur_menu->p
             -_items[i].icon.y + 100) {
 279   8                                      last_selected_menu_item = i;
 280   8                                      p_cur_menu->func();//–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–
             -π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
 281   8                                      {
 282   9                                          u16 dummy = last_selected_menu_item;
 283   9                                          write_dgus_vp(0x2500, (u8*) &dummy, 1); //–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–¥ 
             -–≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 284   9                                      }
 285   8                                      break;
 286   8                                  }
 287   7                              }
 288   6                          if(i == p_cur_menu->size) {
 289   7                              level_back(); 
 290   7                          }   
 291   6                         
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 6   

 292   6                         break;
 293   6                     }
 294   5                         
 295   5                     case ETPS_FIRST_PRESS:
 296   5                     {
 297   6                         
 298   6                          break;
 299   6                     }
 300   5                     case ETPS_LIFT:
 301   5                         break;
 302   5      
 303   5                     case ETPS_PRESSING:
 304   5                     {
 305   6                          break;
 306   6                     }
 307   5                     default:
 308   5                         break;
 309   5                 }
 310   4             }
 311   3             
 312   3         }
 313   2      }
 314   1          //working cmd 2407 0003 0000 02bc 0001  0064 02bc 0001   00c8 02bc 0003 FF00
 315   1          // {         
 316   1          //         struct {
 317   1          //           u16 x;
 318   1          //           u16 y;  
 319   1          //         } rect[] = {
 320   1          //           {0, 700},
 321   1          //           {100, 700},
 322   1          //           {200, 700},  
 323   1          //           {300, 700},  
 324   1          //           {400, 700},  
 325   1          //           {500, 700},  
 326   1          //           {600, 700},  
 327   1          //           {700, 700},  
 328   1          //           {800, 700},  
 329   1          //           {900, 700},  
 330   1                     
 331   1          //         };
 332   1                  
 333   1                
 334   1          //         while(1)
 335   1          //         {
 336   1          //             u8 i;
 337   1          //             struct {
 338   1          //                 u8 status; //0x5A if some action done
 339   1          //                 u8 action_type;
 340   1          //                 u16 x;
 341   1          //                 u16 y;
 342   1          //             } touch_data;
 343   1                      
 344   1                      
 345   1          //             read_dgus_vp(0x16,(u8*)&touch_data, sizeof(touch_data) / 2); //info about touch status 
             -and coords
 346   1          //             if(touch_data.status == 0x5A) {                                     
 347   1                          
 348   1          //                 //process touch action
 349   1          //                 for(i = 0; i < sizeof(rect) / sizeof(rect[0]); i++) { //if touch coords in recatnle
             - area
 350   1          //                 if(touch_data.x >= rect[i].x && touch_data.x <= rect[i].x + 100 &&
 351   1          //                    touch_data.y >= rect[i].y && touch_data.y <= rect[i].y + 100) {
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 7   

 352   1                                                                                                        
 353   1          //                        write_dgus_vp(0x5200, (u8*) &touch_data.x, 2); //show coords of touch point
 354   1          //                        if(i == 0) {// –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω 0 —ç–ª–µ–º–µ–Ω—Ç
 355   1          //                          static u8 cnt = 0;
 356   1          //                          if((cnt & 0x01) == 1) {
 357   1          //                             draw_vertical_menu();
 358   1          //                          } else {
 359   1          //                             u16 dummpy = 0x0000;
 360   1          //                             write_dgus_vp(0x9500, (u8*) &dummpy, 1);
 361   1          //                          }
 362   1          //                          cnt++; //for switch                             
 363   1          //                        }
 364   1                              
 365   1          //                        break;
 366   1          //                    }                           
 367   1          //                 }
 368   1                          
 369   1                          
 370   1          //                 //wait button up
 371   1                          
 372   1          //                 while(touch_data.action_type != 0x02) //manual page 52 tp controll
 373   1          //                 {
 374   1          //                     read_dgus_vp(0x16,(u8*)&touch_data, 1); //info about touch status and coords
 375   1          //                 }
 376   1          //                 touch_data.status = 0x00;
 377   1          //                 write_dgus_vp(0x16, (u8*) &touch_data.x, 1); //display coords of touch point
 378   1                          
 379   1          //             }        
 380   1                      
 381   1          //         }        
 382   1          // }    
 383   1         
 384   1          
 385   1      
 386   1      //     {
 387   1      //         u8 i;
 388   1      //         u8 str[60];
 389   1      //         struct list_par_t list_par[] = {
 390   1      //            {"par 1   ",  100},
 391   1      //            {"par 2sdf",  200},
 392   1      //            {"par 3   ",  300},
 393   1      //            {"par 4   ",  400},
 394   1      //            {"par 5a  ",  500},
 395   1      //            {"par 6b  ",  600},
 396   1      //            {"par 7c  ",  700},
 397   1      //            {"par 8   ",  800},
 398   1      //            {"par 9   ",  900},
 399   1      //            {"par 10  ", 1000},
 400   1      //        }; 
 401   1      //            
 402   1      //        
 403   1      //                 
 404   1      //          for(i = 0; i < sizeof(list_par) / sizeof(list_par[0]) ; i++){
 405   1      //              //sprintf(str, "%-30s %05d", list_par[i].name, list_par[i].val);   
 406   1      //              sprintf(str, "%s%d", list_par[i].name, list_par[i].val);   
 407   1      //              print_utf_str(string_offsets[i], str); 
 408   1      //          }
 409   1      //         
 410   1      //          
 411   1      //      }          
 412   1            
 413   1              
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 8   

 414   1        
 415   1           
 416   1          
 417   1           
 418   1          
 419   1          // dbg_string[0] = 0xff;
 420   1          // dbg_string[1] = 0xff;
 421   1          // dbg_string[2] = 0xff;
 422   1          // dbg_string[3] = 0xff;
 423   1          // dbg_string[4] = 0xff;
 424   1          // dbg_string[5] = 0xff;
 425   1          // while(1)
 426   1          // {
 427   1          //     //Uatr_Send_Data(UART5, sizeof(dbg_string), dbg_string);  
 428   1          //     delay_ms(5000);
 429   1          // }
 430   1          
 431   1         
 432   1          
 433   1          
 434   1          
 435   1          key_code = 0x0010; //16 –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞
 436   1          write_dgus_vp(0x5000, (u8*) &key_code, sizeof(key_code));
 437   1          while(1)
 438   1          {//–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
 439   2              read_dgus_vp(0x5000, (u8*)&key_code, sizeof(key_code));//—á—Ç–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–Ω–æ–∫–∏
 440   2              if(key_code < 0x0010)
 441   2              {
 442   3                              (*btn_func[key_code])();
 443   3                  key_code = 0x0010;            
 444   3                  write_dgus_vp(0x5000, (u8*) &key_code, sizeof(key_code));
 445   3              }
 446   2              
 447   2              
 448   2              
 449   2              //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ uart
 450   2              //delay_ms(100);
 451   2              if(Uart_Struct[UART5].tx_flag == 0) //–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
 452   2                      {
 453   3                 
 454   3                  static u8 buf_idx = 0;            
 455   3                  EA = 0;     
 456   3                  while(Uart_Struct[UART5].rx_tail != Uart_Struct[UART5].rx_head)
 457   3                              { 
 458   4                      u8 byte;
 459   4                      byte = Uart_Struct[UART5].rx_buf[Uart_Struct[UART5].rx_tail];
 460   4                                      Uart_Struct[UART5].rx_tail++;
 461   4                                      Uart_Struct[UART5].rx_tail &= SERIAL_COUNT;
 462   4                                      
 463   4                      //buf[buf_idx] = byte;
 464   4                      //buf_idx++;
 465   4                      
 466   4                      // if(Uart_Struct[UART5].rx_tail == Uart_Struct[UART5].rx_head)
 467   4                      // {
 468   4                      //     u8 i;
 469   4                      //     xdata u16 temp_buf[30];
 470   4                      //     for(i = 0; i < buf_idx; i++)
 471   4                      //     {  
 472   4                      //         sprintf((u8*) &temp_buf[i], "%02X", (u8)buf[i]);                        
 473   4                      //     } 
 474   4                      //     temp_buf[i] = 0x0000;
 475   4                          
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 9   

 476   4                          
 477   4                      //     write_dgus_vp(0x1200, (u8*) &temp_buf, (buf_idx * 2) + 2);
 478   4                      //     buf_idx = 0;
 479   4                      // }
 480   4                      
 481   4                      switch (state)
 482   4                                      {
 483   5                                      case 0:
 484   5                              if(byte == 0xA5) 
 485   5                                                      state=1;
 486   5                                              break; 
 487   5                                      
 488   5                                      case 1:
 489   5                                              if(byte == 0xA5) 
 490   5                                                      state=4;
 491   5                          else 
 492   5                                                      UART_INIT
 493   5                              break; 
 494   5                                      
 495   5                                      case 4:
 496   5                                              if(byte == 0xA5) 
 497   5                                                      begfl = 1;
 498   5                                              else if(byte == 0x5A)
 499   5                              endfl = 1;
 500   5                                              len = byte; 
 501   5                                              state = 6; 
 502   5                              break;  
 503   5      
 504   5                                      case 6:
 505   5                                              if(byte == 0xA5)
 506   5                          {
 507   6                                                      if (begfl == 1) 
 508   6                                                              state = 4;
 509   6                              else           
 510   6                                                              begfl = 1; 
 511   6                          }
 512   5                          else 
 513   5                                                      begfl=0;
 514   5      
 515   5                          if(byte == 0x5A)
 516   5                          {
 517   6                              if(endfl == 1) 
 518   6                                                      {
 519   7                                                              UART_INIT 
 520   7                                                              break;
 521   7                                                      } else
 522   6                                      endfl = 1; 
 523   6                          } else 
 524   5                                                      endfl = 0;
 525   5      
 526   5                              bufin[inbufind] = byte; 
 527   5                                              inbufind++;
 528   5      
 529   5                          if(inbufind == len + 2)
 530   5                          { 
 531   6                               state = 10;
 532   6                          } 
 533   5                                                      
 534   5                              break;
 535   5      
 536   5                                      case 10:
 537   5                                              if(byte == 0x5A) {
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 10  

 538   6                              state = 11; 
 539   6                                                      break;
 540   6                                              }    
 541   5                          if(byte == 0xA5) {  
 542   6                                                      UART_INIT_1 
 543   6                                                      break;
 544   6                                              }
 545   5                                              UART_INIT 
 546   5                                              break;
 547   5      
 548   5                                      case 11:
 549   5                                      {
 550   6                          u8 i;
 551   6                                              u8 crc = 0;
 552   6                          xdata u16 temp_buf[30];
 553   6                                              if(byte != 0x5A)
 554   6                          {
 555   7                              if(byte == 0xA5) 
 556   7                                                              UART_INIT_1 
 557   7                              else             
 558   7                                                              UART_INIT
 559   7                              break; 
 560   7                          }
 561   6                     
 562   6      
 563   6                          for(i = 1; i <= len; i++) {
 564   7                                                      crc += bufin[i];
 565   7                                              }
 566   6                          if(crc != bufin[len+1]) { 
 567   7                                                      UART_INIT
 568   7                                                      break; 
 569   7                                              }
 570   6                          //decode
 571   6                          for(i = 0; i < len; i++)
 572   6                          {  
 573   7                              sprintf((u8*) &temp_buf[i], "%02X", (u8)bufin[i + 1]);                        
 574   7                          } 
 575   6                          temp_buf[i] = 0x0000;
 576   6                          write_dgus_vp(0x1200, (u8*) &temp_buf, (len * 2) + 2);
 577   6                          
 578   6                      //     
 579   6                          //decode
 580   6                          // if(bufin[1] == 0x31) {
 581   6                          //     u8 i, j;
 582   6                          //     u8 temp_buf[30];
 583   6                          //     for(i = 2, j = 0; i < len; i++, j++) {
 584   6                          //         temp_buf[j] = bufin[i];         
 585   6                          //     }
 586   6                          //     temp_buf[j] = 0x00;
 587   6                          //     print_machine_name(temp_buf);
 588   6                          // }
 589   6                         
 590   6                                              UART_INIT
 591   6                                              break;
 592   6                                      }
 593   5                                      
 594   5                                      default: 
 595   5                                              break;
 596   5                              }
 597   4                              
 598   4                              
 599   4                              EA = 1;                
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 11  

 600   4                  }
 601   3                 
 602   3                  
 603   3              }        
 604   2      
 605   2          }
 606   1          
 607   1      
 608   1      
 609   1         
 610   1      }
*** WARNING C280 IN LINE 247 OF source\main.c: 'tp_state': unreferenced local variable
*** WARNING C280 IN LINE 454 OF source\main.c: 'buf_idx': unreferenced local variable
*** WARNING C290 IN LINE 204 OF source\main.c: missing return value
*** WARNING C294 IN LINE 435 OF source\main.c: unreachable code
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION io_init (BEGIN)
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
0000 75F901            MOV     PORTDRV,#01H
                                           ; SOURCE LINE # 66
0003 75BCFD            MOV     P1MDOUT,#0FDH
                                           ; SOURCE LINE # 67
0006 7590FD            MOV     P1,#0FDH
                                           ; SOURCE LINE # 68
0009 22                RET     
             ; FUNCTION io_init (END)

             ; FUNCTION nothing (BEGIN)
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 84
0000 900000      R     MOV     DPTR,#cnt
0003 E0                MOVX    A,@DPTR
0004 30E005            JNB     ACC.0,?C0002
                                           ; SOURCE LINE # 85
0007 120000      E     LCALL   draw_vertical_menu
                                           ; SOURCE LINE # 86
000A 801B              SJMP    ?C0003
000C         ?C0002:
                                           ; SOURCE LINE # 87
000C E4                CLR     A
000D 900000      R     MOV     DPTR,#dummpy
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
0013 7B01              MOV     R3,#01H
0015 7A00        R     MOV     R2,#HIGH dummpy
0017 7900        R     MOV     R1,#LOW dummpy
0019 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E 04                INC     A
001F F0                MOVX    @DPTR,A
0020 7F00              MOV     R7,#00H
0022 7E95              MOV     R6,#095H
0024 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 89
0027         ?C0003:
                                           ; SOURCE LINE # 90
0027 900000      R     MOV     DPTR,#cnt
002A E0                MOVX    A,@DPTR
002B 04                INC     A
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
002D 22                RET     
             ; FUNCTION nothing (END)

             ; FUNCTION _draw_rectangle (BEGIN)
                                           ; SOURCE LINE # 94
0000 900000      R     MOV     DPTR,#x
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 13  

0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
;---- Variable 'y' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 97
0008 A3                INC     DPTR
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C 7403              MOV     A,#03H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
000F A3                INC     DPTR
0010 E4                CLR     A
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7403              MOV     A,#03H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
0016 E4                CLR     A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
001B A3                INC     DPTR
001C EC                MOV     A,R4
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F ED                MOV     A,R5
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
0021 A3                INC     DPTR
0022 7403              MOV     A,#03H
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 74FF              MOV     A,#0FFH
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
0029 ED                MOV     A,R5
002A 2464              ADD     A,#064H
002C FE                MOV     R6,A
002D E4                CLR     A
002E 3C                ADDC    A,R4
002F A3                INC     DPTR
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 CE                XCH     A,R6
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
0034 74FF              MOV     A,#0FFH
0036 A3                INC     DPTR
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
003A A3                INC     DPTR
003B E4                CLR     A
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E 04                INC     A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 14  

003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
0040 2D                ADD     A,R5
0041 FE                MOV     R6,A
0042 E4                CLR     A
0043 3C                ADDC    A,R4
0044 A3                INC     DPTR
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 CE                XCH     A,R6
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0049 A3                INC     DPTR
004A 7403              MOV     A,#03H
004C F0                MOVX    @DPTR,A
004D A3                INC     DPTR
004E 74FE              MOV     A,#0FEH
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0051 ED                MOV     A,R5
0052 2463              ADD     A,#063H
0054 FE                MOV     R6,A
0055 E4                CLR     A
0056 3C                ADDC    A,R4
0057 A3                INC     DPTR
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A CE                XCH     A,R6
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
005C 74FF              MOV     A,#0FFH
005E A3                INC     DPTR
005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0062 A3                INC     DPTR
0063 E4                CLR     A
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066 7402              MOV     A,#02H
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
0069 2D                ADD     A,R5
006A FE                MOV     R6,A
006B E4                CLR     A
006C 3C                ADDC    A,R4
006D A3                INC     DPTR
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 CE                XCH     A,R6
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0072 A3                INC     DPTR
0073 7403              MOV     A,#03H
0075 F0                MOVX    @DPTR,A
0076 A3                INC     DPTR
0077 74FD              MOV     A,#0FDH
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
007A ED                MOV     A,R5
007B 2462              ADD     A,#062H
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 15  

007D FE                MOV     R6,A
007E E4                CLR     A
007F 3C                ADDC    A,R4
0080 A3                INC     DPTR
0081 F0                MOVX    @DPTR,A
0082 A3                INC     DPTR
0083 CE                XCH     A,R6
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0085 74FF              MOV     A,#0FFH
0087 A3                INC     DPTR
0088 F0                MOVX    @DPTR,A
0089 A3                INC     DPTR
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
008B A3                INC     DPTR
008C F0                MOVX    @DPTR,A
008D A3                INC     DPTR
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
0090 7B01              MOV     R3,#01H
0092 7A00        R     MOV     R2,#HIGH draw_rect_cmd
0094 7900        R     MOV     R1,#LOW draw_rect_cmd
0096 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B 741E              MOV     A,#01EH
009D F0                MOVX    @DPTR,A
009E 7F00              MOV     R7,#00H
00A0 7E30              MOV     R6,#030H
00A2 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _draw_rectangle (END)

             ; FUNCTION _draw_string (BEGIN)
                                           ; SOURCE LINE # 119
0000 900000      R     MOV     DPTR,#s
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 123
000B 120000      E     LCALL   _strlen
000E EF                MOV     A,R7
000F 04                INC     A
0010 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 124
;---- Variable 'i' assigned to Register 'R6' ----
0011 E4                CLR     A
0012 FE                MOV     R6,A
0013         ?C0006:
0013 EE                MOV     A,R6
0014 C3                CLR     C
0015 9F                SUBB    A,R7
0016 5028              JNC     ?C0007
                                           ; SOURCE LINE # 125
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 16  

                                           ; SOURCE LINE # 126
0018 900000      R     MOV     DPTR,#s
001B E0                MOVX    A,@DPTR
001C FB                MOV     R3,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FA                MOV     R2,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 F9                MOV     R1,A
0023 8E82              MOV     DPL,R6
0025 758300            MOV     DPH,#00H
0028 120000      E     LCALL   ?C?CLDOPTR
002B FD                MOV     R5,A
002C EE                MOV     A,R6
002D 25E0              ADD     A,ACC
002F 2400        R     ADD     A,#LOW str
0031 F582              MOV     DPL,A
0033 E4                CLR     A
0034 3400        R     ADDC    A,#HIGH str
0036 F583              MOV     DPH,A
0038 E4                CLR     A
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B ED                MOV     A,R5
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
003D 0E                INC     R6
003E 80D3              SJMP    ?C0006
0040         ?C0007:
                                           ; SOURCE LINE # 128
0040 7B01              MOV     R3,#01H
0042 7A00        R     MOV     R2,#HIGH str
0044 7900        R     MOV     R1,#LOW str
0046 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0049 E4                CLR     A
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
004E 7F00              MOV     R7,#00H
0050 7E11              MOV     R6,#011H
0052 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _draw_string (END)

             ; FUNCTION btn_0 (BEGIN)
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 139
0000 900000      R     MOV     DPTR,#rect_y_pos+01H
0003 E0                MOVX    A,@DPTR
0004 249C              ADD     A,#09CH
0006 F0                MOVX    @DPTR,A
0007 900000      R     MOV     DPTR,#rect_y_pos
000A E0                MOVX    A,@DPTR
000B 34FF              ADDC    A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
000E D3                SETB    C
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 9400              SUBB    A,#00H
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 17  

0013 900000      R     MOV     DPTR,#rect_y_pos
0016 E0                MOVX    A,@DPTR
0017 6480              XRL     A,#080H
0019 9480              SUBB    A,#080H
001B 5007              JNC     ?C0010
                                           ; SOURCE LINE # 141
001D 7402              MOV     A,#02H
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 74BC              MOV     A,#0BCH
0023 F0                MOVX    @DPTR,A
0024         ?C0010:
                                           ; SOURCE LINE # 142
0024 900000      R     MOV     DPTR,#rect_y_pos
0027 E0                MOVX    A,@DPTR
0028 FC                MOV     R4,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FD                MOV     R5,A
002C E4                CLR     A
002D FF                MOV     R7,A
002E FE                MOV     R6,A
002F 020000      R     LJMP    _draw_rectangle
             ; FUNCTION btn_0 (END)

             ; FUNCTION btn_1 (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 147
0000 900000      R     MOV     DPTR,#rect_y_pos+01H
0003 E0                MOVX    A,@DPTR
0004 2464              ADD     A,#064H
0006 F0                MOVX    @DPTR,A
0007 900000      R     MOV     DPTR,#rect_y_pos
000A E0                MOVX    A,@DPTR
000B 3400              ADDC    A,#00H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
000E E0                MOVX    A,@DPTR
000F B4030C            CJNE    A,#03H,?C0012
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 B42007            CJNE    A,#020H,?C0012
                                           ; SOURCE LINE # 149
0017 E4                CLR     A
0018 900000      R     MOV     DPTR,#rect_y_pos
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
001E         ?C0012:
                                           ; SOURCE LINE # 150
001E 900000      R     MOV     DPTR,#rect_y_pos
0021 E0                MOVX    A,@DPTR
0022 FC                MOV     R4,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 E4                CLR     A
0027 FF                MOV     R7,A
0028 FE                MOV     R6,A
0029 120000      R     LCALL   _draw_rectangle
                                           ; SOURCE LINE # 151
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 18  

002C 7BFF              MOV     R3,#0FFH
002E 7A00        R     MOV     R2,#HIGH ?SC_0
0030 7900        R     MOV     R1,#LOW ?SC_0
0032 020000      R     LJMP    _draw_string
             ; FUNCTION btn_1 (END)

             ; FUNCTION btn_2 (BEGIN)
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_9
0004 7900        R     MOV     R1,#LOW ?SC_9
0006 120000      R     LCALL   _draw_string
                                           ; SOURCE LINE # 157
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_18
000D 7900        R     MOV     R1,#LOW ?SC_18
000F 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 7404              MOV     A,#04H
0017 F0                MOVX    @DPTR,A
0018 7F00              MOV     R7,#00H
001A 7E12              MOV     R6,#012H
001C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_2 (END)

             ; FUNCTION btn_3 (BEGIN)
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 164
0000 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        R     MOV     A,#HIGH ?SC_22
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B 7400        R     MOV     A,#LOW ?SC_22
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F 74FF              MOV     A,#0FFH
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7400        R     MOV     A,#HIGH ?SC_29
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 7400        R     MOV     A,#LOW ?SC_29
0019 F0                MOVX    @DPTR,A
001A 900000      R     MOV     DPTR,#n
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 900000      E     MOV     DPTR,#?_sprintf?BYTE+09H
0024 CF                XCH     A,R7
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 19  

0029 7B01              MOV     R3,#01H
002B 7A00        R     MOV     R2,#HIGH temp
002D 7900        R     MOV     R1,#LOW temp
002F 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 165
0032 900000      R     MOV     DPTR,#n+01H
0035 E0                MOVX    A,@DPTR
0036 04                INC     A
0037 F0                MOVX    @DPTR,A
0038 7006              JNZ     ?C0081
003A 900000      R     MOV     DPTR,#n
003D E0                MOVX    A,@DPTR
003E 04                INC     A
003F F0                MOVX    @DPTR,A
0040         ?C0081:
                                           ; SOURCE LINE # 166
0040 7B01              MOV     R3,#01H
0042 7A00        R     MOV     R2,#HIGH temp
0044 7900        R     MOV     R1,#LOW temp
0046 120000      R     LCALL   _draw_string
                                           ; SOURCE LINE # 167
0049 7BFF              MOV     R3,#0FFH
004B 7A00        R     MOV     R2,#HIGH ?SC_34
004D 7900        R     MOV     R1,#LOW ?SC_34
004F 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0052 E4                CLR     A
0053 F0                MOVX    @DPTR,A
0054 A3                INC     DPTR
0055 7404              MOV     A,#04H
0057 F0                MOVX    @DPTR,A
0058 7F00              MOV     R7,#00H
005A 7E12              MOV     R6,#012H
005C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_3 (END)

             ; FUNCTION btn_4 (BEGIN)
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_38
0004 7900        R     MOV     R1,#LOW ?SC_38
0006 120000      R     LCALL   _draw_string
                                           ; SOURCE LINE # 173
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_47
000D 7900        R     MOV     R1,#LOW ?SC_47
000F 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 7404              MOV     A,#04H
0017 F0                MOVX    @DPTR,A
0018 7F00              MOV     R7,#00H
001A 7E12              MOV     R6,#012H
001C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_4 (END)

             ; FUNCTION btn_5 (BEGIN)
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 20  

0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_51
0004 7900        R     MOV     R1,#LOW ?SC_51
0006 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C 7404              MOV     A,#04H
000E F0                MOVX    @DPTR,A
000F 7F00              MOV     R7,#00H
0011 7E12              MOV     R6,#012H
0013 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_5 (END)

             ; FUNCTION _print_utf_str (BEGIN)
                                           ; SOURCE LINE # 191
0000 900000      R     MOV     DPTR,#vp
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F E9                MOV     A,R1
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 197
0011 120000      E     LCALL   _strlen
0014 EF                MOV     A,R7
0015 04                INC     A
0016 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 199
;---- Variable 'i' assigned to Register 'R6' ----
0017 E4                CLR     A
0018 FE                MOV     R6,A
0019         ?C0018:
0019 EE                MOV     A,R6
001A C3                CLR     C
001B 9F                SUBB    A,R7
001C 5028              JNC     ?C0019
                                           ; SOURCE LINE # 200
001E 900000      R     MOV     DPTR,#str
0021 E0                MOVX    A,@DPTR
0022 FB                MOV     R3,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FA                MOV     R2,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 F9                MOV     R1,A
0029 8E82              MOV     DPL,R6
002B 758300            MOV     DPH,#00H
002E 120000      E     LCALL   ?C?CLDOPTR
0031 FD                MOV     R5,A
0032 EE                MOV     A,R6
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 21  

0033 25E0              ADD     A,ACC
0035 2400        R     ADD     A,#LOW out_str
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH out_str
003C F583              MOV     DPH,A
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 ED                MOV     A,R5
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0043 0E                INC     R6
0044 80D3              SJMP    ?C0018
0046         ?C0019:
                                           ; SOURCE LINE # 203
0046 900000      R     MOV     DPTR,#vp
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 7B01              MOV     R3,#01H
0050 7A00        R     MOV     R2,#HIGH out_str
0052 7900        R     MOV     R1,#LOW out_str
0054 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0057 E4                CLR     A
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A 743C              MOV     A,#03CH
005C F0                MOVX    @DPTR,A
005D 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _print_utf_str (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0000 120000      E     LCALL   INIT_CPU
                                           ; SOURCE LINE # 220
0003 120000      E     LCALL   T0_Init
                                           ; SOURCE LINE # 221
0006 D2AF              SETB    EA
                                           ; SOURCE LINE # 226
0008 120000      R     LCALL   io_init
                                           ; SOURCE LINE # 228
000B 120000      E     LCALL   ssd2828_init
                                           ; SOURCE LINE # 230
000E 900000      E     MOV     DPTR,#?_UartInit?BYTE+01H
0011 120000      E     LCALL   ?C?LSTKXDATA
0014 00                DB      00H
0015 01                DB      01H
0016 C2                DB      0C2H
0017 00                DB      00H
0018 7F03              MOV     R7,#03H
001A 120000      E     LCALL   _UartInit
                                           ; SOURCE LINE # 231
001D E4                CLR     A
001E 900000      R     MOV     DPTR,#inbufind
0021 F0                MOVX    @DPTR,A
0022 900000      R     MOV     DPTR,#state
0025 F0                MOVX    @DPTR,A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 22  

0026 900000      R     MOV     DPTR,#endfl
0029 F0                MOVX    @DPTR,A
002A 900000      R     MOV     DPTR,#begfl
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
002E 120000      E     LCALL   draw_bottom_menu
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
0031         ?C0024:
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
0031 7B01              MOV     R3,#01H
0033 7A00        R     MOV     R2,#HIGH touch_data
0035 7900        R     MOV     R1,#LOW touch_data
0037 900000      E     MOV     DPTR,#?_read_dgus_vp?BYTE+05H
003A E4                CLR     A
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D 7403              MOV     A,#03H
003F F0                MOVX    @DPTR,A
0040 7F16              MOV     R7,#016H
0042 7E00              MOV     R6,#00H
0044 120000      E     LCALL   _read_dgus_vp
                                           ; SOURCE LINE # 260
0047 900000      R     MOV     DPTR,#touch_data
004A E0                MOVX    A,@DPTR
004B B45AE3            CJNE    A,#05AH,?C0024
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
004E E4                CLR     A
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
0050 7B01              MOV     R3,#01H
0052 7A00        R     MOV     R2,#HIGH touch_data+02H
0054 7900        R     MOV     R1,#LOW touch_data+02H
0056 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B 04                INC     A
005C F0                MOVX    @DPTR,A
005D 7F16              MOV     R7,#016H
005F 7E00              MOV     R6,#00H
0061 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
0064 900000      R     MOV     DPTR,#touch_data+01H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 900000      R     MOV     DPTR,#action
006C E4                CLR     A
006D F0                MOVX    @DPTR,A
006E A3                INC     DPTR
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
0071 7B01              MOV     R3,#01H
0073 7A00        R     MOV     R2,#HIGH action
0075 7900        R     MOV     R1,#LOW action
0077 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
007A E4                CLR     A
007B F0                MOVX    @DPTR,A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 23  

007C A3                INC     DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
007F 7F00              MOV     R7,#00H
0081 7E40              MOV     R6,#040H
0083 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 268
0086 7B01              MOV     R3,#01H
0088 7A00        R     MOV     R2,#HIGH touch_data+02H
008A 7900        R     MOV     R1,#LOW touch_data+02H
008C 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
008F E4                CLR     A
0090 F0                MOVX    @DPTR,A
0091 A3                INC     DPTR
0092 7402              MOV     A,#02H
0094 F0                MOVX    @DPTR,A
0095 7F00              MOV     R7,#00H
0097 7E52              MOV     R6,#052H
0099 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 271
009C 900000      R     MOV     DPTR,#touch_data+01H
009F E0                MOVX    A,@DPTR
00A0 14                DEC     A
00A1 708E              JNZ     ?C0024
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
00A3         ?C0028:
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 276
00A3 E4                CLR     A
00A4 900000      R     MOV     DPTR,#i
00A7 F0                MOVX    @DPTR,A
00A8         ?C0029:
00A8 900000      E     MOV     DPTR,#p_cur_menu
00AB E0                MOVX    A,@DPTR
00AC FB                MOV     R3,A
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF FA                MOV     R2,A
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 F9                MOV     R1,A
00B3 120000      E     LCALL   ?C?CLDPTR
00B6 FF                MOV     R7,A
00B7 900000      R     MOV     DPTR,#i
00BA E0                MOVX    A,@DPTR
00BB FE                MOV     R6,A
00BC C3                CLR     C
00BD 9F                SUBB    A,R7
00BE 4003              JC      $ + 5H
00C0 020000      R     LJMP    ?C0030
                                           ; SOURCE LINE # 277
00C3 900001            MOV     DPTR,#01H
00C6 120000      E     LCALL   ?C?PLDOPTR
00C9 75F006            MOV     B,#06H
00CC EE                MOV     A,R6
00CD A4                MUL     AB
00CE F582              MOV     DPL,A
00D0 85F083            MOV     DPH,B
00D3 120000      E     LCALL   ?C?ILDOPTR
00D6 FF                MOV     R7,A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 24  

00D7 AEF0              MOV     R6,B
00D9 900000      R     MOV     DPTR,#touch_data+02H
00DC E0                MOVX    A,@DPTR
00DD FC                MOV     R4,A
00DE A3                INC     DPTR
00DF E0                MOVX    A,@DPTR
00E0 FD                MOV     R5,A
00E1 C3                CLR     C
00E2 9F                SUBB    A,R7
00E3 EC                MOV     A,R4
00E4 9E                SUBB    A,R6
00E5 5003              JNC     $ + 5H
00E7 020000      R     LJMP    ?C0031
00EA EF                MOV     A,R7
00EB 2464              ADD     A,#064H
00ED FF                MOV     R7,A
00EE E4                CLR     A
00EF 3E                ADDC    A,R6
00F0 FE                MOV     R6,A
00F1 D3                SETB    C
00F2 ED                MOV     A,R5
00F3 9F                SUBB    A,R7
00F4 EC                MOV     A,R4
00F5 9E                SUBB    A,R6
00F6 4003              JC      $ + 5H
00F8 020000      R     LJMP    ?C0031
00FB 900000      E     MOV     DPTR,#p_cur_menu
00FE E0                MOVX    A,@DPTR
00FF FB                MOV     R3,A
0100 A3                INC     DPTR
0101 E0                MOVX    A,@DPTR
0102 FA                MOV     R2,A
0103 A3                INC     DPTR
0104 E0                MOVX    A,@DPTR
0105 F9                MOV     R1,A
0106 900001            MOV     DPTR,#01H
0109 120000      E     LCALL   ?C?PLDOPTR
010C 900000      R     MOV     DPTR,#i
010F E0                MOVX    A,@DPTR
0110 75F006            MOV     B,#06H
0113 A4                MUL     AB
0114 29                ADD     A,R1
0115 F9                MOV     R1,A
0116 EA                MOV     A,R2
0117 35F0              ADDC    A,B
0119 FA                MOV     R2,A
011A 900002            MOV     DPTR,#02H
011D 120000      E     LCALL   ?C?ILDOPTR
0120 FF                MOV     R7,A
0121 AEF0              MOV     R6,B
0123 C3                CLR     C
0124 900000      R     MOV     DPTR,#touch_data+05H
0127 E0                MOVX    A,@DPTR
0128 9F                SUBB    A,R7
0129 900000      R     MOV     DPTR,#touch_data+04H
012C E0                MOVX    A,@DPTR
012D 9E                SUBB    A,R6
012E 4055              JC      ?C0031
0130 EF                MOV     A,R7
0131 2464              ADD     A,#064H
0133 FF                MOV     R7,A
0134 E4                CLR     A
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 25  

0135 3E                ADDC    A,R6
0136 FE                MOV     R6,A
0137 D3                SETB    C
0138 A3                INC     DPTR
0139 E0                MOVX    A,@DPTR
013A 9F                SUBB    A,R7
013B 900000      R     MOV     DPTR,#touch_data+04H
013E E0                MOVX    A,@DPTR
013F 9E                SUBB    A,R6
0140 5043              JNC     ?C0031
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
0142 900000      R     MOV     DPTR,#i
0145 E0                MOVX    A,@DPTR
0146 900000      E     MOV     DPTR,#last_selected_menu_item
0149 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
014A 900000      E     MOV     DPTR,#p_cur_menu
014D E0                MOVX    A,@DPTR
014E FB                MOV     R3,A
014F A3                INC     DPTR
0150 E0                MOVX    A,@DPTR
0151 FA                MOV     R2,A
0152 A3                INC     DPTR
0153 E0                MOVX    A,@DPTR
0154 F9                MOV     R1,A
0155 900004            MOV     DPTR,#04H
0158 120000      E     LCALL   ?C?ILDOPTR
015B AAF0              MOV     R2,B
015D F9                MOV     R1,A
015E 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
0161 900000      E     MOV     DPTR,#last_selected_menu_item
0164 E0                MOVX    A,@DPTR
0165 FF                MOV     R7,A
0166 900000      R     MOV     DPTR,#dummy
0169 E4                CLR     A
016A F0                MOVX    @DPTR,A
016B A3                INC     DPTR
016C EF                MOV     A,R7
016D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
016E 7B01              MOV     R3,#01H
0170 7A00        R     MOV     R2,#HIGH dummy
0172 7900        R     MOV     R1,#LOW dummy
0174 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0177 E4                CLR     A
0178 F0                MOVX    @DPTR,A
0179 A3                INC     DPTR
017A 04                INC     A
017B F0                MOVX    @DPTR,A
017C 7F00              MOV     R7,#00H
017E 7E25              MOV     R6,#025H
0180 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
0183 8009              SJMP    ?C0030
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
0185         ?C0031:
0185 900000      R     MOV     DPTR,#i
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 26  

0188 E0                MOVX    A,@DPTR
0189 04                INC     A
018A F0                MOVX    @DPTR,A
018B 020000      R     LJMP    ?C0029
018E         ?C0030:
                                           ; SOURCE LINE # 288
018E 900000      E     MOV     DPTR,#p_cur_menu
0191 E0                MOVX    A,@DPTR
0192 FB                MOV     R3,A
0193 A3                INC     DPTR
0194 E0                MOVX    A,@DPTR
0195 FA                MOV     R2,A
0196 A3                INC     DPTR
0197 E0                MOVX    A,@DPTR
0198 F9                MOV     R1,A
0199 120000      E     LCALL   ?C?CLDPTR
019C FF                MOV     R7,A
019D 900000      R     MOV     DPTR,#i
01A0 E0                MOVX    A,@DPTR
01A1 6F                XRL     A,R7
01A2 6003              JZ      $ + 5H
01A4 020000      R     LJMP    ?C0024
                                           ; SOURCE LINE # 289
01A7 120000      E     LCALL   level_back
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 292
01AA 020000      R     LJMP    ?C0024
             ; FUNCTION main (END)

C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 27  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


INIT_CPU . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
QUENE. . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
EIID_AC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CANBUSUNIT . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
EIID_D_10. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
begfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0005H  1
EIID_H2O_OFF . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_D_20. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_2T. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
counter. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0006H  1
EIID_D_40. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_4T. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_PULSE_ON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
EIID_D_16. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Uart_Struct. . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
draw_vertical_menu . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
EIID_HF. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_sprintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
endfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0007H  1
_write_dgus_vp . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
my_text. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0008H  100
level_back . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
last_selected_menu_item. . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CANBUS8283 . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
CANUNIT. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
bufin. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    006CH  255
ICON_ID. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
_strlen. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_print_utf_str . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vp . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
  out_str. . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0005H  60
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
temp_offset. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   016BH  1
state. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   016CH  1
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 28  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  action . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  dummy. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  ETPS_WAIT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_RELEASE . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_FIRST_PRESS . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_LIFT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_PRESSING. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETP_STATE. . . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
  tp_state . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0003H  1
  touch_data . . . . . . . . . . . . .  AUTO     XDATA  STRUCT   0000H  6
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  crc. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  temp_buf . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0003H  60
  byte . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  buf_idx. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0004H  1
dbg_string . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    016DH  50
EIID_DC_PLUS . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_4T_PLUS . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MSPIFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_mSPIFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_draw_string . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0003H  100
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
EIID_RECT. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_LIFT. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
MNORFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
_mNORFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 29  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


text_field . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  vp . . . . . . . . . . . . . . . . .  MEMBER   -----  VOID_PTR 0000H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
_candataunitbuf. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
p_cur_menu . . . . . . . . . . . . . .  EXTERN   XDATA  PTR      -----  3
EIID_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PORTDRV. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
EIID_TRAP. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_UartInit. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
list_par_t . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  32
  name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  30
  val. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001EH  2
ssd2828_init . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
rect_y_pos . . . . . . . . . . . . . .  PUBLIC   XDATA  INT      019FH  2
len. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   01A1H  1
DATABUFF . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
draw_bottom_menu . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
databuff . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
EIID_H2O_ON. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_PULSE_OFF . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
idx. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   01A2H  1
key_code . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    01A3H  2
_draw_rectangle. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  y. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  draw_rect_cmd. . . . . . . . . . . .  AUTO     XDATA  ARRAY    0002H  60
MMUSIC . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
_mMUSIC. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 30  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
btn_func . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    003CH  48
inbufind . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   01A5H  1
btn_0. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
btn_1. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
btn_2. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_quene8283 . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
btn_3. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_INT    0001H  2
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0000H  50
EIID_MMA . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
s32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
btn_4. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
btn_5. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
u32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
s16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
u16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
ICON_T . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  id . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
EIID_TIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_SIN . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
_can8283 . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
MENU_T . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  p_items. . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  func . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0004H  2
EIID_MIX . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
KEY_CODE_VP. . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    01A6H  2
some_rus_string. . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0000H  54
io_init. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
EIID_DC_MINUS. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_candataunit . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
text1. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   01A8H  9
string_offsets . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    006CH  16
T0_Init. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
nothing. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dummpy . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  cnt. . . . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0000H  1
MENU_ITEM_T. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  icon . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0000H  6
_read_dgus_vp. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.53.0.0   MAIN                                                              10/31/2023 07:48:33 PAGE 31  

   CODE SIZE        =   1113    ----
   CONSTANT SIZE    =    124    ----
   XDATA SIZE       =    433     345
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
