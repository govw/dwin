C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\DWIN\Keil_v5\C51\BIN\C51.EXE source\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver;.\sour
                    -ce) DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "timer.h"
   2          #include "ui.h"
   3          #include "uart.h"
   4          #include "dwin8283.h"
   5          #include "canbus.h"
   6          #include "ssd2828.h"
*** WARNING C235 IN LINE 76 OF source\ssd2828.h: parameter 1: different types
   7          #include <string.h> 
   8          #include <stdio.h>
   9          
  10          
  11          #include "temp.h"
  12          
  13          
  14          
  15          //–∑–∞–º–µ—Ç–∫–∏!!
  16          //—Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏ –ø–æ vp
  17          //write_dgus_vp(0x1200, "fadsfsadfad\x00", sizeof("fadsfsadfad\x00"));
  18          
  19          //–¢1   –≤—Ä–µ–º—è –ø—Ä–µ–¥–≤. –ø—Ä–æ–¥—É–≤–∫–∏, —Å
  20          data u16 some_rus_string[] = {0x0422, 0x0031, 0x0020, 0x0432, 0x0440, 0x0435, 0x043C, 0x044F, 0x0020, 0x04
             -3F, 0x0440, 0x0435, 0x0434, 0x0432, 0x002E, 0x0020, 0x043F, 0x0440, 0x043E, 0x0434, 0x0443, 0x0432, 0x043A, 0x0438, 0x00
             -2C, 0x0020, 0000};
  21          
  22                        
  23          
  24          
  25          
  26          struct text_field
  27          {
  28              void *vp;
  29              u16 x;
  30              u16 y;
  31              u16 color;    
  32          }text1;
  33          
  34          
  35          u8 state, inbufind;
  36          u8 bufin[255];
  37          u8 len; 
  38          
  39          u8 begfl,endfl;
  40          
  41          #define UART_INIT       {state = inbufind=0;  begfl=endfl=0;} 
  42          #define UART_INIT_1 {state=1; inbufind=0; begfl=endfl=0;}
  43          #define TEXT_VP (0x1200)
  44          u8 temp_offset = 0;
  45          
  46          
  47          
  48          
  49          u8  my_text[100];
  50          u8 counter = 0;
  51          
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 2   

  52          
  53          //IOÔøΩÔøΩÔøΩ≈≥ÔøΩ ºÔøΩÔøΩ
  54          void io_init()
  55          {
  56   1               PORTDRV = 0x01;//ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩŒ™8mA
  57   1              //P1MDOUT |= 0x02;//ÔøΩÔøΩP1.1ÔøΩÔøΩÔøΩÔøΩŒ™ÔøΩÔøΩÔøΩ,ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩLED1ÔøΩÔøΩ
  58   1              //P1MDOUT &= 0xFE;//ÔøΩÔøΩP1.0ÔøΩÔøΩÔøΩÔøΩŒ™ÔøΩÔøΩÔøΩÔøΩ,ÔøΩÔøΩÔøΩ⁄∂ÔøΩ»°ÔøΩÔøΩÔøΩ≈µƒµÔøΩ∆ΩÔøΩ‰ªØ
  59   1              //sbit csx = P1^0;              //p1.0
  60   1              //sbit sdo = P1^1;              //p1.1
  61   1              //sbit sdi = P1^2;              //p1.2
  62   1              //sbit sck = P1^3;              //p1.3
  63   1              //sbit sdc = P1^4;              //p1.4
  64   1              
  65   1              P1MDOUT = 0xFD; 
  66   1              P1=0xFD;        
  67   1      }
  68          
  69          
  70          
  71          u8 idx = 0;
  72             
  73               
  74          xdata u8 dbg_string[50];
  75          xdata u16 key_code;
  76          
  77          const u16 KEY_CODE_VP = 0x2000;
  78          
  79          
  80          void nothing(void)
  81          {
  82   1                                    
  83   1          
  84   1      }
  85           
  86          void draw_rectangle(const u16 x,const u16 y)
  87          {
  88   1          xdata u16 draw_rect_cmd[30];
  89   1          draw_rect_cmd[0] = 0x0003;  //shape type
  90   1          draw_rect_cmd[1] = 0x0003;  //obj cnt
  91   1          draw_rect_cmd[2] = 0;       //x0
  92   1          draw_rect_cmd[3] = y;       //y0
  93   1          draw_rect_cmd[4] = 1023;    //x1
  94   1          draw_rect_cmd[5] = y + 100; //y1
  95   1          draw_rect_cmd[6] = 0xFFFF;  //color
  96   1          draw_rect_cmd[7] = 0 + 1;       //x0
  97   1          draw_rect_cmd[8] = y + 1;       //y0
  98   1          draw_rect_cmd[9] = 1023 - 1;    //x1
  99   1          draw_rect_cmd[10] = y + 100 - 1; //y1
 100   1          draw_rect_cmd[11] = 0xFFFF;  //color
 101   1          draw_rect_cmd[12] = 0 + 2;       //x0
 102   1          draw_rect_cmd[13] = y + 2;       //y0
 103   1          draw_rect_cmd[14] = 1023 - 2;    //x1
 104   1          draw_rect_cmd[15] = y + 100 - 2; //y1
 105   1          draw_rect_cmd[16] = 0xFFFF;  //color
 106   1          draw_rect_cmd[17] = 0xFF00;
 107   1          
 108   1          write_dgus_vp(0x3000, (u8*) draw_rect_cmd, sizeof(draw_rect_cmd) / 2); 
 109   1      }
*** WARNING C280 IN LINE 86 OF source\main.c: 'x': unreferenced local variable
 110          
 111          void draw_string(u8* s)
 112          {
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 3   

 113   1          xdata u16 str[50];
 114   1          u8 i;
 115   1          u8 len = strlen(s) + 1;
 116   1          for(i = 0; i < len; i++)
 117   1          {
 118   2              str[i] = s[i]; 
 119   2          }
 120   1          write_dgus_vp(0x1100, (u8*)str, len);
 121   1      }
 122          
 123          s16 rect_y_pos = 0;
 124          void btn_0(void)
 125          {
 126   1          //write_dgus_vp(0x1200, "F1\x00", sizeof("F1\x00"));
 127   1      //    text1.x += 10;
 128   1      //    text1.y += 10;
 129   1      //    write_dgus_vp(0x9001, (u8*) &text1.x, sizeof(text1.x));
 130   1          
 131   1        rect_y_pos -= 100;
 132   1          if(rect_y_pos <= 0) 
 133   1              rect_y_pos = 700;
 134   1          draw_rectangle(0, rect_y_pos);    
 135   1      }
 136          void btn_1(void)
 137          {
 138   1      //    write_dgus_vp(0x1200, "F2\x00", sizeof("F2\x00"));
 139   1            rect_y_pos += 100;
 140   1          if(rect_y_pos == 800) 
 141   1              rect_y_pos = 0;
 142   1          draw_rectangle(0, rect_y_pos);
 143   1          draw_string("string 1");   
 144   1      }
 145          
 146          void btn_2(void)
 147          {
 148   1          draw_string("string 2");
 149   1          write_dgus_vp(0x1200, "F3\x00", sizeof("F3\x00"));
 150   1      }
 151          
 152          void btn_3(void)
 153          {
 154   1          static u16 n;
 155   1          u8 temp[50];
 156   1          sprintf((u8*)temp, "%s%10d","test", n);//
 157   1          n++;
 158   1          draw_string(temp);
 159   1          write_dgus_vp(0x1200, "F4\x00", sizeof("F4\x00"));    
 160   1      }
 161          
 162          void btn_4(void)
 163          {
 164   1          draw_string("string 4");
 165   1          write_dgus_vp(0x1200, "F5\x00", sizeof("F5\x00"));
 166   1      }
 167          void btn_5(void)
 168          {
 169   1          write_dgus_vp(0x1200, "F6\x00", sizeof("F6\x00"));
 170   1          
 171   1      }
 172          
 173          
 174          code void (*btn_func[])(void) = {
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 4   

 175             btn_0, btn_1, btn_2,
 176             btn_3, btn_4, btn_5,
 177             nothing,nothing,nothing,nothing,nothing,nothing,nothing,nothing,nothing,nothing,    
 178          };
 179          
 180          
 181          
 182          
 183          print_utf_str(u16 vp, u8* str)
 184          {
 185   1          xdata u16 out_str[30];
 186   1          u8 i;
 187   1          u8 len;
 188   1          
 189   1          len = strlen(str) + 1;
 190   1          
 191   1          for(i = 0; i < len; i++) {
 192   2              out_str[i] = str[i];
 193   2          }
 194   1          
 195   1          write_dgus_vp(vp, (u8*)out_str, sizeof(out_str));
 196   1      }
 197          
 198          
 199          code u16 string_offsets[] = {0x1000, 0x1200, 0x1400, 0x1600, 0x1800 ,0x2000, 0x2200, 0x2400};
 200          
 201          
 202          typedef struct list_par_t{
 203              u8  name[30];
 204              u16 val;
 205          };
 206          
 207          
 208             
 209          void main()
 210          {
 211   1              INIT_CPU();            //CPU ÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩ◊¢ÔøΩÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–ªÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩxd
             -ataÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ºÔøΩÔøΩÔøΩÔøΩ0ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩƒ±ÔøΩÔøΩÔøΩÔøΩ–≥ÔøΩ º÷µÔøΩÔøΩÔøΩÔøΩ“™ÔøΩ⁄∏√∫ÔøΩÔøΩÔøΩÔ
             -øΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ¬∏ÔøΩ÷µ
 212   1              T0_Init();                                               //ÔøΩÔøΩ ±ÔøΩÔøΩ0ÔøΩÔøΩ ºÔøΩÔøΩ
 213   1              EA = 1; //interrupt on
 214   1              
 215   1          //StartTimer(0,100);
 216   1              //StartTimer(1,50);
 217   1              //-------------------
 218   1              io_init();
 219   1      //      delay_ms(20);
 220   1              ssd2828_init();
 221   1      //________________________________________________________________________ __________   
 222   1              UartInit(UART5, 115200);
 223   1              UART_INIT //MARCROS
 224   1              
 225   1          draw_bottom_menu();
 226   1        
 227   1      while(1)    
 228   1      {
 229   2         
 230   2         enum ETP_STATE 
 231   2         {
 232   2             ETPS_WAIT,
 233   2             ETPS_RELEASE,
 234   2             ETPS_FIRST_PRESS,
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 5   

 235   2             ETPS_LIFT,
 236   2             ETPS_PRESSING,
 237   2         };
 238   2         
 239   2         static u8 tp_state = ETPS_WAIT;
 240   2         
 241   2         struct {
 242   2             u8 status;
 243   2             u8 action_type;
 244   2             u16 x;
 245   2             u16 y;
 246   2         } touch_data;
 247   2          
 248   2         while(1)
 249   2         {
 250   3             read_dgus_vp(0x16,(u8*)&touch_data, sizeof(touch_data) / 2); //info about touch status and coords
 251   3             
 252   3             if(touch_data.status == 0x5A) //if status byte 0x05 some action done
 253   3             {
 254   4                 touch_data.status = 0x00;
 255   4                 write_dgus_vp(0x16, (u8*) &touch_data.x, 1); //clear status byte to 00;
 256   4                  
 257   4                 {
 258   5                     u16 action = touch_data.action_type; 
 259   5                     write_dgus_vp(0x4000, (u8*) &action, 1); //show action type
 260   5                     write_dgus_vp(0x5200, (u8*) &touch_data.x, 2); //show coords of touch point
 261   5                 }
 262   4          
 263   4                 switch(touch_data.action_type)
 264   4                 {
 265   5                     case ETPS_RELEASE:
 266   5                     {
 267   6                         u8 i;
 268   6                         last_selected_menu_item = 0;
 269   6                         for(i = 0; i < cur_menu->size; i++) { //if touch coords in recatnle area
 270   7                              if(((u32)active_items_bm & (u32)((u32)0x00000001 << cur_menu->items[i].ico)) != 0)
             - {
 271   8                                  if( touch_data.x >= cur_menu->items[i].r.x0 && touch_data.x <= cur_menu->items
             -[i].r.x1 &&  
 272   8                                      touch_data.y >= cur_menu->items[i].r.y0 && touch_data.y <= cur_menu->items
             -[i].r.y1 ) {
 273   9                                      //–ø–æ–∏—Å–∫ –∏–∑ –ø—Ä—è–º–æ—É–≥. –æ–±–ª–∞—Å—Ç–µ–π
 274   9      
 275   9                                          //–ü–æ–¥—É–º–∞—Ç—å –∫–∞–∫ –∏–∑–º–µ–Ω—å –¥–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ ///
             -////////////////////////
 276   9                                       if(&arr_of_menus[0] != cur_menu) {
 277  10                                          if(arr_of_menus[0].items[prev_menu_item].ico == cur_menu->items[i].ico
             -)
 278  10                                          {
 279  11                                              continue;
 280  11                                          }
 281  10                                      }
 282   9                                      ////////////////////////////////////////////////////
 283   9                                      cur_menu->func(i);
 284   9                                      prev_menu_item = last_selected_menu_item;
 285   9                                      break;
 286   9                                  }
 287   8                                  last_selected_menu_item++;    
 288   8                              }
 289   7                          }
 290   6                         
 291   6                          
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 6   

 292   6                          {
 293   7                              u16 dummy = last_selected_menu_item;
 294   7                              write_dgus_vp(0x2500, (u8*) &dummy, 1); //–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–¥ –≤—ã–±—Ä–∞–Ω
             -–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 295   7                          }
 296   6                       
 297   6                         break;
 298   6                     }
 299   5                         
 300   5                     case ETPS_FIRST_PRESS:
 301   5                     {
 302   6                         
 303   6                          break;
 304   6                     }
 305   5                     case ETPS_LIFT:
 306   5                         break;
 307   5      
 308   5                     case ETPS_PRESSING:
 309   5                     {
 310   6                          break;
 311   6                     }
 312   5                     default:
 313   5                         break;
 314   5                 }
 315   4             }
 316   3             
 317   3         }
 318   2      }
 319   1          //working cmd 2407 0003 0000 02bc 0001  0064 02bc 0001   00c8 02bc 0003 FF00
 320   1          // {         
 321   1          //         struct {
 322   1          //           u16 x;
 323   1          //           u16 y;  
 324   1          //         } rect[] = {
 325   1          //           {0, 700},
 326   1          //           {100, 700},
 327   1          //           {200, 700},  
 328   1          //           {300, 700},  
 329   1          //           {400, 700},  
 330   1          //           {500, 700},  
 331   1          //           {600, 700},  
 332   1          //           {700, 700},  
 333   1          //           {800, 700},  
 334   1          //           {900, 700},  
 335   1                     
 336   1          //         };
 337   1                  
 338   1                
 339   1          //         while(1)
 340   1          //         {
 341   1          //             u8 i;
 342   1          //             struct {
 343   1          //                 u8 status; //0x5A if some action done
 344   1          //                 u8 action_type;
 345   1          //                 u16 x;
 346   1          //                 u16 y;
 347   1          //             } touch_data;
 348   1                      
 349   1                      
 350   1          //             read_dgus_vp(0x16,(u8*)&touch_data, sizeof(touch_data) / 2); //info about touch status 
             -and coords
 351   1          //             if(touch_data.status == 0x5A) {                                     
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 7   

 352   1                          
 353   1          //                 //process touch action
 354   1          //                 for(i = 0; i < sizeof(rect) / sizeof(rect[0]); i++) { //if touch coords in recatnle
             - area
 355   1          //                 if(touch_data.x >= rect[i].x && touch_data.x <= rect[i].x + 100 &&
 356   1          //                    touch_data.y >= rect[i].y && touch_data.y <= rect[i].y + 100) {
 357   1                                                                                                        
 358   1          //                        write_dgus_vp(0x5200, (u8*) &touch_data.x, 2); //show coords of touch point
 359   1          //                        if(i == 0) {// –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω 0 —ç–ª–µ–º–µ–Ω—Ç
 360   1          //                          static u8 cnt = 0;
 361   1          //                          if((cnt & 0x01) == 1) {
 362   1          //                             draw_vertical_menu();
 363   1          //                          } else {
 364   1          //                             u16 dummpy = 0x0000;
 365   1          //                             write_dgus_vp(0x9500, (u8*) &dummpy, 1);
 366   1          //                          }
 367   1          //                          cnt++; //for switch                             
 368   1          //                        }
 369   1                              
 370   1          //                        break;
 371   1          //                    }                           
 372   1          //                 }
 373   1                          
 374   1                          
 375   1          //                 //wait button up
 376   1                          
 377   1          //                 while(touch_data.action_type != 0x02) //manual page 52 tp controll
 378   1          //                 {
 379   1          //                     read_dgus_vp(0x16,(u8*)&touch_data, 1); //info about touch status and coords
 380   1          //                 }
 381   1          //                 touch_data.status = 0x00;
 382   1          //                 write_dgus_vp(0x16, (u8*) &touch_data.x, 1); //display coords of touch point
 383   1                          
 384   1          //             }        
 385   1                      
 386   1          //         }        
 387   1          // }    
 388   1         
 389   1          
 390   1      
 391   1      //     {
 392   1      //         u8 i;
 393   1      //         u8 str[60];
 394   1      //         struct list_par_t list_par[] = {
 395   1      //            {"par 1   ",  100},
 396   1      //            {"par 2sdf",  200},
 397   1      //            {"par 3   ",  300},
 398   1      //            {"par 4   ",  400},
 399   1      //            {"par 5a  ",  500},
 400   1      //            {"par 6b  ",  600},
 401   1      //            {"par 7c  ",  700},
 402   1      //            {"par 8   ",  800},
 403   1      //            {"par 9   ",  900},
 404   1      //            {"par 10  ", 1000},
 405   1      //        }; 
 406   1      //            
 407   1      //        
 408   1      //                 
 409   1      //          for(i = 0; i < sizeof(list_par) / sizeof(list_par[0]) ; i++){
 410   1      //              //sprintf(str, "%-30s %05d", list_par[i].name, list_par[i].val);   
 411   1      //              sprintf(str, "%s%d", list_par[i].name, list_par[i].val);   
 412   1      //              print_utf_str(string_offsets[i], str); 
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 8   

 413   1      //          }
 414   1      //         
 415   1      //          
 416   1      //      }          
 417   1            
 418   1              
 419   1        
 420   1           
 421   1          
 422   1           
 423   1          
 424   1          // dbg_string[0] = 0xff;
 425   1          // dbg_string[1] = 0xff;
 426   1          // dbg_string[2] = 0xff;
 427   1          // dbg_string[3] = 0xff;
 428   1          // dbg_string[4] = 0xff;
 429   1          // dbg_string[5] = 0xff;
 430   1          // while(1)
 431   1          // {
 432   1          //     //Uatr_Send_Data(UART5, sizeof(dbg_string), dbg_string);  
 433   1          //     delay_ms(5000);
 434   1          // }
 435   1          
 436   1         
 437   1          
 438   1          
 439   1          
 440   1          key_code = 0x0010; //16 –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞
 441   1          write_dgus_vp(0x5000, (u8*) &key_code, sizeof(key_code));
 442   1          while(1)
 443   1          {//–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
 444   2              read_dgus_vp(0x5000, (u8*)&key_code, sizeof(key_code));//—á—Ç–µ–Ω–∏–µ –∫–æ–¥–∞ –∫–Ω–æ–∫–∏
 445   2              if(key_code < 0x0010)
 446   2              {
 447   3                              (*btn_func[key_code])();
 448   3                  key_code = 0x0010;            
 449   3                  write_dgus_vp(0x5000, (u8*) &key_code, sizeof(key_code));
 450   3              }
 451   2              
 452   2              
 453   2              
 454   2              //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ uart
 455   2              //delay_ms(100);
 456   2              if(Uart_Struct[UART5].tx_flag == 0) //–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
 457   2                      {
 458   3                 
 459   3                  static u8 buf_idx = 0;            
 460   3                  EA = 0;     
 461   3                  while(Uart_Struct[UART5].rx_tail != Uart_Struct[UART5].rx_head)
 462   3                              { 
 463   4                      u8 byte;
 464   4                      byte = Uart_Struct[UART5].rx_buf[Uart_Struct[UART5].rx_tail];
 465   4                                      Uart_Struct[UART5].rx_tail++;
 466   4                                      Uart_Struct[UART5].rx_tail &= SERIAL_COUNT;
 467   4                                      
 468   4                      //buf[buf_idx] = byte;
 469   4                      //buf_idx++;
 470   4                      
 471   4                      // if(Uart_Struct[UART5].rx_tail == Uart_Struct[UART5].rx_head)
 472   4                      // {
 473   4                      //     u8 i;
 474   4                      //     xdata u16 temp_buf[30];
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 9   

 475   4                      //     for(i = 0; i < buf_idx; i++)
 476   4                      //     {  
 477   4                      //         sprintf((u8*) &temp_buf[i], "%02X", (u8)buf[i]);                        
 478   4                      //     } 
 479   4                      //     temp_buf[i] = 0x0000;
 480   4                          
 481   4                          
 482   4                      //     write_dgus_vp(0x1200, (u8*) &temp_buf, (buf_idx * 2) + 2);
 483   4                      //     buf_idx = 0;
 484   4                      // }
 485   4                      
 486   4                      switch (state)
 487   4                                      {
 488   5                                      case 0:
 489   5                              if(byte == 0xA5) 
 490   5                                                      state=1;
 491   5                                              break; 
 492   5                                      
 493   5                                      case 1:
 494   5                                              if(byte == 0xA5) 
 495   5                                                      state=4;
 496   5                          else 
 497   5                                                      UART_INIT
 498   5                              break; 
 499   5                                      
 500   5                                      case 4:
 501   5                                              if(byte == 0xA5) 
 502   5                                                      begfl = 1;
 503   5                                              else if(byte == 0x5A)
 504   5                              endfl = 1;
 505   5                                              len = byte; 
 506   5                                              state = 6; 
 507   5                              break;  
 508   5      
 509   5                                      case 6:
 510   5                                              if(byte == 0xA5)
 511   5                          {
 512   6                                                      if (begfl == 1) 
 513   6                                                              state = 4;
 514   6                              else           
 515   6                                                              begfl = 1; 
 516   6                          }
 517   5                          else 
 518   5                                                      begfl=0;
 519   5      
 520   5                          if(byte == 0x5A)
 521   5                          {
 522   6                              if(endfl == 1) 
 523   6                                                      {
 524   7                                                              UART_INIT 
 525   7                                                              break;
 526   7                                                      } else
 527   6                                      endfl = 1; 
 528   6                          } else 
 529   5                                                      endfl = 0;
 530   5      
 531   5                              bufin[inbufind] = byte; 
 532   5                                              inbufind++;
 533   5      
 534   5                          if(inbufind == len + 2)
 535   5                          { 
 536   6                               state = 10;
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 10  

 537   6                          } 
 538   5                                                      
 539   5                              break;
 540   5      
 541   5                                      case 10:
 542   5                                              if(byte == 0x5A) {
 543   6                              state = 11; 
 544   6                                                      break;
 545   6                                              }    
 546   5                          if(byte == 0xA5) {  
 547   6                                                      UART_INIT_1 
 548   6                                                      break;
 549   6                                              }
 550   5                                              UART_INIT 
 551   5                                              break;
 552   5      
 553   5                                      case 11:
 554   5                                      {
 555   6                          u8 i;
 556   6                                              u8 crc = 0;
 557   6                          xdata u16 temp_buf[30];
 558   6                                              if(byte != 0x5A)
 559   6                          {
 560   7                              if(byte == 0xA5) 
 561   7                                                              UART_INIT_1 
 562   7                              else             
 563   7                                                              UART_INIT
 564   7                              break; 
 565   7                          }
 566   6                     
 567   6      
 568   6                          for(i = 1; i <= len; i++) {
 569   7                                                      crc += bufin[i];
 570   7                                              }
 571   6                          if(crc != bufin[len+1]) { 
 572   7                                                      UART_INIT
 573   7                                                      break; 
 574   7                                              }
 575   6                          //decode
 576   6                          for(i = 0; i < len; i++)
 577   6                          {  
 578   7                              sprintf((u8*) &temp_buf[i], "%02X", (u8)bufin[i + 1]);                        
 579   7                          } 
 580   6                          temp_buf[i] = 0x0000;
 581   6                          write_dgus_vp(0x1200, (u8*) &temp_buf, (len * 2) + 2);
 582   6                          
 583   6                      //     
 584   6                          //decode
 585   6                          // if(bufin[1] == 0x31) {
 586   6                          //     u8 i, j;
 587   6                          //     u8 temp_buf[30];
 588   6                          //     for(i = 2, j = 0; i < len; i++, j++) {
 589   6                          //         temp_buf[j] = bufin[i];         
 590   6                          //     }
 591   6                          //     temp_buf[j] = 0x00;
 592   6                          //     print_machine_name(temp_buf);
 593   6                          // }
 594   6                         
 595   6                                              UART_INIT
 596   6                                              break;
 597   6                                      }
 598   5                                      
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 11  

 599   5                                      default: 
 600   5                                              break;
 601   5                              }
 602   4                              
 603   4                              
 604   4                              EA = 1;                
 605   4                  }
 606   3                 
 607   3                  
 608   3              }        
 609   2      
 610   2          }
 611   1          
 612   1      
 613   1      
 614   1         
 615   1      }
*** WARNING C280 IN LINE 239 OF source\main.c: 'tp_state': unreferenced local variable
*** WARNING C280 IN LINE 459 OF source\main.c: 'buf_idx': unreferenced local variable
*** WARNING C290 IN LINE 196 OF source\main.c: missing return value
*** WARNING C294 IN LINE 440 OF source\main.c: unreachable code
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION io_init (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0000 75F901            MOV     PORTDRV,#01H
                                           ; SOURCE LINE # 65
0003 75BCFD            MOV     P1MDOUT,#0FDH
                                           ; SOURCE LINE # 66
0006 7590FD            MOV     P1,#0FDH
                                           ; SOURCE LINE # 67
0009 22                RET     
             ; FUNCTION io_init (END)

             ; FUNCTION nothing (BEGIN)
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 84
0000 22                RET     
             ; FUNCTION nothing (END)

             ; FUNCTION _draw_rectangle (BEGIN)
                                           ; SOURCE LINE # 86
0000 900000      R     MOV     DPTR,#x
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
;---- Variable 'y' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 89
0008 A3                INC     DPTR
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C 7403              MOV     A,#03H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
000F A3                INC     DPTR
0010 E4                CLR     A
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7403              MOV     A,#03H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
0016 E4                CLR     A
0017 A3                INC     DPTR
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
001B A3                INC     DPTR
001C EC                MOV     A,R4
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F ED                MOV     A,R5
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
0021 A3                INC     DPTR
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 13  

0022 7403              MOV     A,#03H
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 74FF              MOV     A,#0FFH
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
0029 ED                MOV     A,R5
002A 2464              ADD     A,#064H
002C FE                MOV     R6,A
002D E4                CLR     A
002E 3C                ADDC    A,R4
002F A3                INC     DPTR
0030 F0                MOVX    @DPTR,A
0031 A3                INC     DPTR
0032 CE                XCH     A,R6
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 95
0034 74FF              MOV     A,#0FFH
0036 A3                INC     DPTR
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
003A A3                INC     DPTR
003B E4                CLR     A
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E 04                INC     A
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
0040 2D                ADD     A,R5
0041 FE                MOV     R6,A
0042 E4                CLR     A
0043 3C                ADDC    A,R4
0044 A3                INC     DPTR
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 CE                XCH     A,R6
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
0049 A3                INC     DPTR
004A 7403              MOV     A,#03H
004C F0                MOVX    @DPTR,A
004D A3                INC     DPTR
004E 74FE              MOV     A,#0FEH
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
0051 ED                MOV     A,R5
0052 2463              ADD     A,#063H
0054 FE                MOV     R6,A
0055 E4                CLR     A
0056 3C                ADDC    A,R4
0057 A3                INC     DPTR
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A CE                XCH     A,R6
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
005C 74FF              MOV     A,#0FFH
005E A3                INC     DPTR
005F F0                MOVX    @DPTR,A
0060 A3                INC     DPTR
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 14  

0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
0062 A3                INC     DPTR
0063 E4                CLR     A
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066 7402              MOV     A,#02H
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
0069 2D                ADD     A,R5
006A FE                MOV     R6,A
006B E4                CLR     A
006C 3C                ADDC    A,R4
006D A3                INC     DPTR
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 CE                XCH     A,R6
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
0072 A3                INC     DPTR
0073 7403              MOV     A,#03H
0075 F0                MOVX    @DPTR,A
0076 A3                INC     DPTR
0077 74FD              MOV     A,#0FDH
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
007A ED                MOV     A,R5
007B 2462              ADD     A,#062H
007D FE                MOV     R6,A
007E E4                CLR     A
007F 3C                ADDC    A,R4
0080 A3                INC     DPTR
0081 F0                MOVX    @DPTR,A
0082 A3                INC     DPTR
0083 CE                XCH     A,R6
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
0085 74FF              MOV     A,#0FFH
0087 A3                INC     DPTR
0088 F0                MOVX    @DPTR,A
0089 A3                INC     DPTR
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
008B A3                INC     DPTR
008C F0                MOVX    @DPTR,A
008D A3                INC     DPTR
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
0090 7B01              MOV     R3,#01H
0092 7A00        R     MOV     R2,#HIGH draw_rect_cmd
0094 7900        R     MOV     R1,#LOW draw_rect_cmd
0096 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B 741E              MOV     A,#01EH
009D F0                MOVX    @DPTR,A
009E 7F00              MOV     R7,#00H
00A0 7E30              MOV     R6,#030H
00A2 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _draw_rectangle (END)

C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 15  

             ; FUNCTION _draw_string (BEGIN)
                                           ; SOURCE LINE # 111
0000 900000      R     MOV     DPTR,#s
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 115
000B 120000      E     LCALL   _strlen
000E EF                MOV     A,R7
000F 04                INC     A
0010 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 116
;---- Variable 'i' assigned to Register 'R6' ----
0011 E4                CLR     A
0012 FE                MOV     R6,A
0013         ?C0004:
0013 EE                MOV     A,R6
0014 C3                CLR     C
0015 9F                SUBB    A,R7
0016 5028              JNC     ?C0005
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
0018 900000      R     MOV     DPTR,#s
001B E0                MOVX    A,@DPTR
001C FB                MOV     R3,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FA                MOV     R2,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 F9                MOV     R1,A
0023 8E82              MOV     DPL,R6
0025 758300            MOV     DPH,#00H
0028 120000      E     LCALL   ?C?CLDOPTR
002B FD                MOV     R5,A
002C EE                MOV     A,R6
002D 25E0              ADD     A,ACC
002F 2400        R     ADD     A,#LOW str
0031 F582              MOV     DPL,A
0033 E4                CLR     A
0034 3400        R     ADDC    A,#HIGH str
0036 F583              MOV     DPH,A
0038 E4                CLR     A
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B ED                MOV     A,R5
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
003D 0E                INC     R6
003E 80D3              SJMP    ?C0004
0040         ?C0005:
                                           ; SOURCE LINE # 120
0040 7B01              MOV     R3,#01H
0042 7A00        R     MOV     R2,#HIGH str
0044 7900        R     MOV     R1,#LOW str
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 16  

0046 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0049 E4                CLR     A
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
004E 7F00              MOV     R7,#00H
0050 7E11              MOV     R6,#011H
0052 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _draw_string (END)

             ; FUNCTION btn_0 (BEGIN)
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 131
0000 900000      R     MOV     DPTR,#rect_y_pos+01H
0003 E0                MOVX    A,@DPTR
0004 249C              ADD     A,#09CH
0006 F0                MOVX    @DPTR,A
0007 900000      R     MOV     DPTR,#rect_y_pos
000A E0                MOVX    A,@DPTR
000B 34FF              ADDC    A,#0FFH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
000E D3                SETB    C
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 9400              SUBB    A,#00H
0013 900000      R     MOV     DPTR,#rect_y_pos
0016 E0                MOVX    A,@DPTR
0017 6480              XRL     A,#080H
0019 9480              SUBB    A,#080H
001B 5007              JNC     ?C0008
                                           ; SOURCE LINE # 133
001D 7402              MOV     A,#02H
001F F0                MOVX    @DPTR,A
0020 A3                INC     DPTR
0021 74BC              MOV     A,#0BCH
0023 F0                MOVX    @DPTR,A
0024         ?C0008:
                                           ; SOURCE LINE # 134
0024 900000      R     MOV     DPTR,#rect_y_pos
0027 E0                MOVX    A,@DPTR
0028 FC                MOV     R4,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FD                MOV     R5,A
002C E4                CLR     A
002D FF                MOV     R7,A
002E FE                MOV     R6,A
002F 020000      R     LJMP    _draw_rectangle
             ; FUNCTION btn_0 (END)

             ; FUNCTION btn_1 (BEGIN)
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 139
0000 900000      R     MOV     DPTR,#rect_y_pos+01H
0003 E0                MOVX    A,@DPTR
0004 2464              ADD     A,#064H
0006 F0                MOVX    @DPTR,A
0007 900000      R     MOV     DPTR,#rect_y_pos
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 17  

000A E0                MOVX    A,@DPTR
000B 3400              ADDC    A,#00H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
000E E0                MOVX    A,@DPTR
000F B4030C            CJNE    A,#03H,?C0010
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 B42007            CJNE    A,#020H,?C0010
                                           ; SOURCE LINE # 141
0017 E4                CLR     A
0018 900000      R     MOV     DPTR,#rect_y_pos
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
001E         ?C0010:
                                           ; SOURCE LINE # 142
001E 900000      R     MOV     DPTR,#rect_y_pos
0021 E0                MOVX    A,@DPTR
0022 FC                MOV     R4,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 E4                CLR     A
0027 FF                MOV     R7,A
0028 FE                MOV     R6,A
0029 120000      R     LCALL   _draw_rectangle
                                           ; SOURCE LINE # 143
002C 7BFF              MOV     R3,#0FFH
002E 7A00        R     MOV     R2,#HIGH ?SC_0
0030 7900        R     MOV     R1,#LOW ?SC_0
0032 020000      R     LJMP    _draw_string
             ; FUNCTION btn_1 (END)

             ; FUNCTION btn_2 (BEGIN)
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_9
0004 7900        R     MOV     R1,#LOW ?SC_9
0006 120000      R     LCALL   _draw_string
                                           ; SOURCE LINE # 149
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_18
000D 7900        R     MOV     R1,#LOW ?SC_18
000F 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 7404              MOV     A,#04H
0017 F0                MOVX    @DPTR,A
0018 7F00              MOV     R7,#00H
001A 7E12              MOV     R6,#012H
001C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_2 (END)

             ; FUNCTION btn_3 (BEGIN)
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 156
0000 900000      E     MOV     DPTR,#?_sprintf?BYTE+03H
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 18  

0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        R     MOV     A,#HIGH ?SC_22
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B 7400        R     MOV     A,#LOW ?SC_22
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F 74FF              MOV     A,#0FFH
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 7400        R     MOV     A,#HIGH ?SC_29
0015 F0                MOVX    @DPTR,A
0016 A3                INC     DPTR
0017 7400        R     MOV     A,#LOW ?SC_29
0019 F0                MOVX    @DPTR,A
001A 900000      R     MOV     DPTR,#n
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F A3                INC     DPTR
0020 E0                MOVX    A,@DPTR
0021 900000      E     MOV     DPTR,#?_sprintf?BYTE+09H
0024 CF                XCH     A,R7
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
0029 7B01              MOV     R3,#01H
002B 7A00        R     MOV     R2,#HIGH temp
002D 7900        R     MOV     R1,#LOW temp
002F 120000      E     LCALL   _sprintf
                                           ; SOURCE LINE # 157
0032 900000      R     MOV     DPTR,#n+01H
0035 E0                MOVX    A,@DPTR
0036 04                INC     A
0037 F0                MOVX    @DPTR,A
0038 7006              JNZ     ?C0081
003A 900000      R     MOV     DPTR,#n
003D E0                MOVX    A,@DPTR
003E 04                INC     A
003F F0                MOVX    @DPTR,A
0040         ?C0081:
                                           ; SOURCE LINE # 158
0040 7B01              MOV     R3,#01H
0042 7A00        R     MOV     R2,#HIGH temp
0044 7900        R     MOV     R1,#LOW temp
0046 120000      R     LCALL   _draw_string
                                           ; SOURCE LINE # 159
0049 7BFF              MOV     R3,#0FFH
004B 7A00        R     MOV     R2,#HIGH ?SC_34
004D 7900        R     MOV     R1,#LOW ?SC_34
004F 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0052 E4                CLR     A
0053 F0                MOVX    @DPTR,A
0054 A3                INC     DPTR
0055 7404              MOV     A,#04H
0057 F0                MOVX    @DPTR,A
0058 7F00              MOV     R7,#00H
005A 7E12              MOV     R6,#012H
005C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_3 (END)
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 19  


             ; FUNCTION btn_4 (BEGIN)
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_38
0004 7900        R     MOV     R1,#LOW ?SC_38
0006 120000      R     LCALL   _draw_string
                                           ; SOURCE LINE # 165
0009 7BFF              MOV     R3,#0FFH
000B 7A00        R     MOV     R2,#HIGH ?SC_47
000D 7900        R     MOV     R1,#LOW ?SC_47
000F 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
0014 A3                INC     DPTR
0015 7404              MOV     A,#04H
0017 F0                MOVX    @DPTR,A
0018 7F00              MOV     R7,#00H
001A 7E12              MOV     R6,#012H
001C 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_4 (END)

             ; FUNCTION btn_5 (BEGIN)
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
0000 7BFF              MOV     R3,#0FFH
0002 7A00        R     MOV     R2,#HIGH ?SC_51
0004 7900        R     MOV     R1,#LOW ?SC_51
0006 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C 7404              MOV     A,#04H
000E F0                MOVX    @DPTR,A
000F 7F00              MOV     R7,#00H
0011 7E12              MOV     R6,#012H
0013 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION btn_5 (END)

             ; FUNCTION _print_utf_str (BEGIN)
                                           ; SOURCE LINE # 183
0000 900000      R     MOV     DPTR,#vp
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F E9                MOV     A,R1
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 189
0011 120000      E     LCALL   _strlen
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 20  

0014 EF                MOV     A,R7
0015 04                INC     A
0016 FF                MOV     R7,A
;---- Variable 'len' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 191
;---- Variable 'i' assigned to Register 'R6' ----
0017 E4                CLR     A
0018 FE                MOV     R6,A
0019         ?C0016:
0019 EE                MOV     A,R6
001A C3                CLR     C
001B 9F                SUBB    A,R7
001C 5028              JNC     ?C0017
                                           ; SOURCE LINE # 192
001E 900000      R     MOV     DPTR,#str
0021 E0                MOVX    A,@DPTR
0022 FB                MOV     R3,A
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FA                MOV     R2,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 F9                MOV     R1,A
0029 8E82              MOV     DPL,R6
002B 758300            MOV     DPH,#00H
002E 120000      E     LCALL   ?C?CLDOPTR
0031 FD                MOV     R5,A
0032 EE                MOV     A,R6
0033 25E0              ADD     A,ACC
0035 2400        R     ADD     A,#LOW out_str
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        R     ADDC    A,#HIGH out_str
003C F583              MOV     DPH,A
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
0040 A3                INC     DPTR
0041 ED                MOV     A,R5
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
0043 0E                INC     R6
0044 80D3              SJMP    ?C0016
0046         ?C0017:
                                           ; SOURCE LINE # 195
0046 900000      R     MOV     DPTR,#vp
0049 E0                MOVX    A,@DPTR
004A FE                MOV     R6,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 7B01              MOV     R3,#01H
0050 7A00        R     MOV     R2,#HIGH out_str
0052 7900        R     MOV     R1,#LOW out_str
0054 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0057 E4                CLR     A
0058 F0                MOVX    @DPTR,A
0059 A3                INC     DPTR
005A 743C              MOV     A,#03CH
005C F0                MOVX    @DPTR,A
005D 020000      E     LJMP    _write_dgus_vp
             ; FUNCTION _print_utf_str (END)

C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 21  

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0000 120000      E     LCALL   INIT_CPU
                                           ; SOURCE LINE # 212
0003 120000      E     LCALL   T0_Init
                                           ; SOURCE LINE # 213
0006 D2AF              SETB    EA
                                           ; SOURCE LINE # 218
0008 120000      R     LCALL   io_init
                                           ; SOURCE LINE # 220
000B 120000      E     LCALL   ssd2828_init
                                           ; SOURCE LINE # 222
000E 900000      E     MOV     DPTR,#?_UartInit?BYTE+01H
0011 120000      E     LCALL   ?C?LSTKXDATA
0014 00                DB      00H
0015 01                DB      01H
0016 C2                DB      0C2H
0017 00                DB      00H
0018 7F03              MOV     R7,#03H
001A 120000      E     LCALL   _UartInit
                                           ; SOURCE LINE # 223
001D E4                CLR     A
001E 900000      R     MOV     DPTR,#inbufind
0021 F0                MOVX    @DPTR,A
0022 900000      R     MOV     DPTR,#state
0025 F0                MOVX    @DPTR,A
0026 900000      R     MOV     DPTR,#endfl
0029 F0                MOVX    @DPTR,A
002A 900000      R     MOV     DPTR,#begfl
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
002E 120000      E     LCALL   draw_bottom_menu
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
0031         ?C0022:
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
0031 7B01              MOV     R3,#01H
0033 7A00        R     MOV     R2,#HIGH touch_data
0035 7900        R     MOV     R1,#LOW touch_data
0037 900000      E     MOV     DPTR,#?_read_dgus_vp?BYTE+05H
003A E4                CLR     A
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D 7403              MOV     A,#03H
003F F0                MOVX    @DPTR,A
0040 7F16              MOV     R7,#016H
0042 7E00              MOV     R6,#00H
0044 120000      E     LCALL   _read_dgus_vp
                                           ; SOURCE LINE # 252
0047 900000      R     MOV     DPTR,#touch_data
004A E0                MOVX    A,@DPTR
004B B45AE3            CJNE    A,#05AH,?C0022
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
004E E4                CLR     A
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
0050 7B01              MOV     R3,#01H
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 22  

0052 7A00        R     MOV     R2,#HIGH touch_data+02H
0054 7900        R     MOV     R1,#LOW touch_data+02H
0056 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0059 F0                MOVX    @DPTR,A
005A A3                INC     DPTR
005B 04                INC     A
005C F0                MOVX    @DPTR,A
005D 7F16              MOV     R7,#016H
005F 7E00              MOV     R6,#00H
0061 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
0064 900000      R     MOV     DPTR,#touch_data+01H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 900000      R     MOV     DPTR,#action
006C E4                CLR     A
006D F0                MOVX    @DPTR,A
006E A3                INC     DPTR
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
0071 7B01              MOV     R3,#01H
0073 7A00        R     MOV     R2,#HIGH action
0075 7900        R     MOV     R1,#LOW action
0077 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
007A E4                CLR     A
007B F0                MOVX    @DPTR,A
007C A3                INC     DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
007F 7F00              MOV     R7,#00H
0081 7E40              MOV     R6,#040H
0083 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 260
0086 7B01              MOV     R3,#01H
0088 7A00        R     MOV     R2,#HIGH touch_data+02H
008A 7900        R     MOV     R1,#LOW touch_data+02H
008C 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
008F E4                CLR     A
0090 F0                MOVX    @DPTR,A
0091 A3                INC     DPTR
0092 7402              MOV     A,#02H
0094 F0                MOVX    @DPTR,A
0095 7F00              MOV     R7,#00H
0097 7E52              MOV     R6,#052H
0099 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 263
009C 900000      R     MOV     DPTR,#touch_data+01H
009F E0                MOVX    A,@DPTR
00A0 14                DEC     A
00A1 708E              JNZ     ?C0022
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
00A3         ?C0026:
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 268
00A3 E4                CLR     A
00A4 900000      E     MOV     DPTR,#last_selected_menu_item
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 23  

00A8 900000      R     MOV     DPTR,#i
00AB F0                MOVX    @DPTR,A
00AC         ?C0027:
00AC 900000      E     MOV     DPTR,#cur_menu
00AF E0                MOVX    A,@DPTR
00B0 FB                MOV     R3,A
00B1 A3                INC     DPTR
00B2 E0                MOVX    A,@DPTR
00B3 FA                MOV     R2,A
00B4 A3                INC     DPTR
00B5 E0                MOVX    A,@DPTR
00B6 F9                MOV     R1,A
00B7 120000      E     LCALL   ?C?CLDPTR
00BA FF                MOV     R7,A
00BB 900000      R     MOV     DPTR,#i
00BE E0                MOVX    A,@DPTR
00BF C3                CLR     C
00C0 9F                SUBB    A,R7
00C1 4003              JC      $ + 5H
00C3 020000      R     LJMP    ?C0028
                                           ; SOURCE LINE # 270
00C6 900001            MOV     DPTR,#01H
00C9 120000      E     LCALL   ?C?PLDOPTR
00CC 900000      R     MOV     DPTR,#i
00CF E0                MOVX    A,@DPTR
00D0 75F009            MOV     B,#09H
00D3 A4                MUL     AB
00D4 F582              MOV     DPL,A
00D6 85F083            MOV     DPH,B
00D9 120000      E     LCALL   ?C?CLDOPTR
00DC F9                MOV     R1,A
00DD E4                CLR     A
00DE 7F01              MOV     R7,#01H
00E0 FE                MOV     R6,A
00E1 FD                MOV     R5,A
00E2 FC                MOV     R4,A
00E3 A801              MOV     R0,AR1
00E5 120000      E     LCALL   ?C?LSHL
00E8 7800        E     MOV     R0,#LOW active_items_bm
00EA 120000      E     LCALL   ?C?LLDIDATA0
00ED EF                MOV     A,R7
00EE 5B                ANL     A,R3
00EF FF                MOV     R7,A
00F0 EE                MOV     A,R6
00F1 5A                ANL     A,R2
00F2 FE                MOV     R6,A
00F3 ED                MOV     A,R5
00F4 59                ANL     A,R1
00F5 FD                MOV     R5,A
00F6 EC                MOV     A,R4
00F7 58                ANL     A,R0
00F8 FC                MOV     R4,A
00F9 E4                CLR     A
00FA FB                MOV     R3,A
00FB FA                MOV     R2,A
00FC F9                MOV     R1,A
00FD F8                MOV     R0,A
00FE C3                CLR     C
00FF 120000      E     LCALL   ?C?ULCMP
0102 7003              JNZ     $ + 5H
0104 020000      R     LJMP    ?C0029
                                           ; SOURCE LINE # 271
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 24  

0107 900000      E     MOV     DPTR,#cur_menu
010A E0                MOVX    A,@DPTR
010B FB                MOV     R3,A
010C A3                INC     DPTR
010D E0                MOVX    A,@DPTR
010E FA                MOV     R2,A
010F A3                INC     DPTR
0110 E0                MOVX    A,@DPTR
0111 F9                MOV     R1,A
0112 900001            MOV     DPTR,#01H
0115 120000      E     LCALL   ?C?PLDOPTR
0118 900000      R     MOV     DPTR,#i
011B E0                MOVX    A,@DPTR
011C 75F009            MOV     B,#09H
011F A4                MUL     AB
0120 29                ADD     A,R1
0121 F9                MOV     R1,A
0122 EA                MOV     A,R2
0123 35F0              ADDC    A,B
0125 FA                MOV     R2,A
0126 900001            MOV     DPTR,#01H
0129 120000      E     LCALL   ?C?ILDOPTR
012C FF                MOV     R7,A
012D C3                CLR     C
012E 900000      R     MOV     DPTR,#touch_data+03H
0131 E0                MOVX    A,@DPTR
0132 9F                SUBB    A,R7
0133 900000      R     MOV     DPTR,#touch_data+02H
0136 E0                MOVX    A,@DPTR
0137 95F0              SUBB    A,B
0139 5003              JNC     $ + 5H
013B 020000      R     LJMP    ?C0031
013E 900005            MOV     DPTR,#05H
0141 120000      E     LCALL   ?C?ILDOPTR
0144 FF                MOV     R7,A
0145 D3                SETB    C
0146 900000      R     MOV     DPTR,#touch_data+03H
0149 E0                MOVX    A,@DPTR
014A 9F                SUBB    A,R7
014B 900000      R     MOV     DPTR,#touch_data+02H
014E E0                MOVX    A,@DPTR
014F 95F0              SUBB    A,B
0151 4003              JC      $ + 5H
0153 020000      R     LJMP    ?C0031
0156 900003            MOV     DPTR,#03H
0159 120000      E     LCALL   ?C?ILDOPTR
015C FF                MOV     R7,A
015D C3                CLR     C
015E 900000      R     MOV     DPTR,#touch_data+05H
0161 E0                MOVX    A,@DPTR
0162 9F                SUBB    A,R7
0163 900000      R     MOV     DPTR,#touch_data+04H
0166 E0                MOVX    A,@DPTR
0167 95F0              SUBB    A,B
0169 5003              JNC     $ + 5H
016B 020000      R     LJMP    ?C0031
016E 900007            MOV     DPTR,#07H
0171 120000      E     LCALL   ?C?ILDOPTR
0174 FF                MOV     R7,A
0175 D3                SETB    C
0176 900000      R     MOV     DPTR,#touch_data+05H
0179 E0                MOVX    A,@DPTR
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 25  

017A 9F                SUBB    A,R7
017B 900000      R     MOV     DPTR,#touch_data+04H
017E E0                MOVX    A,@DPTR
017F 95F0              SUBB    A,B
0181 4003              JC      $ + 5H
0183 020000      R     LJMP    ?C0031
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 276
0186 900000      E     MOV     DPTR,#cur_menu
0189 E0                MOVX    A,@DPTR
018A FB                MOV     R3,A
018B A3                INC     DPTR
018C E0                MOVX    A,@DPTR
018D FA                MOV     R2,A
018E A3                INC     DPTR
018F E0                MOVX    A,@DPTR
0190 F9                MOV     R1,A
0191 EB                MOV     A,R3
0192 8A83              MOV     DPH,R2
0194 8982              MOV     DPL,R1
0196 F4                CPL     A
0197 700A              JNZ     ?C0082
0199 7400        E     MOV     A,#LOW arr_of_menus
019B 6582              XRL     A,DPL
019D 7004              JNZ     ?C0082
019F 7400        E     MOV     A,#HIGH arr_of_menus
01A1 6583              XRL     A,DPH
01A3         ?C0082:
01A3 6043              JZ      ?C0032
                                           ; SOURCE LINE # 277
01A5 900000      E     MOV     DPTR,#cur_menu
01A8 E0                MOVX    A,@DPTR
01A9 FB                MOV     R3,A
01AA A3                INC     DPTR
01AB E0                MOVX    A,@DPTR
01AC FA                MOV     R2,A
01AD A3                INC     DPTR
01AE E0                MOVX    A,@DPTR
01AF F9                MOV     R1,A
01B0 900001            MOV     DPTR,#01H
01B3 120000      E     LCALL   ?C?PLDOPTR
01B6 900000      R     MOV     DPTR,#i
01B9 E0                MOVX    A,@DPTR
01BA 75F009            MOV     B,#09H
01BD A4                MUL     AB
01BE F582              MOV     DPL,A
01C0 85F083            MOV     DPH,B
01C3 120000      E     LCALL   ?C?CLDOPTR
01C6 FF                MOV     R7,A
01C7 900000      E     MOV     DPTR,#arr_of_menus+01H
01CA E4                CLR     A
01CB 93                MOVC    A,@A+DPTR
01CC FB                MOV     R3,A
01CD 7401              MOV     A,#01H
01CF 93                MOVC    A,@A+DPTR
01D0 FA                MOV     R2,A
01D1 7402              MOV     A,#02H
01D3 93                MOVC    A,@A+DPTR
01D4 F9                MOV     R1,A
01D5 900000      E     MOV     DPTR,#prev_menu_item
01D8 E0                MOVX    A,@DPTR
01D9 75F009            MOV     B,#09H
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 26  

01DC A4                MUL     AB
01DD F582              MOV     DPL,A
01DF 85F083            MOV     DPH,B
01E2 120000      E     LCALL   ?C?CLDOPTR
01E5 6F                XRL     A,R7
01E6 6031              JZ      ?C0029
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
01E8         ?C0033:
                                           ; SOURCE LINE # 281
01E8         ?C0032:
                                           ; SOURCE LINE # 283
01E8 900000      R     MOV     DPTR,#i
01EB E0                MOVX    A,@DPTR
01EC FF                MOV     R7,A
01ED 900000      E     MOV     DPTR,#cur_menu
01F0 E0                MOVX    A,@DPTR
01F1 FB                MOV     R3,A
01F2 A3                INC     DPTR
01F3 E0                MOVX    A,@DPTR
01F4 FA                MOV     R2,A
01F5 A3                INC     DPTR
01F6 E0                MOVX    A,@DPTR
01F7 F9                MOV     R1,A
01F8 900004            MOV     DPTR,#04H
01FB 120000      E     LCALL   ?C?ILDOPTR
01FE FD                MOV     R5,A
01FF ACF0              MOV     R4,B
0201 F582              MOV     DPL,A
0203 85F083            MOV     DPH,B
0206 120000      E     LCALL   ?C?ICALL2
                                           ; SOURCE LINE # 284
0209 900000      E     MOV     DPTR,#last_selected_menu_item
020C E0                MOVX    A,@DPTR
020D 900000      E     MOV     DPTR,#prev_menu_item
0210 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
0211 800F              SJMP    ?C0028
                                           ; SOURCE LINE # 286
0213         ?C0031:
                                           ; SOURCE LINE # 287
0213 900000      E     MOV     DPTR,#last_selected_menu_item
0216 E0                MOVX    A,@DPTR
0217 04                INC     A
0218 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0219         ?C0029:
0219 900000      R     MOV     DPTR,#i
021C E0                MOVX    A,@DPTR
021D 04                INC     A
021E F0                MOVX    @DPTR,A
021F 020000      R     LJMP    ?C0027
0222         ?C0028:
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
0222 900000      E     MOV     DPTR,#last_selected_menu_item
0225 E0                MOVX    A,@DPTR
0226 FF                MOV     R7,A
0227 900000      R     MOV     DPTR,#dummy
022A E4                CLR     A
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 27  

022B F0                MOVX    @DPTR,A
022C A3                INC     DPTR
022D EF                MOV     A,R7
022E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
022F 7B01              MOV     R3,#01H
0231 7A00        R     MOV     R2,#HIGH dummy
0233 7900        R     MOV     R1,#LOW dummy
0235 900000      E     MOV     DPTR,#?_write_dgus_vp?BYTE+05H
0238 E4                CLR     A
0239 F0                MOVX    @DPTR,A
023A A3                INC     DPTR
023B 04                INC     A
023C F0                MOVX    @DPTR,A
023D 7F00              MOV     R7,#00H
023F 7E25              MOV     R6,#025H
0241 120000      E     LCALL   _write_dgus_vp
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 297
0244 020000      R     LJMP    ?C0022
             ; FUNCTION main (END)

C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 28  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


INIT_CPU . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
QUENE. . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
EIID_AC. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CANBUSUNIT . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
EIID_D_10. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
begfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0004H  1
EIID_H2O_OFF . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_D_20. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_2T. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
counter. . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0005H  1
EIID_D_40. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_4T. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_D_32. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_PULSE_ON. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
EIID_D_24. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_D_16. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Uart_Struct. . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  -----
arr_of_menus . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
EIID_TIG_SPOT. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_HF. . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_sprintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
endfl. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   0006H  1
menu_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  items. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0001H  3
  func . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0004H  2
_write_dgus_vp . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
my_text. . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0007H  100
last_selected_menu_item. . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CANBUS8283 . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
CANUNIT. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
bufin. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    006BH  255
_strlen. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_print_utf_str . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  vp . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0002H  3
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 29  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  out_str. . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0005H  60
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
menu_item_t. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  9
  ico. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  r. . . . . . . . . . . . . . . . . .  MEMBER   -----  STRUCT   0001H  8
temp_offset. . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   016AH  1
state. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   016BH  1
EIID_NO_ICON . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  action . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0006H  2
  dummy. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0007H  2
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1
  ETPS_WAIT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_RELEASE . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_FIRST_PRESS . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_LIFT. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETPS_PRESSING. . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
  ETP_STATE. . . . . . . . . . . . . .  * TAG *  -----  ENUM     -----  -----
  tp_state . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0002H  1
  touch_data . . . . . . . . . . . . .  AUTO     XDATA  STRUCT   0000H  6
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0001H  1
  crc. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  temp_buf . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0003H  60
  byte . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  buf_idx. . . . . . . . . . . . . . .  STATIC   XDATA  U_CHAR   0003H  1
dbg_string . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    016CH  50
EIID_DC_PLUS . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_4T_PLUS . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MSPIFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
_mSPIFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  16
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0001H  2
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0003H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      000BH  3
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    000EH  2
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
_draw_string . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s. . . . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  3
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0003H  100
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  len. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
EIID_RECT. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_LIFT. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
MNORFLASH. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 30  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
_mNORFLASH . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  12
  Mode . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  FLAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  VPAddr . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  Len. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
  Buf. . . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0009H  3
text_field . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  9
  vp . . . . . . . . . . . . . . . . .  MEMBER   -----  VOID_PTR 0000H  3
  x. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0003H  2
  y. . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0005H  2
  color. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0007H  2
_candataunitbuf. . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6661
  BusRXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  3328
  BusTXbuf . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0D00H  3328
  CanRxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A00H  1
  CanRxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A01H  1
  CanTxHead. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A02H  1
  CanTxTail. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A03H  1
  CanTxFlag. . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   1A04H  1
EIID_TRIG. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PORTDRV. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
EIID_TRAP. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_UartInit. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
active_items_bm. . . . . . . . . . . .  EXTERN   IDATA  U_LONG   -----  4
list_par_t . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  32
  name . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  30
  val. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    001EH  2
ssd2828_init . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
rect_y_pos . . . . . . . . . . . . . .  PUBLIC   XDATA  INT      019EH  2
len. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   01A0H  1
DATABUFF . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
draw_bottom_menu . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
databuff . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  2057
  tx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  1024
  rx_buf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0400H  1024
  tx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0800H  2
  tx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0802H  2
  rx_head. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0804H  2
  rx_tail. . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0806H  2
  tx_flag. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0808H  1
EIID_H2O_ON. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
EIID_PULSE_OFF . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
idx. . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   01A1H  1
key_code . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    01A2H  2
_draw_rectangle. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  y. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 31  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  draw_rect_cmd. . . . . . . . . . . .  AUTO     XDATA  ARRAY    0002H  60
EIID_AC_MIX. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
MMUSIC . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
_mMUSIC. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  35
  IdNmu. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  32
  PlayTail . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0020H  1
  PlayHead . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0021H  1
  PlayInterrupt. . . . . . . . . . . .  MEMBER   -----  U_CHAR   0022H  1
btn_func . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    003CH  48
inbufind . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   01A4H  1
btn_0. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
btn_1. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
btn_2. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_quene8283 . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  11
  pQuene . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  3
  QueneHead. . . . . . . . . . . . . .  MEMBER   -----  PTR      0003H  3
  QueneTail. . . . . . . . . . . . . .  MEMBER   -----  PTR      0006H  3
  QueneSize. . . . . . . . . . . . . .  MEMBER   -----  U_INT    0009H  2
btn_3. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  STATIC   XDATA  U_INT    0000H  2
  temp . . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0000H  50
EIID_MMA . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
s32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
btn_4. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
icon_id. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
btn_5. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
u32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
s16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
u16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
EIID_TIG . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
cur_menu . . . . . . . . . . . . . . .  EXTERN   XDATA  PTR      -----  3
EIID_SIN . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
prev_menu_item . . . . . . . . . . . .  EXTERN   XDATA  U_CHAR   -----  1
_can8283 . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  260
  Busbuf . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  256
  Can8283RxHead. . . . . . . . . . . .  MEMBER   -----  U_INT    0100H  2
  Can8283RxTail. . . . . . . . . . . .  MEMBER   -----  U_INT    0102H  2
KEY_CODE_VP. . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    01A5H  2
some_rus_string. . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0000H  54
io_init. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
EIID_DC_MINUS. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_candataunit . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  13
  status . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  ID . . . . . . . . . . . . . . . . .  MEMBER   -----  U_LONG   0001H  4
  candata. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0005H  8
text1. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  STRUCT   01A7H  9
trect_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  x0 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  y0 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  x1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
  y1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0006H  2
string_offsets . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    006CH  16
C51 COMPILER V9.53.0.0   MAIN                                                              11/03/2023 14:49:25 PAGE 32  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


T0_Init. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
nothing. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_read_dgus_vp. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1222    ----
   CONSTANT SIZE    =    124    ----
   XDATA SIZE       =    432     343
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  6 WARNING(S),  0 ERROR(S)
